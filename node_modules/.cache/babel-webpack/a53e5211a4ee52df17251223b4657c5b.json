{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\n\nclass CdTimerComponent {\n  constructor(elt, renderer) {\n    this.elt = elt;\n    this.renderer = renderer;\n    this.onStart = new EventEmitter();\n    this.onStop = new EventEmitter();\n    this.onTick = new EventEmitter();\n    this.onComplete = new EventEmitter(); // Initialization\n\n    this.autoStart = true;\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeoutId = null;\n    this.countdown = false;\n    this.format = 'default';\n  }\n\n  ngAfterViewInit() {\n    const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n\n    this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n\n    if (this.autoStart === undefined || this.autoStart === true) {\n      this.start();\n    }\n  }\n\n  ngOnDestroy() {\n    this.resetTimeout();\n  }\n  /**\n   * Start the timer\n   */\n\n\n  start() {\n    this.initVar();\n    this.resetTimeout();\n    this.computeTimeUnits();\n    this.startTickCount();\n    this.onStart.emit(this);\n  }\n  /**\n   * Resume the timer\n   */\n\n\n  resume() {\n    this.resetTimeout();\n    this.startTickCount();\n  }\n  /**\n   * Stop the timer\n   */\n\n\n  stop() {\n    this.clear();\n    this.onStop.emit(this);\n  }\n  /**\n   * Reset the timer\n   */\n\n\n  reset() {\n    this.initVar();\n    this.resetTimeout();\n    this.clear();\n    this.computeTimeUnits();\n    this.renderText();\n  }\n  /**\n   * Get the time information\n   * @returns TimeInterface\n   */\n\n\n  get() {\n    return {\n      seconds: this.seconds,\n      minutes: this.minutes,\n      hours: this.hours,\n      days: this.days,\n      timer: this.timeoutId,\n      tick_count: this.tickCounter\n    };\n  }\n  /**\n   * Initialize variable before start\n   */\n\n\n  initVar() {\n    this.startTime = this.startTime || 0;\n    this.endTime = this.endTime || 0;\n    this.countdown = this.countdown || false;\n    this.tickCounter = this.startTime; // Disable countdown if start time not defined\n\n    if (this.countdown && this.startTime === 0) {\n      this.countdown = false;\n    } // Determine auto format\n\n\n    if (!this.format) {\n      this.format = this.ngContentSchema.length > 5 ? 'user' : 'default';\n    }\n  }\n  /**\n   * Reset timeout\n   */\n\n\n  resetTimeout() {\n    if (this.timeoutId) {\n      clearInterval(this.timeoutId);\n    }\n  }\n  /**\n   * Render the time to DOM\n   */\n\n\n  renderText() {\n    let outputText;\n\n    if (this.format === 'user') {\n      // User presentation\n      const items = {\n        'seconds': this.seconds,\n        'minutes': this.minutes,\n        'hours': this.hours,\n        'days': this.days\n      };\n      outputText = this.ngContentSchema;\n\n      for (const key of Object.keys(items)) {\n        outputText = outputText.replace('[' + key + ']', items[key].toString());\n      }\n    } else if (this.format === 'intelli') {\n      // Intelli presentation\n      outputText = '';\n\n      if (this.days > 0) {\n        outputText += this.days.toString() + 'day' + (this.days > 1 ? 's' : '') + ' ';\n      }\n\n      if (this.hours > 0 || this.days > 0) {\n        outputText += this.hours.toString() + 'h ';\n      }\n\n      if ((this.minutes > 0 || this.hours > 0) && this.days === 0) {\n        outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n      }\n\n      if (this.hours === 0 && this.days === 0) {\n        outputText += this.seconds.toString().padStart(2, '0') + 's';\n      }\n    } else if (this.format === 'hms') {\n      // Hms presentation\n      outputText = this.hours.toString().padStart(2, '0') + ':';\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else if (this.format === 'ms') {\n      // ms presentation\n      outputText = '';\n\n      if (this.hours > 0) {\n        outputText = this.hours.toString().padStart(2, '0') + ':';\n      }\n\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else {\n      // Default presentation\n      outputText = this.days.toString() + 'd ';\n      outputText += this.hours.toString() + 'h ';\n      outputText += this.minutes.toString() + 'm ';\n      outputText += this.seconds.toString() + 's';\n    }\n\n    this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n  }\n\n  clear() {\n    this.resetTimeout();\n    this.timeoutId = null;\n  }\n  /**\n   * Compute each unit (seconds, minutes, hours, days) for further manipulation\n   * @protected\n   */\n\n\n  computeTimeUnits() {\n    if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600 % 24);\n      this.days = Math.floor(this.tickCounter / 3600 / 24);\n    } else if (this.maxTimeUnit === 'second') {\n      this.seconds = this.tickCounter;\n      this.minutes = 0;\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'minute') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60);\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'hour') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600);\n      this.days = 0;\n    }\n\n    this.renderText();\n  }\n  /**\n   * Start tick count, base of this component\n   * @protected\n   */\n\n\n  startTickCount() {\n    const that = this;\n    that.timeoutId = setInterval(function () {\n      let counter;\n\n      if (that.countdown) {\n        // Compute finish counter for countdown\n        counter = that.tickCounter;\n\n        if (that.startTime > that.endTime) {\n          counter = that.tickCounter - that.endTime - 1;\n        }\n      } else {\n        // Compute finish counter for timer\n        counter = that.tickCounter - that.startTime;\n\n        if (that.endTime > that.startTime) {\n          counter = that.endTime - that.tickCounter - 1;\n        }\n      }\n\n      that.computeTimeUnits();\n      const timer = {\n        seconds: that.seconds,\n        minutes: that.minutes,\n        hours: that.hours,\n        days: that.days,\n        timer: that.timeoutId,\n        tick_count: that.tickCounter\n      };\n      that.onTick.emit(timer);\n\n      if (counter < 0) {\n        that.stop();\n        that.onComplete.emit(that);\n        return;\n      }\n\n      if (that.countdown) {\n        that.tickCounter--;\n      } else {\n        that.tickCounter++;\n      }\n    }, 1000); // Each seconds\n  }\n\n}\n\nCdTimerComponent.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerComponent,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: i0.Renderer2\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nCdTimerComponent.ɵcmp = i0.ɵɵdefineComponent({\n  type: CdTimerComponent,\n  selectors: [[\"cd-timer\"]],\n  inputs: {\n    startTime: \"startTime\",\n    endTime: \"endTime\",\n    countdown: \"countdown\",\n    autoStart: \"autoStart\",\n    maxTimeUnit: \"maxTimeUnit\",\n    format: \"format\"\n  },\n  outputs: {\n    onStart: \"onStart\",\n    onStop: \"onStop\",\n    onTick: \"onTick\",\n    onComplete: \"onComplete\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CdTimerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'cd-timer',\n      template: ' <ng-content></ng-content>'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  },\n  propDecorators: {\n    startTime: [{\n      type: Input\n    }],\n    endTime: [{\n      type: Input\n    }],\n    countdown: [{\n      type: Input\n    }],\n    autoStart: [{\n      type: Input\n    }],\n    maxTimeUnit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    onStart: [{\n      type: Output\n    }],\n    onStop: [{\n      type: Output\n    }],\n    onTick: [{\n      type: Output\n    }],\n    onComplete: [{\n      type: Output\n    }]\n  }\n});\n\nclass CdTimerModule {}\n\nCdTimerModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nCdTimerModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerModule,\n  declarations: [CdTimerComponent],\n  exports: [CdTimerComponent]\n});\nCdTimerModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerModule,\n  imports: [[]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.3\",\n  ngImport: i0,\n  type: CdTimerModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [CdTimerComponent],\n      imports: [],\n      exports: [CdTimerComponent]\n    }]\n  }]\n});\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule }; //# sourceMappingURL=angular-cd-timer.mjs.map","map":{"version":3,"sources":["C:/Users/PC-YOUSSRA/Desktop/inesProjet/ines/node_modules/angular-cd-timer/fesm2015/angular-cd-timer.mjs"],"names":["i0","EventEmitter","Component","Input","Output","NgModule","CdTimerComponent","constructor","elt","renderer","onStart","onStop","onTick","onComplete","autoStart","startTime","endTime","timeoutId","countdown","format","ngAfterViewInit","ngContentNode","nativeElement","lastChild","ngContentSchema","nodeValue","undefined","start","ngOnDestroy","resetTimeout","initVar","computeTimeUnits","startTickCount","emit","resume","stop","clear","reset","renderText","get","seconds","minutes","hours","days","timer","tick_count","tickCounter","length","clearInterval","outputText","items","key","Object","keys","replace","toString","padStart","setProperty","maxTimeUnit","Math","floor","that","setInterval","counter","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","token","ElementRef","Renderer2","target","ɵɵFactoryTarget","ɵcmp","ɵɵngDeclareClassMetadata","decorators","args","selector","template","ctorParameters","propDecorators","CdTimerModule","ɵmod","ɵɵngDeclareNgModule","declarations","exports","ɵinj","ɵɵngDeclareInjector","imports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\n\nclass CdTimerComponent {\n    constructor(elt, renderer) {\n        this.elt = elt;\n        this.renderer = renderer;\n        this.onStart = new EventEmitter();\n        this.onStop = new EventEmitter();\n        this.onTick = new EventEmitter();\n        this.onComplete = new EventEmitter();\n        // Initialization\n        this.autoStart = true;\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeoutId = null;\n        this.countdown = false;\n        this.format = 'default';\n    }\n    ngAfterViewInit() {\n        const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n        this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n        if (this.autoStart === undefined || this.autoStart === true) {\n            this.start();\n        }\n    }\n    ngOnDestroy() {\n        this.resetTimeout();\n    }\n    /**\n     * Start the timer\n     */\n    start() {\n        this.initVar();\n        this.resetTimeout();\n        this.computeTimeUnits();\n        this.startTickCount();\n        this.onStart.emit(this);\n    }\n    /**\n     * Resume the timer\n     */\n    resume() {\n        this.resetTimeout();\n        this.startTickCount();\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        this.clear();\n        this.onStop.emit(this);\n    }\n    /**\n     * Reset the timer\n     */\n    reset() {\n        this.initVar();\n        this.resetTimeout();\n        this.clear();\n        this.computeTimeUnits();\n        this.renderText();\n    }\n    /**\n     * Get the time information\n     * @returns TimeInterface\n     */\n    get() {\n        return {\n            seconds: this.seconds,\n            minutes: this.minutes,\n            hours: this.hours,\n            days: this.days,\n            timer: this.timeoutId,\n            tick_count: this.tickCounter\n        };\n    }\n    /**\n     * Initialize variable before start\n     */\n    initVar() {\n        this.startTime = this.startTime || 0;\n        this.endTime = this.endTime || 0;\n        this.countdown = this.countdown || false;\n        this.tickCounter = this.startTime;\n        // Disable countdown if start time not defined\n        if (this.countdown && this.startTime === 0) {\n            this.countdown = false;\n        }\n        // Determine auto format\n        if (!this.format) {\n            this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';\n        }\n    }\n    /**\n     * Reset timeout\n     */\n    resetTimeout() {\n        if (this.timeoutId) {\n            clearInterval(this.timeoutId);\n        }\n    }\n    /**\n     * Render the time to DOM\n     */\n    renderText() {\n        let outputText;\n        if (this.format === 'user') {\n            // User presentation\n            const items = {\n                'seconds': this.seconds,\n                'minutes': this.minutes,\n                'hours': this.hours,\n                'days': this.days\n            };\n            outputText = this.ngContentSchema;\n            for (const key of Object.keys(items)) {\n                outputText = outputText.replace('[' + key + ']', items[key].toString());\n            }\n        }\n        else if (this.format === 'intelli') {\n            // Intelli presentation\n            outputText = '';\n            if (this.days > 0) {\n                outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';\n            }\n            if ((this.hours > 0) || (this.days > 0)) {\n                outputText += this.hours.toString() + 'h ';\n            }\n            if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {\n                outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n            }\n            if ((this.hours === 0) && (this.days === 0)) {\n                outputText += this.seconds.toString().padStart(2, '0') + 's';\n            }\n        }\n        else if (this.format === 'hms') {\n            // Hms presentation\n            outputText = this.hours.toString().padStart(2, '0') + ':';\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else if (this.format === 'ms') {\n            // ms presentation\n            outputText = '';\n            if (this.hours > 0) {\n                outputText = this.hours.toString().padStart(2, '0') + ':';\n            }\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else {\n            // Default presentation\n            outputText = this.days.toString() + 'd ';\n            outputText += this.hours.toString() + 'h ';\n            outputText += this.minutes.toString() + 'm ';\n            outputText += this.seconds.toString() + 's';\n        }\n        this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n    }\n    clear() {\n        this.resetTimeout();\n        this.timeoutId = null;\n    }\n    /**\n     * Compute each unit (seconds, minutes, hours, days) for further manipulation\n     * @protected\n     */\n    computeTimeUnits() {\n        if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor((this.tickCounter / 3600) % 24);\n            this.days = Math.floor((this.tickCounter / 3600) / 24);\n        }\n        else if (this.maxTimeUnit === 'second') {\n            this.seconds = this.tickCounter;\n            this.minutes = 0;\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'minute') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor(this.tickCounter / 60);\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'hour') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor(this.tickCounter / 3600);\n            this.days = 0;\n        }\n        this.renderText();\n    }\n    /**\n     * Start tick count, base of this component\n     * @protected\n     */\n    startTickCount() {\n        const that = this;\n        that.timeoutId = setInterval(function () {\n            let counter;\n            if (that.countdown) {\n                // Compute finish counter for countdown\n                counter = that.tickCounter;\n                if (that.startTime > that.endTime) {\n                    counter = that.tickCounter - that.endTime - 1;\n                }\n            }\n            else {\n                // Compute finish counter for timer\n                counter = that.tickCounter - that.startTime;\n                if (that.endTime > that.startTime) {\n                    counter = that.endTime - that.tickCounter - 1;\n                }\n            }\n            that.computeTimeUnits();\n            const timer = {\n                seconds: that.seconds,\n                minutes: that.minutes,\n                hours: that.hours,\n                days: that.days,\n                timer: that.timeoutId,\n                tick_count: that.tickCounter\n            };\n            that.onTick.emit(timer);\n            if (counter < 0) {\n                that.stop();\n                that.onComplete.emit(that);\n                return;\n            }\n            if (that.countdown) {\n                that.tickCounter--;\n            }\n            else {\n                that.tickCounter++;\n            }\n        }, 1000); // Each seconds\n    }\n}\nCdTimerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nCdTimerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.3\", type: CdTimerComponent, selector: \"cd-timer\", inputs: { startTime: \"startTime\", endTime: \"endTime\", countdown: \"countdown\", autoStart: \"autoStart\", maxTimeUnit: \"maxTimeUnit\", format: \"format\" }, outputs: { onStart: \"onStart\", onStop: \"onStop\", onTick: \"onTick\", onComplete: \"onComplete\" }, ngImport: i0, template: ' <ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cd-timer',\n                    template: ' <ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { startTime: [{\n                type: Input\n            }], endTime: [{\n                type: Input\n            }], countdown: [{\n                type: Input\n            }], autoStart: [{\n                type: Input\n            }], maxTimeUnit: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], onStart: [{\n                type: Output\n            }], onStop: [{\n                type: Output\n            }], onTick: [{\n                type: Output\n            }], onComplete: [{\n                type: Output\n            }] } });\n\nclass CdTimerModule {\n}\nCdTimerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdTimerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, declarations: [CdTimerComponent], exports: [CdTimerComponent] });\nCdTimerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdTimerComponent],\n                    imports: [],\n                    exports: [CdTimerComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule };\n//# sourceMappingURL=angular-cd-timer.mjs.map\n"]},"metadata":{},"sourceType":"module"}