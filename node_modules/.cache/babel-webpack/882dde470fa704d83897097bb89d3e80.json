{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALUE_ACCESSOR, NG_VALIDATORS, AbstractControl, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, forwardRef, LOCALE_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, CommonModule, DecimalPipe } from '@angular/common';\n\nclass TypedForm {}\n\nconst ValidationAlphabetLocale = {\n  'danish': 'danish',\n  'french': 'french',\n  'german': 'german',\n  'greek': 'greek',\n  'spanish': 'spanish',\n  'russian': 'russian'\n};\nconst CONTROLS_ERROR = \"controlsError\";\nconst VALUE_CHANGED_SYNC = \"valueChangedSync\";\nconst FUNCTION_STRING = \"function\";\nconst OBJECT_STRING = \"object\";\nconst RX_WEB_VALIDATOR = \"rxwebValidator\";\nconst NUMBER = \"number\";\nconst BOOLEAN$1 = \"boolean\";\nconst CUSTOM = \"custom\";\nconst TEMPLATE_VALIDATION_CONFIG = \"template-validation-config\";\nconst CONDITIONAL_VALIDATOR = \"conditionalValidator\";\nconst VALIDATOR_CONFIG$2 = \"validatorConfig\";\nconst THIS = \"this\";\nconst RXCODE = \"-rxw-\";\nconst MODEL = \"model\";\nconst MODEL_INSTANCE = \"modelInstance\";\nconst PATCH = \"patch\";\n\nclass Linq {\n  static functionCreator(expression) {\n    var functionSetter = [];\n    var match = expression.match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=>(.*)/);\n    var splitSelect = match[2].split(\",\");\n\n    for (var i = 0; i < splitSelect.length; i++) {\n      var equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);\n\n      if (equalToOperator !== null) {\n        functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\n      } else {\n        equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=(.*)/);\n\n        if (equalToOperator === null) {\n          functionSetter = new Function(match[1], \"return \" + splitSelect.input);\n        } else {\n          functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\n        }\n      }\n    }\n\n    if (splitSelect.length == 0) functionSetter = {\n      accessFunction: new Function(match[1], \"return \" + match[2])\n    };\n    return functionSetter;\n  }\n\n  static execute(jObject, config, parentObject, modelInstance, isDynamicConfig) {\n    let expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;\n    let lastParam = isDynamicConfig ? config : modelInstance;\n    if (parentObject && typeof expressionFunction == \"string\") expressionFunction = Linq.functionCreator(expressionFunction);\n    if (parentObject && expressionFunction) return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);\n    return true;\n  }\n\n  static getConditionPath(texts) {\n    let path = \"\";\n\n    for (var i = 1; i < texts.length; i++) path += texts.length - 1 == i ? texts[i].trim() : `${texts[i].trim()}.`;\n\n    return path;\n  }\n\n  static expressionParser(expression, isNonValidationExpression) {\n    let splitExpressions = [];\n    let columns = [];\n    let expressionString = expression.toString();\n    let expressionArguments = Linq.extractArguments(expressionString);\n\n    if (expressionArguments.length > 0) {\n      let splitTexts = [];\n      expressionString.replace(/\\s/g, '').replace(new RegExp(/{|}/, \"g\"), \"\").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(t => {\n        let texts = t.replace(/\\(|\\)/g, \"\").split(\"||\");\n\n        for (let text of texts) splitTexts.push(text);\n      });\n      splitTexts.forEach(t => {\n        expressionArguments.forEach((x, i) => {\n          t = t.trim();\n\n          if (t.startsWith(x + '.')) {\n            var splitText = t.split('.');\n            if (splitText.length == 2 || splitText.length >= 2 && isNonValidationExpression) {\n              if (!isNonValidationExpression) columns.push({\n                propName: splitText[1].trim(),\n                argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i\n              });else columns.push({\n                propName: this.getConditionPath(splitText),\n                argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i\n              });\n            } else {\n              var arrayProp = splitText[1].split('[');\n              let jObject = {\n                propName: splitText[splitText.length - 1].trim(),\n                objectPropName: arrayProp[0],\n                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\n                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i\n              };\n              columns.push(jObject);\n            }\n          }\n        });\n      });\n    }\n\n    return columns;\n  }\n\n  static extractArguments(splitText) {\n    let expressionArguments = [THIS];\n\n    if (splitText[0].trim() !== \"(\" && !splitText.trim().startsWith(\"function\")) {\n      let text = splitText[0].split(\"=>\")[0];\n      expressionArguments.push(text.trim().replace(\"(\", \"\").replace(\")\", \"\"));\n    } else {\n      let splitTexts = splitText.match(/\\(([^)]+)\\)/g);\n      if (splitTexts && splitTexts[0]) splitTexts[0].split(\",\").forEach(t => expressionArguments.push(t.trim().replace(\"(\", \"\").replace(\")\", \"\")));\n    }\n\n    return expressionArguments;\n  }\n\n  static expressionColumns(expression, isNonValidationExpression = false) {\n    var columns = [];\n    let splitExpressions = [];\n\n    if (typeof expression == \"string\") {\n      expression.split(\"=>\")[1].split(\" && \").forEach(t => {\n        t.split(\" || \").forEach(x => {\n          splitExpressions.push(x.trim().split(' ')[0]);\n        });\n      });\n      splitExpressions.forEach(t => {\n        var splitText = t.split('.');\n        if (splitText.length == 2) columns.push({\n          propName: splitText[1].trim()\n        });else {\n          var arrayProp = splitText[1].split('[');\n          let jObject = {\n            propName: splitText[splitText.length - 1].trim(),\n            objectPropName: arrayProp[0],\n            arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined\n          };\n          columns.push(jObject);\n        }\n      });\n    } else {\n      columns = Linq.expressionParser(expression, isNonValidationExpression);\n    }\n\n    return columns;\n  }\n\n  static dynamicConfigParser(expression, propName) {\n    let controlNames = [];\n    let expressionString = expression.toString();\n    let expressionArguments = Linq.extractArguments(expressionString);\n    let splitString = expressionString.replace(new RegExp(/\\r?\\n|\\r|;/g), ' ').replace(/[\"%()\\{}=\\\\?ï¿½`'#<>|,;:+-]+/g, \" \").split(/ /g);\n    if (expressionArguments.length > 3) expressionArguments.splice(expressionArguments.length - 1, 1);\n    expressionArguments.forEach(t => {\n      splitString.filter(x => x != `${t}.${propName}` && x.startsWith(`${t}.`)).forEach(x => {\n        let split = x.split('.');\n        if (split.length == 2) controlNames.push({\n          propName: x.replace(`${t}.`, '')\n        });else {\n          var arrayProp = split[1].split('[');\n          let jObject = {\n            propName: split[split.length - 1].trim(),\n            objectPropName: arrayProp[0],\n            arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined\n          };\n          controlNames.push(jObject);\n        }\n      });\n    });\n    return controlNames;\n  }\n\n}\n\nconst AnnotationTypes = {\n  numeric: 'numeric',\n  required: 'required',\n  minLength: 'minLength',\n  maxLength: 'maxLength',\n  minNumber: 'minNumber',\n  maxNumber: 'maxNumber',\n  pattern: 'pattern',\n  password: 'password',\n  compare: 'compare',\n  minDate: 'minDate',\n  maxDate: 'maxDate',\n  alpha: 'alpha',\n  alphaNumeric: 'alphaNumeric',\n  email: 'email',\n  hexColor: 'hexColor',\n  lowerCase: 'lowerCase',\n  url: 'url',\n  upperCase: 'upperCase',\n  nested: 'nested',\n  propArray: 'propArray',\n  propObject: 'propObject',\n  contains: 'contains',\n  range: 'range',\n  custom: 'custom',\n  digit: \"digit\",\n  creditCard: \"creditCard\",\n  time: \"time\",\n  json: \"json\",\n  greaterThan: \"greaterThan\",\n  greaterThanEqualTo: \"greaterThanEqualTo\",\n  lessThan: \"lessThan\",\n  lessThanEqualTo: \"lessThanEqualTo\",\n  choice: \"choice\",\n  different: \"different\",\n  even: \"even\",\n  odd: \"odd\",\n  factor: \"factor\",\n  leapYear: \"leapYear\",\n  allOf: \"allOf\",\n  oneOf: \"oneOf\",\n  noneOf: \"noneOf\",\n  mac: \"mac\",\n  ascii: \"ascii\",\n  dataUri: \"dataUri\",\n  port: \"port\",\n  latLong: \"latLong\",\n  extension: \"extension\",\n  fileSize: \"fileSize\",\n  endsWith: \"endsWith\",\n  startsWith: \"startsWith\",\n  primeNumber: \"primeNumber\",\n  latitude: \"latitude\",\n  longitude: \"longitude\",\n  compose: \"compose\",\n  rule: \"rule\",\n  file: \"file\",\n  image: \"image\",\n  unique: \"unique\",\n  notEmpty: \"notEmpty\",\n  ip: \"ip\",\n  cusip: \"cusip\",\n  grid: \"grid\",\n  date: 'date',\n  and: 'and',\n  or: 'or',\n  not: 'not',\n  minTime: 'minTime',\n  maxTime: 'maxTime',\n  requiredTrue: 'requiredTrue',\n  mask: 'mask',\n  iban: 'iban',\n  updateOn: 'updateOn'\n};\nconst INVALID = \"INVALID\";\nconst PROPERTY = \"property\";\nconst OBJECT_PROPERTY = \"objectProperty\";\nconst ARRAY_PROPERTY = \"arrayProperty\";\nconst STRING = \"string\";\nconst MESSAGE = \"message\";\nconst BLANK = \"\";\nconst KEYPRESS = \"onkeypress\";\nconst ONCHANGE = \"onchange\";\nconst ONCLICK = \"onclick\";\nconst ONKEYUP = \"onkeyup\";\nconst ONBLUR = \"onblur\";\nconst ONFOCUS = \"onfocus\";\nconst ELEMENT_VALUE = \"value\";\nconst BLUR = \"blur\";\nconst FOCUS = \"focus\";\nconst CHANGE = \"change\";\nconst KEY_DOWN = \"keydown\";\nconst KEY_PRESS = \"keypress\";\nconst PASTE = \"paste\";\nconst INPUT = \"INPUT\";\nconst SELECT = \"SELECT\";\nconst CHECKBOX = \"checkbox\";\nconst RADIO = \"radio\";\nconst FILE = \"file\";\nconst TEXTAREA = \"textarea\";\nconst DECORATORS = {\n  disabled: 'disabled',\n  error: 'error',\n  trim: 'trim',\n  ltrim: 'ltrim',\n  rtrim: 'rtrim',\n  blacklist: 'blacklist',\n  stripLow: 'stripLow',\n  toBoolean: 'toBoolean',\n  toDate: 'toDate',\n  toDouble: 'toDouble',\n  toFloat: 'toFloat',\n  toInt: 'toInt',\n  string: 'toString',\n  whitelist: 'whitelist',\n  escape: 'escape',\n  prefix: 'prefix',\n  suffix: 'suffix',\n  sanitize: 'sanitize',\n  elementClass: 'elementClass',\n  updateOn: 'updateOn'\n};\nconst defaultContainer = new class {\n  constructor() {\n    this.instances = [];\n    this.modelIncrementCount = 0;\n  }\n\n  get(instanceFunc) {\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n    return instance;\n  }\n\n  getInstance(target, parameterIndex, propertyKey, decoratorType) {\n    let isPropertyKey = propertyKey != undefined;\n    let instanceFunc = !isPropertyKey ? target : target.constructor;\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n    if (!instance) instance = this.addInstanceContainer(instanceFunc);\n    return instance;\n  }\n\n  addPropsConfig(target, configs) {\n    let instanceContainer = this.instances.filter(instance => instance.instance == target)[0];\n\n    if (instanceContainer) {\n      for (let config of configs) {\n        for (let prop of config.propNames) {\n          let propertyInfo = instanceContainer.properties.filter(t => t.name == prop && t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY)[0];\n\n          if (propertyInfo) {\n            this.addPropConfig(target, [propertyInfo], config);\n          } else if (prop === \":all:\") this.addPropConfig(target, instanceContainer.properties.filter(t => t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY), config);\n        }\n      }\n    } else if (configs === undefined) this.addInstanceContainer(target);\n  }\n\n  addPropConfig(target, properties, config) {\n    for (var propertyInfo of properties) {\n      let excludeProp = false;\n      if (config.excludePropNames) excludeProp = config.excludePropNames.filter(t => t == propertyInfo.name)[0] !== undefined;\n\n      if (!excludeProp) {\n        if (config.validationConfig) for (let typeName in config.validationConfig) {\n          this.init({\n            constructor: target\n          }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);\n        }\n        if (config.error) this.addDecoratorConfig({\n          constructor: target\n        }, 0, propertyInfo.name, config.error, DECORATORS.error);\n        if (config.disable) this.addDecoratorConfig({\n          constructor: target\n        }, 0, propertyInfo.name, config.disable, DECORATORS.disabled);\n        if (config.elementClass) this.addDecoratorConfig({\n          constructor: target\n        }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);\n        if (config.ignore) propertyInfo.ignore = config.ignore;\n      }\n    }\n  }\n\n  addSanitizer(target, parameterIndex, propertyKey, decoratorType, value) {\n    let instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);\n\n    if (instance) {\n      if (!instance.sanitizers[propertyKey]) instance.sanitizers[propertyKey] = [];\n      instance.sanitizers[propertyKey].push({\n        name: decoratorType,\n        config: value\n      });\n    }\n  }\n\n  addDecoratorConfig(target, parameterIndex, propertyKey, config, decoratorType) {\n    let isPropertyKey = propertyKey != undefined;\n    let instanceFunc = !isPropertyKey ? target : target.constructor;\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n    if (!instance) instance = this.addInstanceContainer(instanceFunc);\n    instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;\n    let columns = Linq.expressionColumns(config.conditionalExpression, true);\n    columns.forEach(column => {\n      if (column.argumentIndex !== -1) {\n        let columnName = !column.objectPropName ? `${column.propName}${RXCODE}${column.argumentIndex}` : `${column.objectPropName}.${column.propName}${RXCODE}${column.argumentIndex}`;\n        if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName]) instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];\n        let disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];\n        if (disabledColumns.indexOf(columnName) === -1) disabledColumns.push(propertyKey);\n      } else {\n        if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey]) instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};\n        instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(\";\", \"\")] = true;\n      }\n    });\n  }\n\n  init(target, parameterIndex, propertyKey, annotationType, config, isAsync) {\n    var decoratorConfiguration = {\n      propertyIndex: parameterIndex,\n      propertyName: propertyKey,\n      annotationType: annotationType,\n      config: config,\n      isAsync: isAsync,\n      isValidator: annotationType !== \"updateOn\"\n    };\n    let isPropertyKey = propertyKey != undefined;\n    this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);\n  }\n\n  initPropertyObject(name, propertyType, entity, target, config) {\n    var propertyInfo = {\n      name: name,\n      propertyType: propertyType,\n      entity: entity,\n      dataPropertyName: config ? config.name : undefined,\n      entityProvider: config ? config.entityProvider : undefined,\n      defaultValue: config ? config.defaultValue : undefined,\n      objectConfig: config && config.autoCreate ? {\n        autoCreate: config.autoCreate\n      } : undefined\n    };\n    defaultContainer.addProperty(target.constructor, propertyInfo);\n  }\n\n  addInstanceContainer(instanceFunc) {\n    let instanceContainer = {\n      instance: instanceFunc,\n      propertyAnnotations: [],\n      properties: [],\n      nonValidationDecorators: {\n        disabled: {\n          conditionalExpressions: {},\n          changeDetection: {},\n          controlProp: {}\n        },\n        error: {\n          conditionalExpressions: {},\n          changeDetection: {},\n          controlProp: {}\n        },\n        elementClass: {\n          conditionalExpressions: {},\n          changeDetection: {},\n          controlProp: {}\n        }\n      },\n      sanitizers: {}\n    };\n    this.instances.push(instanceContainer);\n    return instanceContainer;\n  }\n\n  addProperty(instanceFunc, propertyInfo, isFromAnnotation = false) {\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n\n    if (instance) {\n      this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);\n    } else {\n      instance = this.addInstanceContainer(instanceFunc);\n      this.addPropertyInfo(instance, propertyInfo);\n    }\n  }\n\n  addPropertyInfo(instance, propertyInfo, isAddProperty = false) {\n    var property = this.getProperty(instance, propertyInfo);\n    if (!property) instance.properties.push(propertyInfo);else if (isAddProperty) this.updateProperty(property, propertyInfo);\n    if (property && propertyInfo.messageNexus) property.messageNexus = propertyInfo.messageNexus;\n  }\n\n  addAnnotation(instanceFunc, decoratorConfiguration) {\n    this.addProperty(instanceFunc, {\n      propertyType: PROPERTY,\n      name: decoratorConfiguration.propertyName\n    }, true);\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n    if (instance) instance.propertyAnnotations.push(decoratorConfiguration);else {\n      instance = this.addInstanceContainer(instanceFunc);\n      instance.propertyAnnotations.push(decoratorConfiguration);\n    }\n\n    if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {\n      let columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);\n      this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\n    }\n\n    if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {\n      let columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);\n      this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\n    }\n\n    this.setConditionalColumns(instance, decoratorConfiguration);\n  }\n\n  setConditionalColumns(instance, decoratorConfiguration) {\n    if (instance && decoratorConfiguration.config) {\n      if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {\n        Object.keys(decoratorConfiguration.config.validation).forEach(t => {\n          if (typeof decoratorConfiguration.config.validation[t] !== \"boolean\") this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);\n        });\n      } else this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);\n    }\n  }\n\n  setLogicalConditional(instance, annotationType, fieldName, propertyName) {\n    if (instance && (annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime || annotationType == AnnotationTypes.creditCard && fieldName || (annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName)) {\n      this.setConditionalValueProp(instance, fieldName, propertyName);\n    }\n  }\n\n  setConditionalValueProp(instance, propName, refPropName) {\n    if (propName) {\n      let splitProps = propName.split ? propName.split('.') : '';\n\n      if (splitProps.length < 2) {\n        if (!instance.conditionalValidationProps) instance.conditionalValidationProps = {};\n        if (!instance.conditionalValidationProps[propName]) instance.conditionalValidationProps[propName] = [];\n        if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1) instance.conditionalValidationProps[propName].push(refPropName);\n      } else this.addChangeValidation(instance, refPropName, [{\n        argumentIndex: 1,\n        objectPropName: splitProps[0],\n        propName: splitProps[1],\n        referencePropName: refPropName\n      }]);\n    }\n  }\n\n  addChangeValidation(instance, propertyName, columns) {\n    if (instance) {\n      if (!instance.conditionalValidationProps) instance.conditionalValidationProps = {};\n      columns.forEach(t => {\n        if (t.propName && !t.objectPropName) {\n          if (!instance.conditionalValidationProps[t.propName]) instance.conditionalValidationProps[t.propName] = [];\n          if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1) instance.conditionalValidationProps[t.propName].push(propertyName);\n        } else {\n          if (t.propName && t.objectPropName) {\n            if (!instance.conditionalObjectProps) instance.conditionalObjectProps = [];\n            t.referencePropName = propertyName;\n            instance.conditionalObjectProps.push(t);\n          }\n        }\n      });\n    }\n  }\n\n  clearInstance(instanceFunc) {\n    let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\n\n    if (instance) {\n      let indexOf = this.instances.indexOf(instance);\n      this.instances.splice(indexOf, 1);\n    }\n  }\n\n  getProperty(instance, propertyInfo) {\n    return instance.properties.filter(t => t.name == propertyInfo.name)[0];\n  }\n\n  updateProperty(property, currentProperty) {\n    property.dataPropertyName = currentProperty.dataPropertyName;\n    property.defaultValue = currentProperty.defaultValue;\n  }\n\n}();\n\nfunction baseDecoratorFunction(annotationType, config, isAsync = false) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.init(target, parameterIndex, propertyKey, annotationType, config, isAsync);\n  };\n}\n\nconst RegExRule = {\n  alpha: /^[a-zA-Z]+$/,\n  alphaExits: /[a-zA-Z]/,\n  alphaWithSpace: /^[a-zA-Z\\s]+$/,\n  macId: /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/,\n  onlyDigit: /^[0-9]+$/,\n  isDigitExits: /[0-9]/,\n  lowerCase: /[a-z]/,\n  upperCase: /[A-Z]/,\n  specialCharacter: /[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi,\n  advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  basicEmail: /^(([^<>()\\[\\]\\\\.,,:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n  alphaNumeric: /^[0-9a-zA-Z]+$/,\n  alphaNumericWithSpace: /^[0-9a-zA-Z\\s]+$/,\n  hexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\n  strictHexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\n  float: /^(?:[-+]?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/,\n  decimal: /^[-+]?([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/,\n  hexaDecimal: /^[0-9A-F]+$/i,\n  date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/,\n  time: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,\n  timeWithSeconds: /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,\n  url: /^(https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/,\n  localhostUrl: /^(https?:\\/\\/localhost\\:([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|https?:\\/\\/localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))$/,\n  interanetUrl: /^(https?:\\/\\/[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9])$/,\n  ascii: /^[\\x00-\\x7F]+$/,\n  dataUri: /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*?)$/i,\n  lat: /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/,\n  long: /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/,\n  ipV4: /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/,\n  ipV6: /^((?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(:[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(:[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(:[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(:[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/,\n  cidrV4: /^(3[0-2]|[12]?[0-9])$/,\n  cidrV6: /^(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  cusip: /^[0-9A-Z]{9}$/,\n  grid: /^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g\n};\nconst ALPHABET = \"alphabet\";\nconst DIGIT = \"digit\";\nconst CONTAINS = \"contains\";\nconst LOWERCASE = \"lowerCase\";\nconst UPPERCASE = \"upperCase\";\nconst SPECIAL_CHARACTER = \"specialCharacter\";\nconst MIN_LENGTH = \"minLength\";\nconst MAX_LENGTH = \"maxLength\";\n\nclass RegexValidator {\n  static isExits(value, regex) {\n    return value.match(regex) != null;\n  }\n\n  static isValid(value, regex) {\n    return regex.test(value);\n  }\n\n  static isNotBlank(value, isRemoveSpace = false) {\n    return !isRemoveSpace ? value === 0 || value !== undefined && value !== null && value !== \"\" : value === 0 || value !== undefined && value !== null && String(value).trim() !== \"\";\n  }\n\n  static isValidPassword(passwordValidation, value) {\n    let isValid = false;\n    let jObject = {};\n    let keyName = \"status\";\n    let objectProperties = Object.getOwnPropertyNames(passwordValidation);\n\n    for (let propertyName of objectProperties) {\n      switch (propertyName) {\n        case ALPHABET:\n          isValid = RegexValidator.isExits(value, RegExRule.alphaExits);\n          keyName = ALPHABET;\n          break;\n\n        case DIGIT:\n          isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);\n          keyName = DIGIT;\n          break;\n\n        case CONTAINS:\n          isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;\n          keyName = CONTAINS;\n          break;\n\n        case LOWERCASE:\n          isValid = RegexValidator.isValid(value, RegExRule.lowerCase);\n          keyName = LOWERCASE;\n          break;\n\n        case UPPERCASE:\n          isValid = RegexValidator.isValid(value, RegExRule.upperCase);\n          keyName = UPPERCASE;\n          break;\n\n        case SPECIAL_CHARACTER:\n          isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);\n          keyName = SPECIAL_CHARACTER;\n          break;\n\n        case MIN_LENGTH:\n          isValid = value.length >= passwordValidation[propertyName];\n          keyName = MIN_LENGTH;\n          break;\n\n        case MAX_LENGTH:\n          isValid = value.length <= passwordValidation[propertyName];\n          keyName = MAX_LENGTH;\n          break;\n      }\n\n      if (!isValid) break;\n    }\n\n    return {\n      isValid: isValid,\n      keyName: keyName\n    };\n  }\n\n  static isZero(value) {\n    return value == 0;\n  }\n\n  static commaRegex() {\n    return new RegExp(\",\", \"g\");\n  }\n\n}\n\nclass ReactiveFormConfig {\n  static set(jObject) {\n    if (jObject) ReactiveFormConfig.json = jObject;\n  }\n\n  static get(path) {\n    let jObject;\n\n    if (ReactiveFormConfig.json) {\n      let splitPath = path.split('.');\n\n      for (let columnName of splitPath) {\n        jObject = !jObject ? ReactiveFormConfig.json[columnName] : jObject[columnName];\n        if (!jObject) break;\n      }\n    }\n\n    return jObject;\n  }\n\n}\n\nReactiveFormConfig.i18n = {};\nReactiveFormConfig.number = {};\nReactiveFormConfig.json = {};\nReactiveFormConfig.autoInstancePush = false;\n\nclass ObjectMaker {\n  static toJson(key, config, values) {\n    ObjectMaker.setMessage();\n    let message = config ? config.message : null;\n    let messageKey = undefined;\n    if (!message && config && config.messageKey) messageKey = config.messageKey;\n    let messageText = message ? message : ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key] ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';\n    values.forEach((t, index) => {\n      if (t instanceof Date) t = this.getDateString(t);\n      messageText = messageText.replace(`{{${index}}}`, t);\n    });\n    if (config && config.messageNexus) Object.keys(config.messageNexus).forEach(propName => {\n      messageText = messageText.replace(`{{${propName}}}`, config.messageNexus[propName]);\n    });\n    let jObject = {};\n    jObject[key] = {\n      message: messageText,\n      refValues: values\n    };\n    if (config && config.isAddMessageKey) jObject[\"messageKey\"] = messageKey;\n    return jObject;\n  }\n\n  static null() {\n    return null;\n  }\n\n  static getPasswordMessage() {\n    let messageKey = \"password\";\n    return ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey] ? ReactiveFormConfig.json.validationMessage[messageKey] : '';\n  }\n\n  static setMessage() {\n    if (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.validationMessage && ObjectMaker.language !== ReactiveFormConfig.i18n.language) {\n      if (!ReactiveFormConfig.json) ReactiveFormConfig.json = {};\n      ReactiveFormConfig.json.validationMessage = ReactiveFormConfig.i18n.validationMessage();\n      ObjectMaker.language = ReactiveFormConfig.i18n.language;\n    }\n  }\n\n  static getDateString(value) {\n    let seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\n    let dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\n\n    if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\n      seperator = ReactiveFormConfig.json.internationalization.seperator;\n      dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;\n    }\n\n    let result = '';\n    let year = value.getFullYear().toString();\n    let month = String(value.getMonth() + 1);\n    let day = String(value.getDay());\n\n    switch (dateFormat) {\n      case 'ymd':\n        result = \"\".concat(year, seperator, month, seperator, day);\n        break;\n\n      case 'dmy':\n        result = \"\".concat(day, seperator, month, seperator, year);\n        break;\n\n      case 'mdy':\n        result = \"\".concat(month, seperator, day, seperator, year);\n        break;\n    }\n\n    return result;\n  }\n\n}\n\nObjectMaker.language = \"\";\n\nfunction isObjectType(value) {\n  return !(typeof value == \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value instanceof Date);\n}\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nfunction clone(jsonObject) {\n  let jObject = {};\n\n  if (isObjectType(jsonObject)) {\n    for (var columnName in jsonObject) {\n      if (columnName != \"formGroup\") {\n        if (Array.isArray(jsonObject[columnName])) {\n          jObject[columnName] = [];\n\n          for (let row of jsonObject[columnName]) {\n            if (isObject(row)) jObject[columnName].push(clone(row));else jObject[columnName].push(row);\n          }\n        } else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp)) jObject[columnName] = clone(jsonObject[columnName]);else jObject[columnName] = jsonObject[columnName];\n      }\n    }\n\n    return jObject;\n  } else return jsonObject;\n}\n\nfunction merge(firstObject, secondObject) {\n  for (var columnName in secondObject) {\n    if (Array.isArray(secondObject[columnName])) {\n      if (!firstObject[columnName]) firstObject[columnName] = [];\n\n      for (let row of secondObject[columnName]) firstObject[columnName].push(clone(row));\n    } else if (typeof firstObject[columnName] == \"object\" && !(firstObject[columnName] instanceof RegExp)) firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);else firstObject[columnName] = secondObject[columnName];\n  }\n\n  return firstObject;\n}\n\nfunction isMatched(jsonObject, compareObject) {\n  let isModified = false;\n\n  for (var columnName in compareObject) {\n    if (Array.isArray(jsonObject[columnName])) {\n      for (var i = 0; i < jsonObject[columnName].length; i++) {\n        isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);\n      }\n    } else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp)) isModified = isMatched(jsonObject[columnName], compareObject[columnName]);else isModified = !(jsonObject[columnName] == compareObject[columnName]);\n\n    if (isModified) break;\n  }\n\n  return isModified;\n}\n\nconst PROP_ARRAY = \"propArray\";\n\nclass RxFormArray extends FormArray {\n  constructor(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.arrayObject = arrayObject;\n    this.arrayConfig = arrayConfig;\n    this._isModified = false;\n    this._modified = [];\n    this.cloneObject(arrayObject);\n  }\n\n  get isModified() {\n    return this._isModified;\n  }\n\n  push(control, options = {\n    isAddedInstance: false\n  }) {\n    let formGroup = this.root;\n    if (this.arrayObject) if (control.modelInstance) {\n      if (!options.isAddedInstance) this.arrayObject.push(control.modelInstance);else this.arrayObject[this.arrayObject.length] = control.modelInstance;\n    }\n    super.push(control);\n    if (formGroup[VALUE_CHANGED_SYNC]) formGroup.valueChangedSync();\n    this.patch();\n    this.checkValidation();\n  }\n\n  patch() {\n    this.checkModification();\n    if (this.parent) this.parent[PATCH]();\n  }\n\n  resetForm(options) {\n    if (options && options.index >= 0 && options.groupOption) {\n      this.controls[options.index].resetForm(options.groupOption);\n    } else {\n      for (var i = 0; i < this._baseValue.length; i++) {\n        if (this.controls[i] !== undefined) this.controls[i].resetForm({\n          value: this._baseValue[i]\n        });else if (options && options.pushFunction) {\n          let formGroup = options.pushFunction(this._baseValue[i]);\n          this.push(formGroup);\n        }\n      }\n    }\n  }\n\n  commit() {\n    this._baseValue = [];\n\n    for (let formGroup of this.controls) {\n      formGroup.commit();\n\n      this._baseValue.push(clone(formGroup.value));\n    }\n\n    this.patch();\n  }\n\n  removeAt(index, options = {\n    isRemovedInstance: false\n  }) {\n    let formGroup = this.root;\n    if (!options.isRemovedInstance) this.arrayObject.splice(index, 1);else {\n      for (var i = index; i < this.arrayObject.length - 1; i++) this.arrayObject[i] = this.arrayObject[i + 1];\n\n      this.arrayObject.pop();\n    }\n    super.removeAt(index, options);\n    if (formGroup[VALUE_CHANGED_SYNC]) formGroup.valueChangedSync();\n    this.patch();\n    this.checkValidation();\n  }\n\n  checkValidation() {\n    setTimeout(() => {\n      if (this.arrayConfig != undefined && this.arrayConfig.allowMaxIndex && this.length > this.arrayConfig.allowMaxIndex) this.setErrors(ObjectMaker.toJson(PROP_ARRAY, this.arrayConfig, [this.length, this.arrayConfig.allowMaxIndex]));else if (this.errors && this.errors[PROP_ARRAY]) delete this.errors[PROP_ARRAY];\n    });\n  }\n\n  checkModification() {\n    this._isModified = !(this._baseValue.length == this.controls.length);\n    if (!this._isModified) for (var i = 0; i < this.controls.length; i++) {\n      this._isModified = isMatched(this._baseValue[i], this.controls[i].value);\n      if (this._isModified) break;\n    }\n  }\n\n  cloneObject(value) {\n    this._baseValue = [];\n\n    for (let row of value) {\n      this._baseValue.push(clone(row));\n    }\n  }\n\n}\n\nvar NumericValueType;\n\n(function (NumericValueType) {\n  NumericValueType[NumericValueType[\"PositiveNumber\"] = 1] = \"PositiveNumber\";\n  NumericValueType[NumericValueType[\"NegativeNumber\"] = 2] = \"NegativeNumber\";\n  NumericValueType[NumericValueType[\"Both\"] = 3] = \"Both\";\n})(NumericValueType || (NumericValueType = {}));\n\nvar IpVersion;\n\n(function (IpVersion) {\n  IpVersion[IpVersion[\"V4\"] = 1] = \"V4\";\n  IpVersion[IpVersion[\"V6\"] = 2] = \"V6\";\n  IpVersion[IpVersion[\"AnyOne\"] = 3] = \"AnyOne\";\n})(IpVersion || (IpVersion = {}));\n\nvar ErrorMessageBindingStrategy;\n\n(function (ErrorMessageBindingStrategy) {\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"None\"] = 0] = \"None\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnSubmit\"] = 1] = \"OnSubmit\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirty\"] = 2] = \"OnDirty\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouched\"] = 3] = \"OnTouched\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrTouched\"] = 4] = \"OnDirtyOrTouched\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrSubmit\"] = 5] = \"OnDirtyOrSubmit\";\n  ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouchedOrSubmit\"] = 6] = \"OnTouchedOrSubmit\";\n})(ErrorMessageBindingStrategy || (ErrorMessageBindingStrategy = {}));\n\nvar ResetFormType;\n\n(function (ResetFormType) {\n  ResetFormType[ResetFormType[\"ControlsOnly\"] = 1] = \"ControlsOnly\";\n  ResetFormType[ResetFormType[\"FormGroupsOnly\"] = 2] = \"FormGroupsOnly\";\n  ResetFormType[ResetFormType[\"FormArraysOnly\"] = 3] = \"FormArraysOnly\";\n  ResetFormType[ResetFormType[\"ControlsAndFormGroupsOnly\"] = 4] = \"ControlsAndFormGroupsOnly\";\n  ResetFormType[ResetFormType[\"DefinedPropsOnly\"] = 5] = \"DefinedPropsOnly\";\n  ResetFormType[ResetFormType[\"All\"] = 6] = \"All\";\n})(ResetFormType || (ResetFormType = {}));\n\nconst MODEL_INSTANCE_VALUE = \"modelInstanceValue\";\n\nclass ApplicationUtil {\n  static getParentObjectValue(control) {\n    if (control.parent) {\n      let parent = this.parentObjectValue(control.parent);\n      return parent.value;\n    }\n\n    return {};\n  }\n\n  static getParentModelInstanceValue(control) {\n    if (control.parent) {\n      let parent = this.parentObjectValue(control.parent);\n      return parent[MODEL_INSTANCE_VALUE];\n    }\n\n    return {};\n  }\n\n  static getRootFormGroup(control) {\n    if (control.parent) {\n      return this.getRootFormGroup(control.parent);\n    }\n\n    return control;\n  }\n\n  static getParentControl(control) {\n    if (control.parent) {\n      let parent = this.parentObjectValue(control.parent);\n      return parent;\n    }\n\n    return control;\n  }\n\n  static getFormControlName(control) {\n    let controlName = '';\n\n    if (control.parent) {\n      for (var formControlName in control.parent.controls) {\n        if (control.parent.controls[formControlName] == control) {\n          controlName = formControlName;\n          break;\n        }\n      }\n    }\n\n    return controlName;\n  }\n\n  static getParentFormArray(control) {\n    if (control.parent && !(control.parent instanceof FormArray || control.parent instanceof RxFormArray)) {\n      let parent = this.getParentFormArray(control.parent);\n      return parent;\n    }\n\n    return control.parent;\n  }\n\n  static toLower(value) {\n    if (value) return String(value).toLowerCase().trim();\n    return value;\n  }\n\n  static getControl(fieldName, formGroup) {\n    let splitText = fieldName.split('.');\n\n    if (splitText.length > 1) {\n      var formControl = formGroup;\n      splitText.forEach((name, index) => {\n        formControl = formControl.controls[name];\n      });\n      return formControl;\n    } else return formGroup.controls[fieldName];\n  }\n\n  static getFormControl(fieldName, control) {\n    let splitText = fieldName.split('.');\n\n    if (splitText.length > 1 && control.parent) {\n      var formControl = this.getParentControl(control);\n      splitText.forEach((name, index) => {\n        formControl = formControl.controls[name];\n      });\n      return formControl;\n    }\n\n    return control.parent ? control.parent.get([fieldName]) : undefined;\n  }\n\n  static parentObjectValue(control) {\n    if (!control.parent) return control;else control = this.parentObjectValue(control.parent);\n    return control;\n  }\n\n  static isNumeric(value) {\n    return value - parseFloat(value) + 1 >= 0;\n  }\n\n  static notEqualTo(primaryValue, secondaryValue) {\n    let firstValue = primaryValue === undefined || primaryValue === null ? \"\" : primaryValue;\n    let secondValue = secondaryValue === undefined || secondaryValue === null ? \"\" : secondaryValue;\n    if (firstValue instanceof Date && secondValue instanceof Date) return +firstValue != +secondValue;\n    return firstValue != secondValue;\n  }\n\n  static numericValidation(allowDecimal, acceptValue) {\n    let decimalSymbol;\n\n    if (ReactiveFormConfig && ReactiveFormConfig.number) {\n      decimalSymbol = ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\n    } else {\n      decimalSymbol = \".\";\n    }\n\n    acceptValue = acceptValue == undefined ? NumericValueType.PositiveNumber : acceptValue;\n    let regex = /^[0-9]+$/;\n\n    switch (acceptValue) {\n      case NumericValueType.PositiveNumber:\n        regex = !allowDecimal ? /^[0-9]+$/ : decimalSymbol == \".\" || decimalSymbol == undefined ? /^[0-9\\.]+$/ : /^[0-9\\,]+$/;\n        break;\n\n      case NumericValueType.NegativeNumber:\n        regex = !allowDecimal ? /^[-][0-9]+$/ : decimalSymbol == \".\" || decimalSymbol == undefined ? /^[-][0-9\\.]+$/ : /^[-][0-9\\,]+$/;\n        break;\n\n      case NumericValueType.Both:\n        regex = !allowDecimal ? /^[-|+]?[0-9]+$/ : decimalSymbol == \".\" || decimalSymbol == undefined ? /^[-|+]?[0-9\\.]+$/ : /^[-|+]?[0-9\\,]+$/;\n        break;\n    }\n\n    return regex;\n  }\n\n  static configureControl(control, config, type) {\n    if (!control.validatorConfig) {\n      let jObject = {};\n      jObject[type] = config;\n      Object.assign(control, {\n        validatorConfig: jObject\n      });\n    } else control.validatorConfig[type] = config;\n  }\n\n  static lowerCaseWithTrim(value) {\n    return typeof value === \"string\" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();\n  }\n  /** Check if a value is an object */\n\n\n  static isObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n  }\n  /** Check if a value is an object */\n\n\n  static isArray(value) {\n    return Array.isArray(value);\n  }\n\n  static cloneValue(value) {\n    return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? [...value] : Object.assign({}, value) : value;\n  }\n\n}\n\nfunction instanceProvider(instanceFunc, entityObject) {\n  let instance = defaultContainer.get(instanceFunc);\n  let prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;\n\n  if (prototype.__proto__) {\n    let isLoop = false;\n\n    do {\n      isLoop = prototype.__proto__.constructor != Object;\n\n      if (isLoop) {\n        let extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);\n        instance = merge(clone(instance), clone(extendClassInstance));\n        prototype = prototype.__proto__;\n      }\n    } while (isLoop);\n  }\n\n  return instance;\n}\n\nfunction getInstance(model, objectArguments) {\n  let classInstance = Object.create(model.prototype);\n\n  try {\n    model.apply(classInstance, objectArguments);\n  } catch (ex) {\n    ///resolution of issue https://github.com/rxweb/rxweb/issues/188\n    classInstance = Reflect.construct(model, objectArguments);\n  }\n\n  return classInstance;\n}\n\nclass DisableProvider {\n  constructor(decoratorType, entityObject) {\n    this.decoratorType = decoratorType;\n    this.entityObject = entityObject;\n  }\n\n  getFormGroupName(currentFormGroup) {\n    let keyName = '';\n    if (currentFormGroup.parent) for (var controlName of Object.keys(currentFormGroup.parent.controls)) if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {\n      keyName = controlName;\n      break;\n    }\n    return keyName;\n  }\n\n  zeroArgumentProcess(control, columnName) {\n    let disabledColumns = [];\n    this.getDisabledColumns(control.parent, `${columnName}${RXCODE}0`, false).forEach(t => disabledColumns.push(t));\n    let path = this.topControlPath(control, columnName);\n    let splitPath = path.split(\".\");\n\n    if (splitPath.length > 1) {\n      let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\n      this.getDisabledColumns(rootFormGroup, `${path}${RXCODE}0`, true).forEach(t => disabledColumns.push(t));\n      let controlPath = '';\n\n      for (var i = 0; i < splitPath.length - 2; i++) {\n        let controlName = splitPath[i];\n        controlPath = `${path.replace(`${controlName}.`, '')}${RXCODE}-0`;\n\n        if (rootFormGroup.controls[controlName]) {\n          this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(t => disabledColumns.push(t));\n          rootFormGroup = rootFormGroup.controls[controlName];\n        }\n      }\n    }\n\n    return disabledColumns;\n  }\n\n  getDisabledColumns(formGroup, columnName, isRoot, pathName = \"\") {\n    if (formGroup[MODEL_INSTANCE]) {\n      let instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);\n      return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);\n    }\n\n    return [];\n  }\n\n  getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName = \"\") {\n    let conditionalDisableControls = [];\n    let columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];\n\n    if (columns) {\n      columns.forEach(t => {\n        conditionalDisableControls.push({\n          controlPath: pathName ? `${pathName}.${t}` : t,\n          conditionalExpression: instanceContainer.nonValidationDecorators[this.decoratorType].conditionalExpressions[t],\n          isRoot: isRoot\n        });\n      });\n    }\n\n    return conditionalDisableControls;\n  }\n\n  topControlPath(control, columnName) {\n    if (control.parent) {\n      let name = this.getFormGroupName(control.parent);\n\n      if (name) {\n        columnName = `${name}.${columnName}`;\n        return this.topControlPath(control.parent, columnName);\n      }\n    }\n\n    return columnName;\n  }\n\n  childControlDisabledExpression(formGroup, columnName, path = \"\") {\n    let disabledColumns = [];\n\n    if (formGroup[MODEL_INSTANCE]) {\n      let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\n\n      if (instanceContainer) {\n        this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(t => disabledColumns.push(t));\n        var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY);\n        props.forEach(t => {\n          if (formGroup.controls[t.name]) {\n            let columns = this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? `${path}.${t.name}` : `${t.name}`);\n            columns.forEach(x => disabledColumns.push(x));\n            this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? `${path}.${t.name}` : `${t.name}`).forEach(y => disabledColumns.push(y));\n          }\n        });\n      }\n    }\n\n    return disabledColumns;\n  }\n\n  oneArgumentProcess(control, columnName) {\n    let path = this.topControlPath(control, columnName);\n    let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\n    let childColumns = this.childControlDisabledExpression(rootFormGroup, path);\n    return childColumns;\n  }\n\n}\n\nconst ISO_DATE_REGEX = /^(?:[\\+-]?\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[\\.,]\\d+(?!:))?)?(?:\\2[0-5]\\d(?:[\\.,]\\d+)?)?(?:[zZ]|(?:[\\+-])(?:[01]\\d|2[0-3]):?(?:[0-5]\\d)?)?)?)?$/;\n\nclass DateProvider {\n  isDate(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n  }\n\n  getRegex(dateFormat) {\n    var regExp;\n\n    switch (dateFormat) {\n      case 'ymd':\n        regExp = \"^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$\";\n        break;\n\n      case 'dmy':\n        regExp = \"^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\n        break;\n\n      case 'mdy':\n        regExp = \"^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\n        break;\n    }\n\n    return new RegExp(regExp);\n  }\n\n  regex(config) {\n    var regExp;\n    if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) regExp = this.getRegex(config.dateFormat || ReactiveFormConfig.json.internationalization.dateFormat);else regExp = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? this.getRegex(config.dateFormat || ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex(config.dateFormat || \"mdy\");\n    return regExp;\n  }\n\n  getDate(value, configDateFormat = undefined, isBaseFormat = false) {\n    let year, month, day;\n\n    if (!this.isDate(value)) {\n      let seperator;\n      let dateFormat;\n\n      if (ISO_DATE_REGEX.test(value)) {\n        return new Date(value);\n      } else {\n        seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\n        dateFormat = configDateFormat || ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\n      }\n\n      if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\n        seperator = ReactiveFormConfig.json.internationalization.seperator;\n        dateFormat = configDateFormat || ReactiveFormConfig.json.internationalization.dateFormat;\n      }\n\n      switch (dateFormat) {\n        case 'ymd':\n          [year, month, day] = value.split(seperator).map(val => +val);\n          break;\n\n        case 'dmy':\n          [day, month, year] = value.split(seperator).map(val => +val);\n          break;\n\n        case 'mdy':\n          [month, day, year] = value.split(seperator).map(val => +val);\n          break;\n      }\n\n      return new Date(year, month - 1, day);\n    } else return value;\n  }\n\n  isValid(value, config) {\n    if (config && config.isValid) return config.isValid(value);\n\n    if (typeof value == \"string\") {\n      // Fixed issue : https://github.com/rxweb/rxweb/issues/280 & feature request : https://github.com/rxweb/rxweb/issues/295\n      if (config && config.allowISODate && ISO_DATE_REGEX.test(value)) return true;\n      let seperator = '/';\n      if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator) seperator = ReactiveFormConfig.json.baseConfig.seperator;\n      if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator) seperator = ReactiveFormConfig.json.internationalization.seperator;\n      if (value.split(seperator).length !== 3) return false;\n      value = value.replace(seperator, '-').replace(seperator, '-');\n      return this.regex(config).test(value);\n    } else return this.isDate(value);\n  }\n\n  getConfigDateValue(config) {\n    let date = config.value;\n\n    if (config.value && typeof config.value == \"string\") {\n      date = this.getDate(config.value, config.dateFormat, true);\n    }\n\n    return date;\n  }\n\n  getCompareDate(config, control) {\n    let date = this.getConfigDateValue(config);\n\n    if (config.fieldName) {\n      let checkControl = ApplicationUtil.getFormControl(config.fieldName, control);\n\n      if (checkControl && checkControl.value) {\n        date = this.getDate(checkControl.value, config.dateFormat);\n      }\n    }\n\n    return date;\n  }\n\n}\n\nfunction isNotBlank(value) {\n  return value !== undefined && value !== null && value !== \"\";\n}\n\nfunction trim$1(value) {\n  if (isNotBlank(value)) if (typeof value === \"string\") return value.trim();\n  return value;\n}\n\n;\n\nfunction ltrim$1(value) {\n  if (isNotBlank(value)) if (typeof value === \"string\") return value.replace(/^\\s+/g, '');\n  return value;\n}\n\nfunction rtrim$1(value) {\n  if (isNotBlank(value)) if (typeof value === \"string\") return value.replace(/\\s+$/g, '');\n  return value;\n}\n\nfunction blacklist$1(value, chars) {\n  if (isNotBlank(value)) if (typeof value === \"string\") return value.replace(new RegExp('[$' + chars + ']+', 'g'), '');\n  return value;\n}\n\n;\n\nfunction stripLow$1(value, keepNewLines) {\n  let chars = keepNewLines === true ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';\n  return blacklist$1(value, chars);\n}\n\nfunction toBoolean$1(value, strict) {\n  if (isNotBlank(value)) {\n    if (strict) {\n      return value === '1' || value === 'true';\n    }\n\n    return value !== '0' && value !== 'false' && value !== '';\n  }\n\n  return value;\n}\n\nfunction toFloat$1(value) {\n  if (isNotBlank(value)) {\n    var decimalSymbol = '.';\n\n    if (ReactiveFormConfig && ReactiveFormConfig.number) {\n      decimalSymbol = ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\n    }\n\n    if (decimalSymbol == ',' && typeof value == \"string\") value = value.replace(',', '.');\n    if (ApplicationUtil.isNumeric(value)) return parseFloat(value);\n  }\n\n  return null;\n}\n\nfunction toDouble$1(value) {\n  return toFloat$1(value);\n}\n\nfunction toInt$1(value, radix) {\n  if (isNotBlank(value)) if (ApplicationUtil.isNumeric(value)) return parseInt(value, radix || 10);\n  return null;\n}\n\nfunction toString$1(value, radix) {\n  if (isNotBlank(value)) return String(value);\n  return value;\n}\n\nfunction whitelist$1(value, chars) {\n  if (isNotBlank(value)) if (typeof value === \"string\") return value.replace(new RegExp(`[^${chars}]+`, 'g'), '');\n  return value;\n}\n\nfunction toDate$1(value, config) {\n  var dateProvider = new DateProvider();\n  if (isNotBlank(value)) if (typeof value === \"string\" && dateProvider.isValid(value, config)) {\n    value = dateProvider.getDate(value);\n    return value;\n  }\n  return null;\n}\n\nfunction escape$1(value) {\n  if (isNotBlank(value)) return value.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;').replace(/\\\\/g, '&#x5C;').replace(/`/g, '&#96;');\n  return value;\n}\n\nfunction prefix$1(value, text) {\n  if (isNotBlank(value)) return `${text}${value}`;\n  return value;\n}\n\nfunction suffix$1(value, text) {\n  if (isNotBlank(value)) return `${value}${text}`;\n  return value;\n}\n\nfunction sanitize$1(value, config) {\n  return config.custom(value);\n}\n\nconst SANITIZERS = {\n  trim: trim$1,\n  ltrim: ltrim$1,\n  rtrim: rtrim$1,\n  blacklist: blacklist$1,\n  stripLow: stripLow$1,\n  toBoolean: toBoolean$1,\n  toDouble: toDouble$1,\n  toFloat: toFloat$1,\n  toInt: toInt$1,\n  'toString': toString$1,\n  whitelist: whitelist$1,\n  toDate: toDate$1,\n  escape: escape$1,\n  prefix: prefix$1,\n  suffix: suffix$1,\n  sanitize: sanitize$1\n};\nconst DIRTY = \"dirty\";\nconst TOUCHED = \"touched\";\nconst UNTOUCHED = \"untouched\";\nconst PRISTINE = \"pristine\";\nconst PENDING = \"pending\";\n\nclass RxFormControl extends FormControl {\n  constructor(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {\n    super(formState, validator, asyncValidator);\n    this.entityObject = entityObject;\n    this.baseObject = baseObject;\n    this._sanitizers = _sanitizers;\n    this._errorMessages = [];\n    this._childColumns = [];\n    this._refDisableControls = [];\n    this._refMessageControls = [];\n    this._refClassNameControls = [];\n    this._isPassedExpression = false;\n    this._dirty = false;\n    this.backEndErrors = {};\n    this.defineErrorsProperty();\n    this._baseValue = formState === undefined ? null : this.getFormState(formState);\n    this._isModified = false;\n    this.keyName = controlName;\n    this._validators = validator.validators;\n    this._asyncValidators = validator.asyncValidators;\n    this._errorMessageBindingStrategy = ReactiveFormConfig.get(\"reactiveForm.errorMessageBindingStrategy\");\n\n    if (this._sanitizers) {\n      var floatSanitizer = this._sanitizers.filter(t => t.name == \"toFloat\")[0];\n\n      if (floatSanitizer && this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == \",\") {\n        let baseValue = String(this._baseValue);\n\n        if (baseValue.indexOf('.') != -1) {\n          this._baseValue = baseValue.replace(\".\", ReactiveFormConfig.number.decimalSymbol);\n          super.setValue(this._baseValue);\n        }\n      }\n    }\n  }\n\n  get errorMessages() {\n    if (!this._messageExpression) {\n      if (this._errorMessages.length == 0 && this.errors) this.setControlErrorMessages();\n    } else if (this._messageExpression && !this._isPassedExpression) return [];\n\n    if (!this.errors && this._errorMessages.length > 0) this.setControlErrorMessages();\n    if (this._language != this.getLanguage()) this.setControlErrorMessages();\n    return this._errorMessages;\n  }\n\n  get errorMessage() {\n    if (!this._messageExpression) {\n      if (this._errorMessage == undefined && this.errors) this.setControlErrorMessages();\n    } else if (this._messageExpression && !this._isPassedExpression) return undefined;\n\n    if (!this.errors && this._errorMessage) this.setControlErrorMessages();\n    if (this._language != this.getLanguage()) this.setControlErrorMessages();\n    return this._errorMessage;\n  }\n\n  defineErrorsProperty() {\n    Object.defineProperty(this, \"errors\", {\n      configurable: true,\n\n      get() {\n        if (this._language && this._language != this.getLanguage() && this.validator) {\n          this[\"errors\"] = this.validator(this);\n        }\n\n        return this._errors;\n      },\n\n      set(value) {\n        this._errors = value;\n      }\n\n    });\n  }\n\n  getFormState(value) {\n    let baseValue = value;\n\n    if (Array.isArray(value)) {\n      baseValue = [];\n      value.forEach(t => baseValue.push(t));\n    }\n\n    return baseValue;\n  }\n\n  get isModified() {\n    return this._isModified;\n  }\n\n  getValidators() {\n    return this.getValidatorSource(this._validators);\n  }\n\n  getAsyncValidators() {\n    return this.getValidatorSource(this._asyncValidators);\n  }\n\n  getValidatorSource(validators) {\n    if (validators) return Array.isArray(validators) ? [...validators] : [validators];\n    return [];\n  }\n\n  setValidators(newValidator) {\n    this._validators = newValidator;\n    super.setValidators(newValidator);\n  }\n\n  setAsyncValidators(newValidator) {\n    this._asyncValidators = newValidator;\n    super.setAsyncValidators(newValidator);\n  }\n\n  setValue(value, options) {\n    this.parent.changing = true;\n    let parsedValue = this.getSanitizedValue(value);\n    if (options && options.dirty) this.baseObject[this.keyName] = value;\n    this.entityObject[this.keyName] = parsedValue;\n    super.setValue(value, options);\n    this.bindError();\n    this.bindClassName();\n    this.executeExpressions();\n    this.callPatch();\n\n    if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {\n      this.root[VALUE_CHANGED_SYNC]();\n    }\n\n    this.parent.changing = false;\n  }\n\n  getControlValue() {\n    return this.getSanitizedValue(this.value);\n  }\n\n  bindError() {\n    if (this._messageExpression) this._isPassedExpression = this.executeExpression(this._messageExpression, this);\n    this.setControlErrorMessages();\n    var t = this;\n    t[\"errors\"] = this.errors;\n  }\n\n  bindClassName() {\n    if (this.updateOnElementClass && typeof this.updateOnElementClass === \"function\") {\n      let className = this.executeExpression(this._classNameExpression, this);\n      let updateElement = this.updateOnElementClass;\n      updateElement(className);\n    }\n  }\n\n  setBackEndErrors(error) {\n    Object.keys(error).forEach(key => this.backEndErrors[key] = error[key]);\n    this.setControlErrorMessages();\n  }\n\n  clearBackEndErrors(errors) {\n    if (!errors) this.backEndErrors = {};else Object.keys(errors).forEach(t => delete this.backEndErrors[t]);\n    this.setControlErrorMessages();\n  }\n\n  markAsTouched(opts) {\n    let currentState = this.touched;\n    super.markAsTouched(opts);\n    if (currentState != this.touched) this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);\n  }\n\n  markAsUntouched(opts) {\n    let currentState = this.untouched;\n    super.markAsUntouched(opts);\n    if (currentState != this.untouched) this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);\n  }\n\n  markAsDirty(opts) {\n    let currentState = this._dirty;\n    super.markAsDirty(opts);\n    this._dirty = true;\n    if (currentState != this._dirty) this.runControlPropChangeExpression([DIRTY]);\n  }\n\n  markAsPristine(opts) {\n    let currentState = this.pristine;\n    super.markAsPristine(opts);\n    if (currentState != this.pristine) this.runControlPropChangeExpression([PRISTINE]);\n  }\n\n  markAsPending(opts) {\n    let currentState = this.pending;\n    super.markAsDirty(opts);\n    if (currentState != this.pending) this.runControlPropChangeExpression([PENDING]);\n  }\n\n  runControlPropChangeExpression(propNames) {\n    propNames.forEach(name => {\n      if (this._controlProp && this._messageExpression && this._controlProp[name] || !this._messageExpression && this.checkErrorMessageStrategy()) this.bindError();\n      if (this._classNameControlProp && this._classNameControlProp[name]) this.bindClassName();\n    });\n  }\n\n  refresh() {\n    this.getMessageExpression(this.parent, this.keyName);\n    this.bindConditionalControls(DECORATORS.disabled, \"_refDisableControls\");\n    this.bindConditionalControls(DECORATORS.error, \"_refMessageControls\");\n    this.bindConditionalControls(DECORATORS.elementClass, \"_refClassNameControls\");\n    this.executeExpressions();\n    this.bindError();\n  }\n\n  reset(value, options = {}) {\n    if (value !== undefined) this.setValue(value, options);else this.setValue(this.getFormState(this._baseValue), options);\n    this._dirty = false;\n  }\n\n  commit() {\n    this._baseValue = this.value;\n    this.callPatch();\n  }\n\n  callPatch() {\n    this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);\n    if (this.parent && this.parent[PATCH]) this.parent[PATCH](this.keyName);\n  }\n\n  checkErrorMessageStrategy() {\n    let isBind = true;\n\n    switch (this._errorMessageBindingStrategy) {\n      case ErrorMessageBindingStrategy.OnSubmit:\n        isBind = this.parent.submitted;\n        break;\n\n      case ErrorMessageBindingStrategy.OnDirty:\n        isBind = this._dirty;\n        break;\n\n      case ErrorMessageBindingStrategy.OnTouched:\n        isBind = this.touched;\n        break;\n\n      case ErrorMessageBindingStrategy.OnDirtyOrTouched:\n        isBind = this._dirty || this.touched;\n        break;\n\n      case ErrorMessageBindingStrategy.OnDirtyOrSubmit:\n        isBind = this._dirty || this.parent.submitted;\n        break;\n\n      case ErrorMessageBindingStrategy.OnTouchedOrSubmit:\n        isBind = this.touched || this.parent.submitted;\n        break;\n\n      default:\n        isBind = true;\n    }\n\n    return isBind;\n  }\n\n  executeExpressions() {\n    this.processExpression(\"_refDisableControls\", \"disabled\");\n    this.processExpression(\"_refMessageControls\", \"bindError\");\n    this.processExpression(\"_refClassNameControls\", \"bindClassName\");\n  }\n\n  getMessageExpression(formGroup, keyName) {\n    if (formGroup[MODEL_INSTANCE]) {\n      let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\n\n      if (instanceContainer) {\n        this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];\n        this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];\n        this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];\n        this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];\n        if (this._classNameExpression) this.updateOnElementClass = true;\n      }\n    }\n  }\n\n  getSanitizedValue(value) {\n    if (this._sanitizers) {\n      for (let sanitizer of this._sanitizers) {\n        value = SANITIZERS[sanitizer.name](value, sanitizer.config);\n      }\n    }\n\n    return value;\n  }\n\n  bindConditionalControls(decoratorType, refName) {\n    this._disableProvider = new DisableProvider(decoratorType, this.entityObject);\n    this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);\n\n    this._disableProvider.oneArgumentProcess(this, `${this.keyName}${RXCODE}1`).forEach(t => this[refName].push(t));\n  }\n\n  setControlErrorMessages() {\n    if (!this._messageExpression && this.checkErrorMessageStrategy() || this._isPassedExpression) {\n      this._errorMessages = [];\n\n      if (this.errors) {\n        Object.keys(this.errors).forEach(t => {\n          if (this.parent) {\n            this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(this.errors, t);\n\n            if (!this._errorMessage) {\n              let errorObject = ObjectMaker.toJson(t, undefined, [this.errors[t][t]]);\n              this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(errorObject, t);\n            }\n          } else this._errorMessage = this.getErrorMessage(this.errors, t);\n\n          this._errorMessages.push(this._errorMessage);\n        });\n      } else {\n        this._errorMessage = undefined;\n\n        if (this.parent) {\n          this.parent[CONTROLS_ERROR][this.keyName] = undefined;\n          delete this.parent[CONTROLS_ERROR][this.keyName];\n        }\n      }\n\n      let backEndErrors = Object.keys(this.backEndErrors);\n      if (backEndErrors.length > 0) backEndErrors.forEach(t => {\n        this._errorMessages.push(this._errorMessage = this.backEndErrors[t]);\n      });\n    } else {\n      this._errorMessages = [];\n      this._errorMessage = undefined;\n    }\n\n    this._language = this.getLanguage();\n  }\n\n  getLanguage() {\n    return ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.language ? ReactiveFormConfig.i18n.language : undefined;\n  }\n\n  getErrorMessage(errorObject, keyName) {\n    if (errorObject[keyName][MESSAGE]) return errorObject[keyName][MESSAGE];\n    return;\n  }\n\n  processExpression(propName, operationType) {\n    if (this[propName]) for (var controlInfo of this[propName]) {\n      let control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);\n\n      if (control) {\n        if (operationType == \"disabled\") {\n          let result = this.executeExpression(controlInfo.conditionalExpression, control);\n          if (result) control.disable();else control.enable();\n        } else if (operationType == \"bindError\") control.bindError();else if (operationType == \"bindClassName\") control.bindClassName();\n      }\n    }\n  }\n\n  executeExpression(expression, control) {\n    return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);\n  }\n\n  getValue(value) {\n    return value !== undefined && value !== null && value !== \"\" ? value : \"\";\n  }\n\n}\n\nconst OBJECT = \"object\";\nconst BOOLEAN = \"boolean\";\n\nclass FormDataProvider {\n  convertToFormData(jObject, options) {\n    return this.convertFormData(jObject, undefined, undefined, options);\n  }\n\n  convertFormData(jObject, currentFormData, parentKey, options) {\n    let formData = currentFormData || new FormData();\n    let propName = '';\n\n    for (var columnName in jObject) {\n      propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;\n\n      if (Array.isArray(jObject[columnName])) {\n        jObject[columnName].forEach((row, index) => {\n          propName = `${columnName}[${index}]`;\n          if (typeof row === OBJECT) this.convertFormData(row, formData, propName, options);else this.nonObjectValueBind(row, formData, propName, options);\n        });\n      } else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {\n        this.convertFormData(jObject[columnName], formData, propName, options);\n      } else {\n        this.nonObjectValueBind(jObject[columnName], formData, propName, options);\n      }\n    }\n\n    return formData;\n  }\n\n  nonObjectValueBind(value, formData, propName, options) {\n    if (typeof value === BOOLEAN) {\n      let formValue = value ? true : false;\n      formData.append(propName, formValue);\n    } else if (value instanceof FileList) {\n      for (var i = 0; i < value.length; i++) {\n        formData.append(options && options.excludeImageIndex && value.length === 1 ? propName : `${propName}[${i}]`, value.item(i));\n      }\n    } else {\n      if (RegexValidator.isNotBlank(value)) formData.append(propName, value);\n    }\n  }\n\n}\n\nfunction isResetControl(controlName, control, options) {\n  let isReset = true;\n\n  if (options) {\n    isReset = false;\n    if (options.resetType) switch (options.resetType) {\n      case ResetFormType.ControlsOnly:\n        isReset = control instanceof FormControl;\n        break;\n\n      case ResetFormType.ControlsAndFormGroupsOnly:\n        isReset = control instanceof FormControl || control instanceof FormGroup;\n        break;\n\n      case ResetFormType.FormGroupsOnly:\n        isReset = control instanceof FormGroup;\n        break;\n\n      case ResetFormType.FormArraysOnly:\n        isReset = control instanceof FormArray;\n        break;\n\n      case ResetFormType.DefinedPropsOnly:\n        isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;\n        break;\n\n      default:\n        isReset = true;\n        break;\n    }\n    if (!isReset && options.with) isReset = options.with.filter(x => x.split('.')[0] == controlName.split('.')[0])[0] !== undefined;\n    if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly)) isReset = true;\n  }\n\n  return isReset;\n}\n\nfunction getNestedOptions(controlName, options) {\n  if (options) {\n    let jObjectOptions = {};\n    if (options.resetType) jObjectOptions.resetType = options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly ? ResetFormType.ControlsOnly : options.resetType;\n\n    if (options.with) {\n      let nestedControls = options.with.filter(t => t.split('.')[0] == controlName);\n      let controlNames = nestedControls.map(x => {\n        let splitControls = x.split('.');\n        splitControls.splice(0, 1);\n        return splitControls.join('.');\n      });\n      jObjectOptions.with = controlNames;\n    }\n\n    if (options.value && options.value[controlName]) jObjectOptions.value = options.value[controlName];\n    jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;\n    return jObjectOptions;\n  }\n\n  return undefined;\n}\n\nclass RxFormGroup extends FormGroup {\n  constructor(model, entityObject, controls, validatorOrOpts, asyncValidator) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.model = model;\n    this.entityObject = entityObject;\n    this._modified = {};\n    this._isModified = false;\n    this.changing = false;\n    this.baseObject = {};\n\n    for (var column in this.entityObject) this.baseObject[column] = this.entityObject[column];\n\n    this.formDataProvider = new FormDataProvider();\n  }\n\n  bindPrimaryKey(modelInstance, jObject) {\n    let instanceContainer = defaultContainer.get(modelInstance.constructor);\n\n    if (instanceContainer) {\n      let primaryKeyProp = instanceContainer.properties.filter(x => x.isPrimaryKey)[0];\n      if (primaryKeyProp && this.modelInstance[primaryKeyProp.name]) jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];\n    }\n  }\n\n  get modifiedValue() {\n    let jObject = {};\n\n    if (Object.keys(this._modified).length > 0) {\n      this.bindPrimaryKey(this.modelInstance, jObject);\n\n      for (var columnName in this._modified) {\n        if (this.controls[columnName] instanceof RxFormGroup) jObject[columnName] = this.controls[columnName].modifiedValue;else if (this.controls[columnName] instanceof FormArray) {\n          let formArray = this.controls[columnName];\n          jObject[columnName] = [];\n\n          for (var i = 0; i < this._modified[columnName].length; i++) {\n            let modifiedValue = formArray.controls[i].modifiedValue;\n            if (Object.keys(modifiedValue).length > 0) jObject[columnName].push(modifiedValue);\n          }\n\n          if (jObject[columnName].length == 0) delete jObject[columnName];\n        } else jObject[columnName] = this._modified[columnName];\n      }\n\n      return jObject;\n    }\n\n    return this._modified;\n  }\n\n  get isModified() {\n    return this._isModified;\n  }\n\n  patch(controlName) {\n    if (controlName) {\n      let control = this.controls[controlName];\n      this.processModified(controlName, control);\n    } else {\n      this.nestedFormsModification();\n    }\n\n    this._isModified = Object.keys(this._modified).length > 0;\n    if (!this._isModified) this.nestedArrayIsModified();\n    if (this.parent && this.parent.patch) this.parent.patch();\n  }\n\n  isDirty() {\n    let isDirty = false;\n\n    for (let name in this.value) {\n      let currentValue = this.modelInstance[name];\n\n      if (!(this.controls[name] instanceof FormGroup || this.controls[name] instanceof FormArray)) {\n        isDirty = ApplicationUtil.notEqualTo(this.baseObject[name], currentValue);\n      } else if (this.controls[name] instanceof RxFormGroup) isDirty = this.controls[name].isDirty();else if (this.controls[name] instanceof FormArray) {\n        for (let formGroup of this.controls[name].controls) {\n          isDirty = formGroup.isDirty();\n        }\n      }\n\n      if (isDirty) break;\n    }\n\n    return isDirty;\n  }\n\n  resetForm(options) {\n    for (let name in this.controls) {\n      if (isResetControl(name, this.controls[name], options)) {\n        if (this.controls[name] instanceof FormGroup) this.controls[name].resetForm(getNestedOptions(name, options));else if (this.controls[name] instanceof FormArray) {\n          this.controls[name].resetForm(options && options.value ? options.value[name] : undefined);\n        } else {\n          if (options && options.value && RegexValidator.isNotBlank(options.value[name])) this.controls[name].reset(options.value[name]);else this.controls[name].reset();\n        }\n      }\n    }\n  }\n\n  commit() {\n    for (let name in this.controls) {\n      if (this.controls[name] instanceof FormGroup) this.controls[name].commit();else if (this.controls[name] instanceof FormArray) {\n        this.controls[name].commit();\n      } else {\n        this.controls[name].commit();\n      }\n    }\n  }\n\n  patchModelValue(value, options) {\n    if (value) {\n      for (let name in this.controls) {\n        if (this.controls[name] instanceof RxFormGroup && value[name]) this.controls[name].patchModelValue(value[name], options);else if (this.controls[name] instanceof FormArray && Array.isArray(value[name])) {\n          let index = 0;\n\n          for (let formGroup of this.controls[name].controls) {\n            if (value[name][index]) formGroup.patchModelValue(value[name][index], options);\n            index = index + 1;\n          }\n        } else if (value[name] !== undefined) this.controls[name].patchValue(value[name], options);\n      }\n    }\n  }\n\n  getErrorSummary(onlyMessage) {\n    let jObject = {};\n    Object.keys(this.controls).forEach(columnName => {\n      if (this.controls[columnName] instanceof FormGroup) {\n        let error = this.controls[columnName].getErrorSummary(false);\n        if (Object.keys(error).length > 0) jObject[columnName] = error;\n      } else if (this.controls[columnName] instanceof FormArray) {\n        let index = 0;\n\n        for (let formGroup of this.controls[columnName].controls) {\n          let error = formGroup.getErrorSummary(false);\n\n          if (Object.keys(error).length > 0) {\n            error.index = index;\n            if (!jObject[columnName]) jObject[columnName] = [];\n            jObject[columnName].push(error);\n          }\n\n          index++;\n        }\n      } else {\n        if (this.controls[columnName].errors) {\n          let error = this.controls[columnName].errors;\n          if (onlyMessage) for (let validationName in error) jObject[columnName] = error[validationName].message;else jObject[columnName] = error;\n        }\n      }\n    });\n    return jObject;\n  }\n\n  valueChangedSync() {\n    Object.keys(this.controls).forEach(columnName => {\n      if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup) && !(this.entityObject[columnName] instanceof FormControl || this.entityObject[columnName] instanceof RxFormControl) && this.controls[columnName].getControlValue && ApplicationUtil.notEqualTo(this.controls[columnName].getControlValue(), this.entityObject[columnName])) {\n        this.controls[columnName].setValue(this.entityObject[columnName], {\n          updateChanged: true\n        });\n      } else if (this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) {\n        for (let formGroup of this.controls[columnName].controls) {\n          formGroup.valueChangedSync();\n        }\n      } else if (this.controls[columnName] instanceof RxFormGroup) {\n        this.controls[columnName].valueChangedSync();\n      }\n    });\n  }\n\n  refreshDisable() {\n    Object.keys(this.controls).forEach(columnName => {\n      if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\n        this.controls[columnName].refresh();\n      } else if (this.controls[columnName] instanceof RxFormGroup) {\n        this.controls[columnName].refreshDisable();\n      }\n    });\n  }\n\n  bindErrorMessages() {\n    Object.keys(this.controls).forEach(columnName => {\n      if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\n        this.controls[columnName].bindError();\n      } else if (this.controls[columnName] instanceof RxFormGroup) {\n        this.controls[columnName].bindErrorMessages();\n      }\n    });\n  }\n\n  get submitted() {\n    return this._submitted;\n  }\n\n  set submitted(value) {\n    this._submitted = value;\n    Object.keys(this.controls).forEach(columnName => {\n      if (this.controls[columnName] instanceof FormArray) {\n        let formArray = this.controls[columnName];\n\n        for (let formGroup of formArray.controls) formGroup.submitted = value;\n      } else if (this.controls[columnName] instanceof FormGroup) {\n        this.controls[columnName].submitted = value;\n      } else this.controls[columnName].bindError();\n    });\n  }\n\n  get modelInstanceValue() {\n    return clone(this.entityObject);\n  }\n\n  get modelInstance() {\n    return this.entityObject;\n  }\n\n  get controlsError() {\n    return this.getErrorSummary(true);\n  }\n\n  toFormData(options) {\n    return this.formDataProvider.convertToFormData(this.value, options);\n  }\n\n  processModified(controlName, control) {\n    if (control.isModified) this._modified[controlName] = control.value;else delete this._modified[controlName];\n    this._isModified = Object.keys(this._modified).length > 0;\n  }\n\n  nestedArrayIsModified() {\n    for (var controlName in this.controls) {\n      if (this.controls[controlName] instanceof RxFormArray) this._isModified = this.controls[controlName].isModified;\n      if (this._isModified) break;\n    }\n  }\n\n  setBackEndErrors(errors) {\n    Object.keys(errors).forEach(controlName => {\n      if (this.controls[controlName]) {\n        if (this.controls[controlName] instanceof FormGroup) this.controls[controlName].setBackEndErrors(errors[controlName]);else this.controls[controlName].setBackEndErrors(errors[controlName]);\n      }\n    });\n  }\n\n  clearBackEndErrors(errors) {\n    let clearErrors = errors ? Object.keys(errors) : Object.keys(this.controls);\n    clearErrors.forEach(controlName => {\n      if (this.controls[controlName]) {\n        if (this.controls[controlName] instanceof FormGroup) errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();else errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();\n      }\n    });\n  }\n\n  nestedFormsModification() {\n    for (var controlName in this.controls) {\n      if (this.controls[controlName] instanceof RxFormGroup) this.processModified(controlName, this.controls[controlName]);else if (this.controls[controlName] instanceof RxFormArray) {\n        if (this.controls[controlName].isModified) {\n          let formGroups = this.controls[controlName].controls;\n          this._modified[controlName] = [];\n\n          for (var formGroup of formGroups) {\n            if (formGroup.isModified) {\n              if (!this._modified[controlName]) this._modified[controlName] = [];\n\n              this._modified[controlName].push(formGroup.modifiedValue);\n            }\n          }\n\n          if (this._modified[controlName].length == 0) delete this._modified[controlName];\n        } else if (this._modified[controlName]) delete this._modified[controlName];\n      }\n    }\n  }\n\n}\n\nclass FormProvider {\n  static ProcessRule(control, config, isDynamicConfig = false) {\n    if (config && config.expressionProcessed) return true;\n    const formGroupValue = ApplicationUtil.getParentObjectValue(control);\n    const parentObject = control.parent ? ApplicationUtil.cloneValue(control.parent.value) : undefined;\n    let modelInstance = undefined;\n    if (control.parent && control.parent instanceof RxFormGroup) modelInstance = control.parent.modelInstance;\n\n    if (parentObject) {\n      this.updateFormControlValue(parentObject, control.parent.controls, control, config);\n      this.forDisableUpdate(parentObject, config);\n    } else if (config.conditionalExpression) return false;\n\n    return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);\n  }\n\n  static updateFormControlValue(parentObject, controls, control, config) {\n    for (var controlName in parentObject) {\n      if (!(parentObject[controlName] instanceof Object)) if (controls[controlName] === control) {\n        parentObject[controlName] = control.value;\n        break;\n      }\n    }\n  }\n\n  static forDisableUpdate(parentObject, config) {\n    if (config.disableConfig) Object.keys(config.disableConfig).forEach(column => {\n      parentObject[column] = config.disableConfig[column];\n    });\n  }\n\n}\n\nclass ValidatorValueChecker {\n  static pass(control, config) {\n    if (FormProvider.ProcessRule(control, config)) return RegexValidator.isNotBlank(control.value);else return false;\n  }\n\n  static passArrayValue(control, config) {\n    if (FormProvider.ProcessRule(control, config)) return typeof control.value === \"string\" ? RegexValidator.isNotBlank(control.value) : control.value instanceof Array;else return false;\n  }\n\n}\n\nconst ARRAY_CONFIG = \"ArrayConfig\";\nconst FIELD_CONFIG = \"FieldConfig\";\nconst IP_CONFIG = \"IpConfig\";\nconst NUMBER_CONFIG = \"NumberConfig\";\nconst PASSWORD_CONFIG = \"PasswordConfig\";\nconst PATTERN_CONFIG = \"PatternConfig\";\nconst RANGE_CONFIG = \"RangeConfig\";\nconst RELATIONAL_OPERATOR_CONFIG = \"RelationalOperatorConfig\";\nconst CONFIG_REQUIRED_FIELDS = {\n  [ARRAY_CONFIG]: [\"matchValues\"],\n  [FIELD_CONFIG]: [\"fieldName\"],\n  [IP_CONFIG]: [\"version\"],\n  [PASSWORD_CONFIG]: [\"validation\"],\n  [NUMBER_CONFIG]: [\"value\"],\n  [PATTERN_CONFIG]: [\"expression\"],\n  [RANGE_CONFIG]: [\"minimumNumber\", \"maximumNumber\"]\n};\n\nfunction getConfigObject(config, control, configName = '') {\n  return config != undefined && config != true ? configProvider(control, config, configName) : {};\n}\n\nfunction configProvider(control, config, configName) {\n  if (config.dynamicConfig) {\n    let currentConfig = FormProvider.ProcessRule(control, clone(config), true);\n\n    if (typeof currentConfig != \"boolean\") {\n      currentConfig.conditionalExpression = config.conditionalExpression;\n      currentConfig.dynamicConfig = config.dynamicConfig;\n      Object.keys(config).forEach(t => {\n        if (t != \"conditionalExpression\" && t != \"dynamicConfig\" || currentConfig[t] === undefined) {\n          currentConfig[t] = config[t];\n        }\n      });\n      return currentConfig;\n    } else return config;\n  }\n\n  return checkRequiredProps(config, configName);\n}\n\nfunction checkRequiredProps(config, configName) {\n  let props = CONFIG_REQUIRED_FIELDS[configName];\n\n  if (configName) {\n    props.forEach(prop => {\n      if (config[prop] === undefined) throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);\n    });\n  }\n\n  return config;\n}\n\nconst alphabet = {\n  'danish': /^[A-ZÃÃÃ]+$/i,\n  'french': /^[A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸]+$/i,\n  'german': /^[A-ZÃÃÃÃ]+$/i,\n  'spanish': /^[a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼]+$/i,\n  'russian': /^[Ð-Ð¯Ð]+$/i\n};\nconst alphaWithWhitespace = {\n  'danish': /^[A-ZÃÃÃ\\s]+$/i,\n  'french': /^[A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸\\s]+$/i,\n  'german': /^[A-ZÃÃÃÃ\\s]+$/i,\n  'spanish': /^[a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼\\s]+$/i,\n  'russian': /^[Ð-Ð¯Ð\\s]+$/i\n};\nconst alphanumeric = {\n  'danish': /^[0-9A-ZÃÃÃ]+$/i,\n  'french': /^[0-9A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸]+$/i,\n  'german': /^[0-9A-ZÃÃÃÃ]+$/i,\n  'spanish': /^[0-9a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼]+$/i,\n  'russian': /^[0-9Ð-Ð¯Ð]+$/i\n};\nconst alphanumericWithWitespace = {\n  'danish': /^[0-9A-ZÃÃÃ\\s]+$/i,\n  'french': /^[0-9A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸\\s]+$/i,\n  'german': /^[0-9A-ZÃÃÃÃ\\s]+$/i,\n  'spanish': /^[0-9a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼\\s]+$/i,\n  'russian': /^[0-9Ð-Ð¯Ð\\s]+$/i\n};\n\nfunction alphaValidation(configModel, control, regExps, key) {\n  let config = getConfigObject(configModel, control);\n\n  if (ValidatorValueChecker.pass(control, config)) {\n    regExps = getRegex(key, regExps, config);\n    var isValid = !config || !config.allowWhiteSpace ? RegexValidator.isValid(control.value, regExps[0]) : RegexValidator.isValid(control.value, regExps[1]);\n    if (!isValid) return ObjectMaker.toJson(key, config, [control.value]);\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction getRegex(key, regExps, config) {\n  if (config.allowCharacters) if (config.allowWhiteSpace) regExps[1] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);else regExps[0] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);\n\n  switch (key) {\n    case \"alpha\":\n      var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : \"\";\n      return [alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0], alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]];\n      break;\n\n    case \"alphaNumeric\":\n      var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : \"\";\n      return [alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0], alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]];\n      break;\n  }\n}\n\nfunction alphaValidator(configModel) {\n  return control => {\n    return alphaValidation(configModel, control, [RegExRule.alpha, RegExRule.alphaWithSpace], AnnotationTypes.alpha);\n  };\n}\n\nfunction alphaNumericValidator(configModel) {\n  return control => {\n    return alphaValidation(configModel, control, [RegExRule.alphaNumeric, RegExRule.alphaNumericWithSpace], AnnotationTypes.alphaNumeric);\n  };\n}\n\nfunction compareValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, FIELD_CONFIG);\n    const compareControl = ApplicationUtil.getFormControl(config.fieldName, control);\n    const controlValue = control.value;\n    const compareControlValue = compareControl ? compareControl.value : '';\n\n    if (RegexValidator.isNotBlank(controlValue) || RegexValidator.isNotBlank(compareControlValue)) {\n      if (!(compareControl && compareControl.value === controlValue)) return ObjectMaker.toJson(AnnotationTypes.compare, config, [controlValue, compareControlValue]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction containsValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let failed = false;\n      const values = config.values ? config.values : [config.value];\n\n      for (let value of values) {\n        failed = control.value.indexOf(value) == -1;\n        if (!failed) break;\n      }\n\n      if (failed) return ObjectMaker.toJson(AnnotationTypes.contains, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction checkLength(length, checks) {\n  let isPassed = false;\n\n  for (let check of checks) {\n    isPassed = check == length;\n    if (isPassed) break;\n  }\n\n  return isPassed;\n}\n\nfunction calculate(numbers) {\n  let numberSum = 0;\n\n  for (var i = 0; i < numbers.length; i++) numberSum += parseInt(numbers.substring(i, i + 1));\n\n  let deltas = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);\n\n  for (var i = numbers.length - 1; i >= 0; i -= 2) {\n    numberSum += deltas[parseInt(numbers.substring(i, i + 1))];\n  }\n\n  let mod = numberSum % 10;\n  mod = 10 - mod;\n  if (mod == 10) mod = 0;\n  return mod;\n}\n\nfunction creditCardValidator(configModel) {\n  let cardDigits = {\n    AmericanExpress: [15],\n    DinersClub: [14, 16, 19],\n    Discover: [16, 19],\n    JCB: [16, 19],\n    Maestro: [12, 16, 19],\n    MasterCard: [16],\n    Visa: [13, 16, 19]\n  };\n\n  function validate(creditCardNumber) {\n    var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));\n    return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;\n  }\n\n  function getCardProviderName(cardNumber) {\n    var cardProviderName = \"\";\n    return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\\d+$/.test(cardNumber) ? cardProviderName = \"Maestro\" : /^5[1-5]/.test(cardNumber) ? cardProviderName = \"MasterCard\" : /^4/.test(cardNumber) ? cardProviderName = \"Visa\" : /^3[47]/.test(cardNumber) ? cardProviderName = \"AmericanExpress\" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = \"JCB\" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = \"DinersClub\" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = \"Discover\"), cardProviderName;\n  }\n\n  return control => {\n    const controlValue = control.value;\n    let config = getConfigObject(configModel, control);\n    const parentObject = control.parent ? control.parent.value : undefined;\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (RegexValidator.isNotBlank(controlValue)) {\n        let isValid = false;\n        let cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;\n        let cardType = '';\n\n        for (let creditCardType of cardTypes) {\n          isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);\n          cardType = creditCardType;\n          if (isValid) break;\n        }\n\n        if (!isValid) return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction regexValidation(configModel, control, regExp, key) {\n  let config = getConfigObject(configModel, control);\n  return validate(config, control, regExp, key);\n}\n\nfunction validate(config, control, regExp, key) {\n  if (ValidatorValueChecker.pass(control, config)) {\n    if (!RegexValidator.isValid(control.value, regExp)) return ObjectMaker.toJson(key, config, [control.value]);\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction digitValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.onlyDigit, AnnotationTypes.digit);\n  };\n}\n\nfunction emailValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.basicEmail, AnnotationTypes.email);\n  };\n}\n\nfunction hexColorValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.strictHexColor, AnnotationTypes.hexColor);\n  };\n}\n\nfunction lowercaseValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(control.value === control.value.toLowerCase())) return ObjectMaker.toJson(AnnotationTypes.lowerCase, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nconst OPERATORS = {\n  lessThan: \"<\",\n  greaterThan: \">\",\n  lessThanEqualTo: \"<=\",\n  greaterThanEqualTo: \">=\"\n};\n\nfunction runCondition$1(leftValue, rightValue, operator) {\n  let result = false;\n\n  switch (operator) {\n    case OPERATORS.lessThan:\n    case OPERATORS.greaterThan:\n      result = leftValue > rightValue;\n      break;\n\n    case OPERATORS.lessThanEqualTo:\n    case OPERATORS.greaterThanEqualTo:\n      result = leftValue >= rightValue;\n      break;\n  }\n\n  return result;\n}\n\nfunction dateChecker(control, config, operationType) {\n  config = getConfigObject(config, control);\n  var dateProvider = new DateProvider();\n\n  if (FormProvider.ProcessRule(control, config)) {\n    if (RegexValidator.isNotBlank(control.value)) {\n      let checkDate = dateProvider.getCompareDate(config, control);\n\n      if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {\n        let currentControlValue = dateProvider.getDate(control.value);\n        let isValid = operationType == AnnotationTypes.minDate ? runCondition$1(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition$1(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\n        if (!isValid) return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\n      } else return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\n    }\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction validateDate(control, config, operationType) {\n  config = getConfigObject(config, control);\n  var dateProvider = new DateProvider();\n\n  if (FormProvider.ProcessRule(control, config)) {\n    if (RegexValidator.isNotBlank(control.value)) {\n      if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {\n        return ObjectMaker.toJson(operationType, config, [control.value]);\n      }\n    }\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction maxDateValidator(configModel) {\n  return control => {\n    return dateChecker(control, configModel, AnnotationTypes.maxDate);\n  };\n}\n\nfunction maxLengthValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, NUMBER_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(control.value.length <= config.value)) return ObjectMaker.toJson(AnnotationTypes.maxLength, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction maxNumberValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, NUMBER_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(parseFloat(control.value) <= config.value)) return ObjectMaker.toJson(AnnotationTypes.maxNumber, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction minDateValidator(configModel) {\n  return control => {\n    return dateChecker(control, configModel, AnnotationTypes.minDate);\n  };\n}\n\nfunction minLengthValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, NUMBER_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(String(control.value).length >= config.value)) return ObjectMaker.toJson(AnnotationTypes.minLength, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction minNumberValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, NUMBER_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(parseFloat(control.value) >= config.value)) return ObjectMaker.toJson(AnnotationTypes.minNumber, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction passwordValidator(configModel) {\n  function getMessageObject(jObject, keyName) {\n    if (!jObject.message && !jObject.messageKey) {\n      let message = ObjectMaker.getPasswordMessage();\n      jObject.message = message && typeof message == \"string\" ? message : ApplicationUtil.isObject(message) ? message[keyName] : \"\";\n      if (!jObject.message) jObject.message = message[\"password\"];\n      jObject.messageKey = \"\";\n    }\n\n    return jObject;\n  }\n\n  return control => {\n    let config = getConfigObject(configModel, control, PASSWORD_CONFIG);\n    let controlValue = control.value;\n\n    if (RegexValidator.isNotBlank(controlValue)) {\n      let validation = RegexValidator.isValidPassword(config.validation, controlValue);\n      let jObject = {};\n      jObject.message = config.message && config.message[validation.keyName] ? config.message[validation.keyName] : typeof config.message == \"string\" ? config.message : '';\n      jObject.messageKey = config.messageKey && config.messageKey[validation.keyName] ? config.messageKey[validation.keyName] : typeof config.messageKey == \"string\" ? config.messageKey : \"\";\n      jObject = getMessageObject(jObject, validation.keyName);\n      if (!validation.isValid) return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction rangeValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, RANGE_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!((control.value || control.value === 0) && parseFloat(control.value) >= config.minimumNumber && parseFloat(control.value) <= config.maximumNumber)) return ObjectMaker.toJson(AnnotationTypes.range, config, [control.value, config.minimumNumber, config.maximumNumber]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction uppercaseValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(control.value === control.value.toUpperCase())) return ObjectMaker.toJson(AnnotationTypes.upperCase, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction requiredValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (!RegexValidator.isNotBlank(control.value)) {\n        return ObjectMaker.toJson(AnnotationTypes.required, config, []);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction patternValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, PATTERN_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      for (var pattern in config.expression) if (!RegexValidator.isValid(control.value, config.expression[pattern])) return ObjectMaker.toJson(pattern, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction timeValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let isValid = config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.time, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction urlValidation(configModel, control) {\n  var regex = RegExRule.url;\n  let config = getConfigObject(configModel, control);\n\n  if (config && config.urlValidationType) {\n    switch (config.urlValidationType) {\n      case 1:\n        regex = RegExRule.url;\n        break;\n\n      case 2:\n        regex = RegExRule.localhostUrl;\n        break;\n\n      case 3:\n        regex = RegExRule.interanetUrl;\n        break;\n    }\n  }\n\n  return validate(config, control, regex, AnnotationTypes.url);\n}\n\nfunction urlValidator(configModel) {\n  return control => {\n    return urlValidation(configModel, control);\n  };\n}\n\nfunction jsonValidator(configModel) {\n  function process(value) {\n    var result = false;\n\n    try {\n      var json = JSON.parse(value);\n      result = !!json && typeof json === 'object';\n    } catch (ex) {\n      result = false;\n    }\n\n    return result;\n  }\n\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!process(control.value)) return ObjectMaker.toJson(AnnotationTypes.json, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nconst operatorOpposite = {\n  [AnnotationTypes.greaterThan]: AnnotationTypes.lessThan,\n  [AnnotationTypes.lessThan]: AnnotationTypes.greaterThan,\n  [AnnotationTypes.greaterThanEqualTo]: AnnotationTypes.lessThanEqualTo,\n  [AnnotationTypes.lessThanEqualTo]: AnnotationTypes.greaterThanEqualTo\n};\n\nfunction relationalCheck(control, config, relationalOperatorName) {\n  config = getConfigObject(config, control);\n  const matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\n  const matchControlValue = matchControl ? matchControl.value : config.value !== undefined ? config.value : '';\n\n  if (FormProvider.ProcessRule(control, config)) {\n    if (config.isArrayControl) return arrayControlValidation(control, config, relationalOperatorName);\n    if (isValid$1(control, matchControlValue, relationalOperatorName) === false) return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction isValid$1(control, matchControlValue, relationalOperatorName) {\n  if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {\n    let isValid = false;\n\n    switch (relationalOperatorName) {\n      case AnnotationTypes.greaterThan:\n        isValid = parseFloat(control.value) > parseFloat(matchControlValue);\n        break;\n\n      case AnnotationTypes.lessThan:\n        isValid = parseFloat(control.value) < parseFloat(matchControlValue);\n        break;\n\n      case AnnotationTypes.greaterThanEqualTo:\n        isValid = parseFloat(control.value) >= parseFloat(matchControlValue);\n        break;\n\n      case AnnotationTypes.lessThanEqualTo:\n        isValid = parseFloat(control.value) <= parseFloat(matchControlValue);\n        break;\n    }\n\n    return isValid;\n  }\n\n  return null;\n}\n\nfunction setTimeFunc(invalidateControls) {\n  let timeOut = setTimeout(() => {\n    invalidateControls.forEach(t => {\n      t.updateValueAndValidity();\n    });\n    clearTimeout(timeOut);\n  }, 200);\n}\n\nfunction arrayControlValidation(control, config, relationalOperatorName) {\n  let formArray = ApplicationUtil.getParentFormArray(control);\n  let parentFormGroup = control.parent ? control.parent : undefined;\n  let oppositeOperator = operatorOpposite[relationalOperatorName];\n  let updateValidityControls = [];\n\n  if (formArray && parentFormGroup && formArray.controls.length > 1) {\n    let indexOf = formArray.controls.indexOf(parentFormGroup);\n    let fieldName = ApplicationUtil.getFormControlName(control);\n    let valid = true;\n    if (indexOf > 0) valid = validateControl(formArray, control, indexOf - 1, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls);\n    if (valid && formArray.controls.length > indexOf + 1) valid = validateControl(formArray, control, indexOf + 1, fieldName, relationalOperatorName, relationalOperatorName, updateValidityControls);\n    if (updateValidityControls.length > 0) setTimeFunc(updateValidityControls);\n    if (valid === false) return ObjectMaker.toJson(relationalOperatorName, config, [control.value]);\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction validateControl(formArray, control, indexOf, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls) {\n  let valid = false;\n  let formGroup = formArray.controls[indexOf];\n\n  if (formGroup && formGroup.controls) {\n    let formControl = formGroup.controls[fieldName];\n    valid = isValid$1(control, formControl.value, oppositeOperator);\n    if (valid && formControl.errors && formControl.errors[relationalOperatorName]) updateValidityControls.push(formControl);\n  }\n\n  return valid;\n}\n\nfunction greaterThanValidator(configModel) {\n  return control => {\n    return relationalCheck(control, configModel, AnnotationTypes.greaterThan);\n  };\n}\n\nfunction greaterThanEqualToValidator(configModel) {\n  return control => {\n    return relationalCheck(control, configModel, AnnotationTypes.greaterThanEqualTo);\n  };\n}\n\nfunction lessThanEqualToValidator(configModel) {\n  return control => {\n    return relationalCheck(control, configModel, AnnotationTypes.lessThanEqualTo);\n  };\n}\n\nfunction lessThanValidator(configModel) {\n  return control => {\n    return relationalCheck(control, configModel, AnnotationTypes.lessThan);\n  };\n}\n\nfunction choiceValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (control.value instanceof Array) {\n        config.minLength = config.minLength == undefined ? 0 : config.minLength;\n        config.maxLength = config.maxLength == undefined ? 0 : config.maxLength;\n        if (control.value.length < config.minLength || config.maxLength !== 0 && control.value.length > config.maxLength) return ObjectMaker.toJson(AnnotationTypes.choice, config, [control.value]);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction differentValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, FIELD_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      const differentControl = ApplicationUtil.getFormControl(config.fieldName, control);\n      const differentControlValue = differentControl ? differentControl.value : '';\n      if (!(differentControl && differentControl.value != control.value)) return ObjectMaker.toJson(AnnotationTypes.different, config, [control.value, differentControlValue]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction numericValidator(configModel) {\n  return control => {\n    if (configModel && (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.numeric])) ApplicationUtil.configureControl(control, configModel, AnnotationTypes.numeric);\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!RegexValidator.isValid(control.value, ApplicationUtil.numericValidation(config.allowDecimal, config.acceptValue))) return ObjectMaker.toJson(AnnotationTypes.numeric, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction evenValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(control.value % 2 == 0)) return ObjectMaker.toJson(AnnotationTypes.even, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction oddValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!!(control.value % 2 == 0) || !ApplicationUtil.isNumeric(control.value)) return ObjectMaker.toJson(AnnotationTypes.odd, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction factorValidator(configModel) {\n  function positiveFactors(dividend, value) {\n    let isPositive = false;\n\n    for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {\n      if (dividend % index === 0) {\n        if (index == value) isPositive = true;\n        if (dividend / index !== index) if (dividend / index == value) isPositive = true;\n        if (isPositive) break;\n      }\n    }\n\n    return isPositive;\n  }\n\n  return control => {\n    let config = getConfigObject(configModel, control);\n    const dividendField = control.parent && config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\n    const dividend = config.fieldName && dividendField ? dividendField.value : config.dividend;\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (RegexValidator.isNotBlank(control.value) && dividend > 0) {\n        if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value))) return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction leapYearValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      var isValid = control.value % 100 === 0 ? control.value % 400 === 0 : control.value % 4 === 0;\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.leapYear, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction allOfValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, ARRAY_CONFIG);\n\n    if (ValidatorValueChecker.passArrayValue(control, config)) {\n      var testResult = false;\n\n      for (let value of config.matchValues) {\n        testResult = control.value.some(y => y == value);\n        if (!testResult) break;\n      }\n\n      if (!testResult) return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction oneOfValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, ARRAY_CONFIG);\n\n    if (ValidatorValueChecker.passArrayValue(control, config)) {\n      var testResult = false;\n\n      for (let value of config.matchValues) {\n        let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\n        testResult = Array.isArray(control.value) ? control.value.some(y => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\n        if (testResult) break;\n      }\n\n      if (!testResult) return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction noneOfValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, ARRAY_CONFIG);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      var testResult = false;\n\n      for (let value of config.matchValues) {\n        let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\n        testResult = Array.isArray(control.value) ? control.value.some(y => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\n        if (testResult) break;\n      }\n\n      if (testResult) return ObjectMaker.toJson(AnnotationTypes.noneOf, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction macValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.macId, AnnotationTypes.mac);\n  };\n}\n\nfunction asciiValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.ascii, AnnotationTypes.ascii);\n  };\n}\n\nfunction dataUriValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.dataUri, AnnotationTypes.dataUri);\n  };\n}\n\nfunction portValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let isValid = RegexValidator.isValid(control.value, RegExRule.onlyDigit) && control.value >= 0 && control.value <= 65535;\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.port, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction latLongValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let splitText = control.value.split(',');\n      if (!(splitText.length > 1 && RegexValidator.isValid(splitText[0], RegExRule.lat) && RegexValidator.isValid(splitText[1], RegExRule.long))) return ObjectMaker.toJson(AnnotationTypes.latLong, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction extensionValidator(configModel) {\n  return (control, files) => {\n    let config = getConfigObject(configModel, control);\n    if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.extension]) ApplicationUtil.configureControl(control, config, AnnotationTypes.extension);\n\n    if (files && FormProvider.ProcessRule(control, config)) {\n      if (RegexValidator.isNotBlank(control.value)) {\n        let testResult = true;\n        let extension = '';\n\n        for (var i = 0; i < files.length; i++) {\n          let file = files.item(i);\n          let splitText = file.name.split(\".\");\n          extension = splitText[splitText.length - 1];\n          let result = config.extensions.filter(t => {\n            return extension.toLowerCase() == t.toLowerCase();\n          })[0];\n\n          if (!result && !configModel.isExcludeExtensions) {\n            testResult = false;\n            break;\n          } else {\n            if (result && configModel.isExcludeExtensions) {\n              testResult = false;\n              break;\n            }\n          }\n        }\n\n        if (!testResult) return ObjectMaker.toJson(AnnotationTypes.extension, config, [extension, config.extensions.join(\",\")]);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction fileSizeValidator(configModel) {\n  return (control, files) => {\n    let config = getConfigObject(configModel, control);\n    if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.fileSize]) ApplicationUtil.configureControl(control, config, AnnotationTypes.fileSize);\n\n    if (files && FormProvider.ProcessRule(control, config)) {\n      if (RegexValidator.isNotBlank(control.value)) {\n        let minFileSize = config.minSize ? config.minSize : 0;\n        let testResult = false;\n        let fileSize = 0;\n\n        for (var i = 0; i < files.length; i++) {\n          let file = files.item(i);\n          fileSize = file.size;\n          testResult = !(fileSize >= minFileSize && fileSize <= config.maxSize);\n          if (testResult) break;\n        }\n\n        if (testResult) return ObjectMaker.toJson(AnnotationTypes.fileSize, config, [fileSize, minFileSize, config.maxSize]);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction endsWithValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let failed = false;\n      let values = config.values ? config.values : [config.value];\n\n      for (let value of values) {\n        var endString = String(control.value).substr(control.value.length - value.length, value.length);\n        failed = endString != value;\n        if (!failed) break;\n      }\n\n      if (failed) return ObjectMaker.toJson(AnnotationTypes.endsWith, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction startsWithValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let failed = false;\n      let values = config.values ? config.values : [config.value];\n\n      for (let value of values) {\n        let startString = String(control.value).substr(0, value.length);\n        failed = config.isRestrict && String(startString).toLowerCase() == String(value).toLowerCase() || !config.isRestrict && startString != value;\n        if (!failed) break;\n      }\n\n      if (failed) return ObjectMaker.toJson(AnnotationTypes.startsWith, config, [control.value, config.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction primeNumberValidator(configModel) {\n  function isPrime(value) {\n    let isPrimeNumber = value != 1;\n\n    for (var i = 2; i < value; i++) {\n      if (value % i == 0) {\n        isPrimeNumber = false;\n        break;\n      }\n    }\n\n    return isPrimeNumber;\n  }\n\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!ApplicationUtil.isNumeric(control.value) || !isPrime(control.value)) return ObjectMaker.toJson(AnnotationTypes.primeNumber, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction latitudeValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.lat, AnnotationTypes.latitude);\n  };\n}\n\nfunction longitudeValidator(configModel) {\n  return control => {\n    return regexValidation(configModel, control, RegExRule.long, AnnotationTypes.longitude);\n  };\n}\n\nfunction composeValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (config.validators) {\n        let result = undefined;\n\n        for (let validator of config.validators) {\n          result = validator(control);\n          if (result) break;\n        }\n\n        if (result) return config.messageKey || config.message ? ObjectMaker.toJson(config.messageKey || AnnotationTypes.compose, config, [control.value]) : result;\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction ruleValidator(configModel, entity) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      let result = null;\n\n      for (let rule of config.customRules) {\n        result = rule(entity);\n        if (result) break;\n      }\n\n      if (result) return result;\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction fileValidator(configModel) {\n  return (control, files) => {\n    let config = getConfigObject(configModel, control);\n    if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.file]) ApplicationUtil.configureControl(control, config, AnnotationTypes.file);\n\n    if (files) {\n      if (FormProvider.ProcessRule(control, config)) {\n        if (RegexValidator.isNotBlank(control.value)) {\n          let minFiles = config.minFiles ? config.minFiles : 0;\n          let maxFiles = config.maxFiles ? config.maxFiles : files.length;\n          if (!(files.length > 0 && files[0] instanceof File && files.length >= minFiles && files.length <= maxFiles)) return ObjectMaker.toJson(AnnotationTypes.file, config, [files.length, minFiles, maxFiles]);\n        }\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction customValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      const formGroupValue = ApplicationUtil.getParentObjectValue(control);\n      const parentObject = control.parent ? control.parent.value : undefined;\n      let result = null;\n\n      for (let rule of config.customRules) {\n        result = rule(formGroupValue, parentObject, config.additionalValue);\n        if (result) break;\n      }\n\n      if (result) return result;\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction uniqueValidator(configModel) {\n  var setTimeoutFunc = (invalidateControls, controlValues) => {\n    let timeOut = setTimeout(() => {\n      invalidateControls.forEach(t => {\n        let isMatched = controlValues.filter(x => x == t.value)[0];\n        if (!isMatched) t.updateValueAndValidity();\n      });\n      clearTimeout(timeOut);\n    }, 200);\n  };\n\n  var additionalValidation = (config, fieldName, formGroup, formArray, currentValue) => {\n    let indexOf = formArray.controls.indexOf(formGroup);\n    let formArrayValue = [];\n\n    if (indexOf != -1) {\n      formArray.value.forEach((t, i) => {\n        if (indexOf != i) formArrayValue.push(t);\n      });\n      return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);\n    }\n\n    return false;\n  };\n\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (RegexValidator.isNotBlank(control.value)) {\n        let formArray = ApplicationUtil.getParentFormArray(control);\n        let parentFormGroup = control.parent ? control.parent : undefined;\n        let invalidateControls = [];\n        let controlValues = [];\n\n        if (formArray && parentFormGroup) {\n          let currentValue = control.value;\n          let fieldName = ApplicationUtil.getFormControlName(control);\n          let isMatched = false;\n\n          for (let formGroup of formArray.controls) {\n            if (formGroup != parentFormGroup) {\n              isMatched = ApplicationUtil.toLower(formGroup.controls[fieldName].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]);\n\n              if (formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]) {\n                var matchedControl = formArray.controls.filter(t => t.controls[fieldName] != formGroup.controls[fieldName] && ApplicationUtil.toLower(t.controls[fieldName].value) == ApplicationUtil.toLower(formGroup.controls[fieldName].value))[0];\n                if (!matchedControl) invalidateControls.push(formGroup.controls[fieldName]);\n              } else controlValues.push(formGroup.controls[fieldName].value);\n            }\n\n            if (isMatched) break;\n          }\n\n          if (invalidateControls.length > 0) setTimeoutFunc(invalidateControls, controlValues);\n          let validation = false;\n\n          if (config.additionalValidation) {\n            validation = additionalValidation(config, fieldName, parentFormGroup, formArray, currentValue);\n          }\n\n          if (isMatched && !validation) return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);\n        }\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction imageValidator(configModel) {\n  return (control, files) => {\n    let config = getConfigObject(configModel, control);\n    if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.image]) ApplicationUtil.configureControl(control, config, AnnotationTypes.image);\n    if (!files) return ObjectMaker.null();\n    return new Promise((resolve, reject) => {\n      if (FormProvider.ProcessRule(control, config)) {\n        if (RegexValidator.isNotBlank(control.value)) {\n          let testResult = false;\n\n          for (var i = 0; i < files.length; i++) {\n            let file = files.item(i);\n            let type = file.type ? file.type.split('/') : [];\n            testResult = type.length > 1 && type[0] == \"image\";\n            if (!testResult) break;\n            let image = new Image();\n            config.minWidth = config.minWidth ? config.minWidth : 0;\n            config.minHeight = config.minHeight ? config.minHeight : 0;\n\n            image.onload = () => {\n              testResult = image.width >= config.minWidth && image.height >= config.minHeight && image.width <= config.maxWidth && image.height <= config.maxHeight;\n              if (!testResult) resolve(ObjectMaker.toJson(AnnotationTypes.image, config, [image.width, image.height]));else resolve(ObjectMaker.null());\n            };\n\n            image.onerror = () => {\n              resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\n            };\n\n            image.src = URL.createObjectURL(file);\n          }\n\n          if (!testResult) resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\n        }\n      }\n\n      return ObjectMaker.null();\n    });\n  };\n}\n\nfunction notEmptyValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (!RegexValidator.isNotBlank(control.value, true)) {\n        return ObjectMaker.toJson(AnnotationTypes.notEmpty, config, []);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction checkIpV4(value) {\n  let isValid = RegexValidator.isValid(value, RegExRule.ipV4);\n\n  if (isValid) {\n    const splitDots = value.split('.');\n\n    for (let ipNum of splitDots) {\n      isValid = ipNum <= 255;\n      if (!isValid) break;\n    }\n  }\n\n  return isValid;\n}\n\nfunction checkIpV6(value) {\n  return RegexValidator.isValid(value, RegExRule.ipV6);\n}\n\nfunction ipValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control, IP_CONFIG);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let values = config.isCidr ? control.value.split('/') : [control.value];\n      var isValid = config.version == IpVersion.V4 ? checkIpV4(values[0]) : config.version == IpVersion.V6 ? checkIpV6(values[0]) : checkIpV4(values[0]) || checkIpV6(values[0]);\n\n      if (config.isCidr && isValid) {\n        isValid = values.length > 1 ? config.version == IpVersion.V4 ? RegexValidator.isValid(values[1], RegExRule.cidrV4) : config.version == IpVersion.V6 ? RegexValidator.isValid(values[1], RegExRule.cidrV6) : RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6) : false;\n      }\n\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction cusipValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      var controlValue = control.value.toUpperCase();\n      let isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);\n\n      if (isValid) {\n        let numericValues = controlValue.split(\"\").map(value => {\n          var charCode = value.charCodeAt(0);\n          return charCode >= \"A\".charCodeAt(0) && charCode <= \"Z\".charCodeAt(0) ? charCode - \"A\".charCodeAt(0) + 10 : value;\n        });\n        let totalCount = 0;\n\n        for (var i = 0; i < numericValues.length - 1; i++) {\n          var numericValue = parseInt(numericValues[i], 10);\n\n          if (i % 2 !== 0) {\n            numericValue *= 2;\n          }\n\n          if (numericValue > 9) {\n            numericValue -= 9;\n          }\n\n          totalCount += numericValue;\n        }\n\n        totalCount = (10 - totalCount % 10) % 10;\n        isValid = totalCount == numericValues[numericValues.length - 1];\n      }\n\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction gridValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let controlValue = control.value.toUpperCase();\n      var isValid = RegexValidator.isValid(controlValue, RegExRule.grid);\n\n      if (isValid) {\n        controlValue = controlValue.replace(/\\s/g, '').replace(/-/g, '');\n\n        if ('GRID:' === controlValue.substr(0, 5)) {\n          controlValue = controlValue.substr(5);\n        }\n\n        let alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        var alphaNumLength = alphaNums.length,\n            length = controlValue.length,\n            check = Math.floor(alphaNumLength / 2);\n\n        for (var i = 0; i < length; i++) {\n          check = ((check || alphaNumLength) * 2 % (alphaNumLength + 1) + alphaNums.indexOf(controlValue.charAt(i))) % alphaNumLength;\n        }\n\n        isValid = check === 1;\n      }\n\n      if (!isValid) return ObjectMaker.toJson(AnnotationTypes.grid, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction dateValidator(configModel) {\n  return control => {\n    return validateDate(control, configModel, AnnotationTypes.date);\n  };\n}\n\nfunction runCondition(leftValue, rightValue, operator) {\n  let result = false;\n\n  switch (operator) {\n    case OPERATORS.lessThan:\n    case OPERATORS.greaterThan:\n      result = leftValue > rightValue;\n      break;\n\n    case OPERATORS.lessThanEqualTo:\n    case OPERATORS.greaterThanEqualTo:\n      result = leftValue >= rightValue;\n      break;\n  }\n\n  return result;\n}\n\nfunction isValid(control, config) {\n  return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\n}\n\nfunction getTime(value) {\n  let splitTime = value ? value.split(':') : [];\n  return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();\n}\n\nfunction timeChecker(control, config, operationType) {\n  config = getConfigObject(config, control);\n\n  if (FormProvider.ProcessRule(control, config)) {\n    if (RegexValidator.isNotBlank(control.value)) {\n      if (isValid(control, config)) {\n        let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\n        let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);\n        let currentControlValue = getTime(control.value);\n        let isValid = operationType == AnnotationTypes.minTime ? runCondition(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\n        if (!isValid) return ObjectMaker.toJson(operationType, config, [control.value]);\n      } else return ObjectMaker.toJson(operationType, config, [control.value]);\n    }\n  }\n\n  return ObjectMaker.null();\n}\n\nfunction minTimeValidator(configModel) {\n  return control => {\n    return timeChecker(control, configModel, AnnotationTypes.minTime);\n  };\n}\n\nfunction maxTimeValidator(configModel) {\n  return control => {\n    return timeChecker(control, configModel, AnnotationTypes.maxTime);\n  };\n}\n\nfunction requiredTrueValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (FormProvider.ProcessRule(control, config)) {\n      if (control.value !== true) {\n        return ObjectMaker.toJson(AnnotationTypes.requiredTrue, config, []);\n      }\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction maskValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n    if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.mask]) ApplicationUtil.configureControl(control, config, AnnotationTypes.mask);\n    return null;\n  };\n}\n\nconst IBAN_COUNTRY_CODE_REGEX = {\n  AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\n  AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\n  AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  AT: /^(AT[0-9]{2})\\d{16}$/,\n  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  BA: /^(BA[0-9]{2})\\d{16}$/,\n  BE: /^(BE[0-9]{2})\\d{12}$/,\n  BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\n  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\n  BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\n  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  CR: /^(CR[0-9]{2})\\d{18}$/,\n  CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  CZ: /^(CZ[0-9]{2})\\d{20}$/,\n  DE: /^(DE[0-9]{2})\\d{18}$/,\n  DK: /^(DK[0-9]{2})\\d{14}$/,\n  DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\n  EE: /^(EE[0-9]{2})\\d{16}$/,\n  EG: /^(EG[0-9]{2})\\d{25}$/,\n  ES: /^(ES[0-9]{2})\\d{20}$/,\n  FI: /^(FI[0-9]{2})\\d{14}$/,\n  FO: /^(FO[0-9]{2})\\d{14}$/,\n  FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\n  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\n  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\n  GL: /^(GL[0-9]{2})\\d{14}$/,\n  GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\n  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\n  HR: /^(HR[0-9]{2})\\d{17}$/,\n  HU: /^(HU[0-9]{2})\\d{24}$/,\n  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\n  IL: /^(IL[0-9]{2})\\d{19}$/,\n  IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\n  IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\n  IS: /^(IS[0-9]{2})\\d{22}$/,\n  IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\n  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\n  KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\n  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\n  LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  LT: /^(LT[0-9]{2})\\d{16}$/,\n  LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\n  MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\n  ME: /^(ME[0-9]{2})\\d{18}$/,\n  MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\n  MR: /^(MR[0-9]{2})\\d{23}$/,\n  MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\n  MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\n  NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\n  NO: /^(NO[0-9]{2})\\d{11}$/,\n  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  PL: /^(PL[0-9]{2})\\d{24}$/,\n  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\n  PT: /^(PT[0-9]{2})\\d{21}$/,\n  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\n  RS: /^(RS[0-9]{2})\\d{18}$/,\n  SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\n  SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\n  SE: /^(SE[0-9]{2})\\d{20}$/,\n  SI: /^(SI[0-9]{2})\\d{15}$/,\n  SK: /^(SK[0-9]{2})\\d{20}$/,\n  SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  TL: /^(TL[0-9]{2})\\d{19}$/,\n  TN: /^(TN[0-9]{2})\\d{20}$/,\n  TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\n  UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\n  VA: /^(VA[0-9]{2})\\d{18}$/,\n  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  XK: /^(XK[0-9]{2})\\d{16}$/\n};\n\nfunction hasValidIbanFormat(value, countryCode) {\n  const strippedStr = value.replace(/[\\s\\-]+/gi, '').toUpperCase();\n  const isoCountryCode = countryCode || strippedStr.slice(0, 2).toUpperCase();\n  return isoCountryCode in IBAN_COUNTRY_CODE_REGEX && IBAN_COUNTRY_CODE_REGEX[isoCountryCode].test(strippedStr);\n}\n\nfunction hasValidIbanChecksum(str) {\n  const strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\n\n  const rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\n  const alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, char => char.charCodeAt(0) - 55);\n  const remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g).reduce((acc, value) => Number(acc + value) % 97, '');\n  return remainder === 1;\n}\n\nfunction ibanValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      if (!(hasValidIbanFormat(control.value, config.countryCode) && hasValidIbanChecksum(control.value))) return ObjectMaker.toJson(AnnotationTypes.iban, config, [control.value, config.countryCode]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nconst APP_VALIDATORS = {\n  \"alphaNumeric\": alphaNumericValidator,\n  \"alpha\": alphaValidator,\n  \"compare\": compareValidator,\n  \"email\": emailValidator,\n  \"hexColor\": hexColorValidator,\n  \"lowerCase\": lowercaseValidator,\n  \"maxDate\": maxDateValidator,\n  \"maxNumber\": maxNumberValidator,\n  \"minDate\": minDateValidator,\n  \"minNumber\": minNumberValidator,\n  \"contains\": containsValidator,\n  \"upperCase\": uppercaseValidator,\n  \"maxLength\": maxLengthValidator,\n  \"minLength\": minLengthValidator,\n  \"password\": passwordValidator,\n  \"range\": rangeValidator,\n  \"required\": requiredValidator,\n  \"creditCard\": creditCardValidator,\n  \"digit\": digitValidator,\n  \"pattern\": patternValidator,\n  \"time\": timeValidator,\n  \"url\": urlValidator,\n  \"json\": jsonValidator,\n  \"greaterThan\": greaterThanValidator,\n  \"greaterThanEqualTo\": greaterThanEqualToValidator,\n  \"lessThan\": lessThanValidator,\n  \"lessThanEqualTo\": lessThanEqualToValidator,\n  \"choice\": choiceValidator,\n  \"different\": differentValidator,\n  \"numeric\": numericValidator,\n  \"even\": evenValidator,\n  \"odd\": oddValidator,\n  \"factor\": factorValidator,\n  \"leapYear\": leapYearValidator,\n  \"allOf\": allOfValidator,\n  \"oneOf\": oneOfValidator,\n  \"noneOf\": noneOfValidator,\n  \"mac\": macValidator,\n  \"ascii\": asciiValidator,\n  \"dataUri\": dataUriValidator,\n  \"port\": portValidator,\n  \"latLong\": latLongValidator,\n  \"extension\": extensionValidator,\n  \"fileSize\": fileSizeValidator,\n  \"endsWith\": endsWithValidator,\n  \"startsWith\": startsWithValidator,\n  \"primeNumber\": primeNumberValidator,\n  \"latitude\": latitudeValidator,\n  \"longitude\": longitudeValidator,\n  \"compose\": composeValidator,\n  \"rule\": ruleValidator,\n  \"file\": fileValidator,\n  \"unique\": uniqueValidator,\n  \"image\": imageValidator,\n  \"notEmpty\": notEmptyValidator,\n  \"ip\": ipValidator,\n  \"cusip\": cusipValidator,\n  \"grid\": gridValidator,\n  \"date\": dateValidator,\n  \"minTime\": minTimeValidator,\n  \"maxTime\": maxTimeValidator,\n  \"requiredTrue\": requiredTrueValidator,\n  \"mask\": maskValidator,\n  \"iban\": ibanValidator\n};\n\nfunction baseAsyncValidator(configModel, validatorName) {\n  return control => {\n    configModel = configModel || {};\n\n    if (configModel.validatorConfig) {\n      if (FormProvider.ProcessRule(control, configModel)) {\n        return configModel.validatorConfig.pipe(map(resolveConfig(configModel, validatorName, control)));\n      }\n\n      return of(null);\n    } else return of(resolveConfig(configModel, validatorName, control)(configModel));\n  };\n}\n\nfunction resolveConfig(configModel, validatorName, control) {\n  return config => {\n    let configClone = Object.assign(Object.assign(Object.assign({}, configModel), config), {\n      expressionProcessed: true\n    });\n    return APP_VALIDATORS[validatorName](configClone)(control);\n  };\n}\n\nfunction alpha(config) {\n  return baseDecoratorFunction(AnnotationTypes.alpha, config);\n}\n\nfunction alphaAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.alpha, [baseAsyncValidator(config, AnnotationTypes.alpha)], true);\n}\n\nfunction alphaNumeric(config) {\n  return baseDecoratorFunction(AnnotationTypes.alphaNumeric, config);\n}\n\nfunction alphaNumericAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.alphaNumeric, [baseAsyncValidator(config, AnnotationTypes.alphaNumeric)], true);\n}\n\nfunction compare(config) {\n  return baseDecoratorFunction(AnnotationTypes.compare, config);\n}\n\nfunction contains(config) {\n  return baseDecoratorFunction(AnnotationTypes.contains, config);\n}\n\nfunction containsAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.contains, [baseAsyncValidator(config, AnnotationTypes.contains)], true);\n}\n\nfunction creditCard(config) {\n  return baseDecoratorFunction(AnnotationTypes.creditCard, config);\n}\n\nfunction creditCardAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.creditCard, [baseAsyncValidator(config, AnnotationTypes.creditCard)], true);\n}\n\nfunction digit(config) {\n  return baseDecoratorFunction(AnnotationTypes.digit, config);\n}\n\nfunction email(config) {\n  return baseDecoratorFunction(AnnotationTypes.email, config);\n}\n\nfunction hexColor(config) {\n  return baseDecoratorFunction(AnnotationTypes.hexColor, config);\n}\n\nfunction lowerCase(config) {\n  return baseDecoratorFunction(AnnotationTypes.lowerCase, config);\n}\n\nfunction maxDate(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxDate, config);\n}\n\nfunction maxDateAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxDate, [baseAsyncValidator(config, AnnotationTypes.maxDate)], true);\n}\n\nfunction maxLength(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxLength, config);\n}\n\nfunction maxLengthAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxLength, [baseAsyncValidator(config, AnnotationTypes.maxLength)], true);\n}\n\nfunction minDate(config) {\n  return baseDecoratorFunction(AnnotationTypes.minDate, config);\n}\n\nfunction minDateAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.minDate, [baseAsyncValidator(config, AnnotationTypes.minDate)], true);\n}\n\nfunction maxNumber(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxNumber, config);\n}\n\nfunction maxNumberAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxNumber, [baseAsyncValidator(config, AnnotationTypes.maxNumber)], true);\n}\n\nfunction minLength(config) {\n  return baseDecoratorFunction(AnnotationTypes.minLength, config);\n}\n\nfunction minLengthAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.minLength, [baseAsyncValidator(config, AnnotationTypes.minLength)], true);\n}\n\nfunction minNumber(config) {\n  return baseDecoratorFunction(AnnotationTypes.minNumber, config);\n}\n\nfunction minNumberAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.minNumber, [baseAsyncValidator(config, AnnotationTypes.minNumber)], true);\n}\n\nfunction password(config) {\n  return baseDecoratorFunction(AnnotationTypes.password, config);\n}\n\nfunction passwordAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.password, [baseAsyncValidator(config, AnnotationTypes.password)], true);\n}\n\nfunction pattern(config) {\n  return baseDecoratorFunction(AnnotationTypes.pattern, config);\n}\n\nfunction patternAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.pattern, [baseAsyncValidator(config, AnnotationTypes.pattern)], true);\n}\n\nfunction propArray(entity, config) {\n  return function (target, propertyKey, parameterIndex) {\n    var propertyInfo = {\n      name: propertyKey,\n      propertyType: ARRAY_PROPERTY,\n      entity: entity,\n      dataPropertyName: config ? config.name : undefined,\n      entityProvider: config ? config.entityProvider : undefined,\n      arrayConfig: config ? {\n        allowMaxIndex: config.allowMaxIndex,\n        messageKey: config.messageKey,\n        createBlank: config.createBlank\n      } : undefined\n    };\n    defaultContainer.addProperty(target.constructor, propertyInfo);\n  };\n}\n\nfunction propObject(entity, config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.initPropertyObject(propertyKey, OBJECT_PROPERTY, entity, target, config);\n  };\n}\n\nfunction prop(config) {\n  return function (target, propertyKey, parameterIndex) {\n    var propertyInfo = {\n      name: propertyKey,\n      propertyType: PROPERTY,\n      dataPropertyName: config ? config.name : undefined,\n      defaultValue: config ? config.defaultValue : undefined,\n      ignore: config ? config.ignore : undefined,\n      isPrimaryKey: config ? config.isPrimaryKey : undefined,\n      messageNexus: config ? config.messageNexus : undefined\n    };\n    defaultContainer.addProperty(target.constructor, propertyInfo);\n  };\n}\n\nfunction range(config) {\n  return baseDecoratorFunction(AnnotationTypes.range, config);\n}\n\nfunction rangeAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.range, [baseAsyncValidator(config, AnnotationTypes.range)], true);\n}\n\nfunction required(config) {\n  return baseDecoratorFunction(AnnotationTypes.required, config);\n}\n\nfunction upperCase(config) {\n  return baseDecoratorFunction(AnnotationTypes.upperCase, config);\n}\n\nfunction time(config) {\n  return baseDecoratorFunction(AnnotationTypes.time, config);\n}\n\nfunction timeAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.time, [baseAsyncValidator(config, AnnotationTypes.time)], true);\n}\n\nfunction url(config) {\n  return baseDecoratorFunction(AnnotationTypes.url, config);\n}\n\nfunction urlAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.url, [baseAsyncValidator(config, AnnotationTypes.url)], true);\n}\n\nfunction json(config) {\n  return baseDecoratorFunction(AnnotationTypes.json, config);\n}\n\nfunction greaterThan(config) {\n  return baseDecoratorFunction(AnnotationTypes.greaterThan, config);\n}\n\nfunction greaterThanAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.greaterThan, [baseAsyncValidator(config, AnnotationTypes.greaterThan)], true);\n}\n\nfunction greaterThanEqualTo(config) {\n  return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, config);\n}\n\nfunction greaterThanEqualToAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo)], true);\n}\n\nfunction lessThanEqualTo(config) {\n  return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, config);\n}\n\nfunction lessThanEqualToAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo)], true);\n}\n\nfunction lessThan(config) {\n  return baseDecoratorFunction(AnnotationTypes.lessThan, config);\n}\n\nfunction lessThanAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.lessThan, [baseAsyncValidator(config, AnnotationTypes.lessThan)], true);\n}\n\nfunction choice(config) {\n  return baseDecoratorFunction(AnnotationTypes.choice, config);\n}\n\nfunction choiceAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.choice, [baseAsyncValidator(config, AnnotationTypes.choice)], true);\n}\n\nfunction different(config) {\n  return baseDecoratorFunction(AnnotationTypes.different, config);\n}\n\nfunction numeric(config) {\n  return baseDecoratorFunction(AnnotationTypes.numeric, config);\n}\n\nfunction numericAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.numeric, [baseAsyncValidator(config, AnnotationTypes.numeric)], true);\n}\n\nfunction even(config) {\n  return baseDecoratorFunction(AnnotationTypes.even, config);\n}\n\nfunction odd(config) {\n  return baseDecoratorFunction(AnnotationTypes.odd, config);\n}\n\nfunction factor(config) {\n  return baseDecoratorFunction(AnnotationTypes.factor, config);\n}\n\nfunction factorAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.factor, [baseAsyncValidator(config, AnnotationTypes.factor)], true);\n}\n\nfunction leapYear(config) {\n  return baseDecoratorFunction(AnnotationTypes.leapYear, config);\n}\n\nfunction allOf(config) {\n  return baseDecoratorFunction(AnnotationTypes.allOf, config);\n}\n\nfunction allOfAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.allOf, [baseAsyncValidator(config, AnnotationTypes.allOf)], true);\n}\n\nfunction oneOf(config) {\n  return baseDecoratorFunction(AnnotationTypes.oneOf, config);\n}\n\nfunction oneOfAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.oneOf, [baseAsyncValidator(config, AnnotationTypes.oneOf)], true);\n}\n\nfunction noneOf(config) {\n  return baseDecoratorFunction(AnnotationTypes.noneOf, config);\n}\n\nfunction noneOfAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.noneOf, [baseAsyncValidator(config, AnnotationTypes.noneOf)], true);\n}\n\nfunction mac(config) {\n  return baseDecoratorFunction(AnnotationTypes.mac, config);\n}\n\nfunction ascii(config) {\n  return baseDecoratorFunction(AnnotationTypes.ascii, config);\n}\n\nfunction dataUri(config) {\n  return baseDecoratorFunction(AnnotationTypes.dataUri, config);\n}\n\nfunction port(config) {\n  return baseDecoratorFunction(AnnotationTypes.port, config);\n}\n\nfunction latLong(config) {\n  return baseDecoratorFunction(AnnotationTypes.latLong, config);\n}\n\nfunction extension(config) {\n  return baseDecoratorFunction(AnnotationTypes.extension, config);\n}\n\nfunction extensionAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.extension, [baseAsyncValidator(config, AnnotationTypes.extension)], true);\n}\n\nfunction fileSize(config) {\n  return baseDecoratorFunction(AnnotationTypes.fileSize, config);\n}\n\nfunction fileSizeAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.fileSize, [baseAsyncValidator(config, AnnotationTypes.fileSize)], true);\n}\n\nfunction endsWith(config) {\n  return baseDecoratorFunction(AnnotationTypes.endsWith, config);\n}\n\nfunction endsWithAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.endsWith, [baseAsyncValidator(config, AnnotationTypes.endsWith)], true);\n}\n\nfunction startsWith(config) {\n  return baseDecoratorFunction(AnnotationTypes.startsWith, config);\n}\n\nfunction startsWithAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.startsWith, [baseAsyncValidator(config, AnnotationTypes.startsWith)], true);\n}\n\nfunction primeNumber(config) {\n  return baseDecoratorFunction(AnnotationTypes.primeNumber, config);\n}\n\nfunction latitude(config) {\n  return baseDecoratorFunction(AnnotationTypes.latitude, config);\n}\n\nfunction longitude(config) {\n  return baseDecoratorFunction(AnnotationTypes.longitude, config);\n}\n\nfunction rule(config) {\n  return baseDecoratorFunction(AnnotationTypes.rule, config);\n}\n\nfunction file(config) {\n  return baseDecoratorFunction(AnnotationTypes.file, config);\n}\n\nfunction fileAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.file, [baseAsyncValidator(config, AnnotationTypes.file)], true);\n}\n\nfunction custom(config) {\n  return baseDecoratorFunction(AnnotationTypes.custom, config);\n}\n\nfunction customAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.custom, [baseAsyncValidator(config, AnnotationTypes.custom)], true);\n}\n\nfunction unique(config) {\n  return baseDecoratorFunction(AnnotationTypes.unique, config);\n}\n\nfunction image(config) {\n  return baseDecoratorFunction(AnnotationTypes.image, config);\n}\n\nfunction imageAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.image, [baseAsyncValidator(config, AnnotationTypes.image)], true);\n}\n\nfunction notEmpty(config) {\n  return baseDecoratorFunction(AnnotationTypes.notEmpty, config);\n}\n\nfunction async(validators) {\n  return baseDecoratorFunction(AnnotationTypes.async, validators, true);\n}\n\nfunction cusip(config) {\n  return baseDecoratorFunction(AnnotationTypes.cusip, config);\n}\n\nfunction grid(config) {\n  return baseDecoratorFunction(AnnotationTypes.grid, config);\n}\n\nfunction date(config) {\n  return baseDecoratorFunction(AnnotationTypes.date, config);\n}\n\nfunction dateAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.date, [baseAsyncValidator(config, AnnotationTypes.date)], true);\n}\n\nfunction disable(config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.disabled);\n  };\n}\n\nfunction error(config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.error);\n  };\n}\n\nfunction and(config) {\n  return baseDecoratorFunction(AnnotationTypes.and, config);\n}\n\nfunction or(config) {\n  return baseDecoratorFunction(AnnotationTypes.or, config);\n}\n\nfunction not(config) {\n  return baseDecoratorFunction(AnnotationTypes.not, config);\n}\n\nfunction trim() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.trim);\n  };\n}\n\nfunction ltrim() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.ltrim);\n  };\n}\n\nfunction rtrim() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.rtrim);\n  };\n}\n\nfunction blacklist(chars) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.blacklist, chars);\n  };\n}\n\nfunction stripLow(keepNewLines) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.stripLow, keepNewLines);\n  };\n}\n\nfunction toBoolean(strict) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toBoolean, strict);\n  };\n}\n\nfunction toDouble() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDouble);\n  };\n}\n\nfunction toFloat() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toFloat);\n  };\n}\n\nfunction toInt(radix) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toInt, radix);\n  };\n}\n\nfunction toString() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.string);\n  };\n}\n\nfunction whitelist(chars) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.whitelist, chars);\n  };\n}\n\nfunction toDate(config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDate, config);\n  };\n}\n\nfunction escape() {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.escape);\n  };\n}\n\nfunction prefix(text) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.prefix, text);\n  };\n}\n\nfunction suffix(text) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.suffix, text);\n  };\n}\n\nfunction model(config) {\n  return function (target) {\n    defaultContainer.addPropsConfig(target, config);\n  };\n}\n\nfunction sanitize(config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.sanitize, config);\n  };\n}\n\nfunction elementClass(config) {\n  return function (target, propertyKey, parameterIndex) {\n    defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.elementClass);\n  };\n}\n\nfunction minTime(config) {\n  return baseDecoratorFunction(AnnotationTypes.minTime, config);\n}\n\nfunction minTimeAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.minTime, [baseAsyncValidator(config, AnnotationTypes.minTime)], true);\n}\n\nfunction maxTime(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxTime, config);\n}\n\nfunction maxTimeAsync(config) {\n  return baseDecoratorFunction(AnnotationTypes.maxTime, [baseAsyncValidator(config, AnnotationTypes.maxTime)], true);\n}\n\nfunction compose(config) {\n  return baseDecoratorFunction(AnnotationTypes.compose, config);\n}\n\nfunction requiredTrue(config) {\n  return baseDecoratorFunction(AnnotationTypes.requiredTrue, config);\n}\n\nfunction mask(config) {\n  return baseDecoratorFunction(AnnotationTypes.mask, config);\n}\n\nfunction updateOn(config) {\n  return baseDecoratorFunction(AnnotationTypes.updateOn, config);\n}\n\nclass HtmlControlTemplateDirective {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nHtmlControlTemplateDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: HtmlControlTemplateDirective,\n  deps: [{\n    token: i0.TemplateRef\n  }],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nHtmlControlTemplateDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: HtmlControlTemplateDirective,\n  selectors: [[\"\", \"htmlControlTemplate\", \"\"]],\n  inputs: {\n    type: [\"htmlControlTemplate\", \"type\"]\n  }\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: HtmlControlTemplateDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[htmlControlTemplate]'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  },\n  propDecorators: {\n    type: [{\n      type: Input,\n      args: ['htmlControlTemplate']\n    }]\n  }\n});\n\nclass BaseDirective {\n  applyValidations(controls, model = null) {\n    if (this.model) {\n      let modelConfig = defaultContainer.get(model || this.model.constructor);\n\n      if (modelConfig) {\n        modelConfig.properties.forEach(property => {\n          if (controls[property.name]) {\n            switch (property.propertyType) {\n              case PROPERTY:\n                this.setValidatorConfig(controls[property.name], modelConfig, property);\n                break;\n\n              case OBJECT_PROPERTY:\n                this.applyValidations(controls[property.name].controls, property.entity);\n                break;\n            }\n          }\n        });\n      }\n    }\n  }\n\n  setValidatorConfig(control, modelConfig, property) {\n    let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);\n    annotations.forEach(annotation => {\n      if (!control[TEMPLATE_VALIDATION_CONFIG]) control[TEMPLATE_VALIDATION_CONFIG] = {};\n      ApplicationUtil.configureControl(control, annotation.config ? annotation.config : \"\", annotation.annotationType);\n    });\n  }\n\n}\n\nBaseDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: BaseDirective,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nBaseDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: BaseDirective,\n  inputs: {\n    model: \"model\"\n  }\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: BaseDirective,\n  decorators: [{\n    type: Directive\n  }],\n  propDecorators: {\n    model: [{\n      type: Input\n    }]\n  }\n});\nconst DISABLED_EXPRESSION = \"disableExpression\";\n\nfunction conditionalChangeValidator(conditionalValidationProps) {\n  var timeOuts = [];\n  var oldValue = undefined;\n\n  var setTimeOut = (control, config) => {\n    if (control[DISABLED_EXPRESSION]) runDisabledExpression(control, config);\n    var timeOut = setTimeout(t => {\n      clearTimeout(timeOut);\n      control.updateValueAndValidity({\n        emitEvent: false\n      });\n    }, 100);\n  };\n\n  return control => {\n    let value = control.value;\n\n    if (control.parent && oldValue != value) {\n      const rootFormGroup = ApplicationUtil.getRootFormGroup(control);\n      const parentFormGroup = control.parent;\n      oldValue = value;\n      timeOuts = [];\n      let controlName = ApplicationUtil.getFormControlName(control);\n      let disabledConfig = {\n        [controlName]: value\n      };\n      conditionalValidationProps.forEach(t => {\n        let a = control;\n\n        if (t.indexOf(\"[]\") != -1) {\n          var splitText = t.split(\"[]\");\n          var formArray = rootFormGroup.get([splitText[0]]);\n          if (formArray) formArray.controls.forEach(formGroup => {\n            var abstractControl = formGroup.get(splitText[1]);\n\n            if (abstractControl) {\n              setTimeOut(abstractControl, disabledConfig);\n            }\n          });\n        } else {\n          let splitText = t.split('.');\n\n          if (splitText.length > 1) {\n            var control = null;\n            t.split('.').forEach((name, index) => {\n              control = index == 0 ? rootFormGroup.controls[name] : control.controls[name];\n            });\n          } else {\n            control = parentFormGroup.controls[t];\n          }\n\n          if (control) {\n            setTimeOut(control, disabledConfig);\n          }\n        }\n      });\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction runDisabledExpression(control, config) {\n  let isDisabled = FormProvider.ProcessRule(control, {\n    conditionalExpression: control[DISABLED_EXPRESSION],\n    disableConfig: config\n  });\n  if (isDisabled && !control.disabled) control.disable();else if (control.disabled) control.enable();\n}\n\nclass RxwebFormDirective extends BaseDirective {\n  constructor() {\n    super(...arguments);\n    this.clearTimeoutNumber = 0;\n    this.validationRule = {};\n  }\n\n  ngAfterContentInit() {\n    if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {\n      this.expressionProcessor(this.formGroup.controls);\n      this.setConditionalValidator(this.formGroup.controls);\n    } else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {\n      this.expressionProcessor(this.formGroup.controls);\n      this.setConditionalValidator(this.formGroup.controls);\n    } else if (this.ngForm) {\n      this.configureModelValidations();\n    }\n  }\n\n  configureModelValidations() {\n    this.clearTimeoutNumber = setTimeout(() => {\n      clearTimeout(this.clearTimeoutNumber);\n      this.applyValidations(this.ngForm.form.controls);\n      this.expressionProcessor(this.ngForm.form.controls);\n      this.setConditionalValidator(this.ngForm.form.controls);\n      this.updateValueAndValidity(this.ngForm.form.controls);\n    }, 500);\n  }\n\n  updateValueAndValidity(controls) {\n    Object.keys(controls).forEach(key => {\n      if (controls[key] instanceof FormGroup) this.updateValueAndValidity(controls[key].controls);else if (controls[key] instanceof FormArray) this.updateValueAndValidity(controls[key].controls);else controls[key].updateValueAndValidity();\n    });\n  }\n\n  expressionProcessor(controls, rootFieldName = \"\") {\n    Object.keys(controls).forEach(fieldName => {\n      let formControl = controls[fieldName];\n\n      if (formControl.validatorConfig) {\n        Object.keys(AnnotationTypes).forEach(validatorName => {\n          if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {\n            formControl[\"disableExpression\"] = formControl.validatorConfig[validatorName].disableExpression;\n            let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);\n            columns.forEach(t => {\n              defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\n            });\n          }\n\n          if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {\n            let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);\n            columns.forEach(t => {\n              defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\n            });\n          }\n\n          if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {\n            let columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);\n            columns.forEach(t => {\n              defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\n            });\n          }\n\n          if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {\n            Object.keys(formControl.validatorConfig[validatorName].validation).forEach(t => {\n              if (typeof formControl.validatorConfig[validatorName].validation[t] !== \"boolean\") defaultContainer.setLogicalConditional(this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);\n            });\n          } else if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime || validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName || (validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName)) {\n            defaultContainer.setConditionalValueProp(this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);\n          }\n        });\n      } else if (formControl instanceof FormGroup) {\n        this.expressionProcessor(formControl.controls, `${fieldName}.`);\n      } else if (formControl instanceof FormArray) {\n        if (formControl.controls) formControl.controls.forEach((t, i) => {\n          if (t.controls) this.expressionProcessor(t.controls, `${fieldName}[]`);\n        });\n      }\n    });\n  }\n\n  setConditionalValidator(controls) {\n    Object.keys(controls).forEach(fieldName => {\n      if (this.validationRule.conditionalValidationProps && this.validationRule.conditionalValidationProps[fieldName]) {\n        controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(this.validationRule.conditionalValidationProps[fieldName]);\n      } else if (controls[fieldName] instanceof FormGroup && this.validationRule.conditionalObjectProps) {\n        var fields = this.validationRule.conditionalObjectProps.filter(t => t.objectPropName == fieldName);\n        let nestedFormGroup = controls[fieldName];\n        let propWiseConditionalControls = {};\n        fields.forEach(x => {\n          if (!propWiseConditionalControls[x.propName]) propWiseConditionalControls[x.propName] = [];\n          propWiseConditionalControls[x.propName].push(x.referencePropName);\n        });\n        Object.keys(propWiseConditionalControls).forEach(key => {\n          nestedFormGroup.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls[key]);\n        });\n      } else if (controls[fieldName] instanceof FormArray) {\n        //fix https://github.com/rxweb/rxweb/issues/274\n        controls[fieldName].controls.forEach((t, i) => {\n          if (t.controls == undefined) this.setConditionalValidator({\n            [i]: t\n          });else this.setConditionalValidator(t.controls);\n        });\n      }\n    });\n  }\n\n  ngOnDestroy() {}\n\n}\n\nRxwebFormDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxwebFormDirective,\n  deps: null,\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nRxwebFormDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: RxwebFormDirective,\n  selectors: [[\"\", \"formGroup\", \"\"], [\"\", \"rxwebForm\", \"\"]],\n  inputs: {\n    formGroup: \"formGroup\",\n    ngForm: [\"rxwebForm\", \"ngForm\"]\n  },\n  features: [i0.ÉµÉµInheritDefinitionFeature]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxwebFormDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[formGroup],[rxwebForm]'\n    }]\n  }],\n  propDecorators: {\n    formGroup: [{\n      type: Input\n    }],\n    ngForm: [{\n      type: Input,\n      args: ['rxwebForm']\n    }]\n  }\n});\n\nclass AsyncValidationDirective {\n  validate(control) {\n    if (this.async) return this.async(control);\n    return of(null);\n  }\n\n}\n\nAsyncValidationDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: AsyncValidationDirective,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nAsyncValidationDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: AsyncValidationDirective,\n  selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControlName\", \"\"], [\"\", \"formControl\", \"\"]],\n  inputs: {\n    async: \"async\"\n  },\n  features: [i0.ÉµÉµProvidersFeature([{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => AsyncValidationDirective),\n    multi: true\n  }])]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: AsyncValidationDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[ngModel],[formControlName],[formControl]',\n      providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: forwardRef(() => AsyncValidationDirective),\n        multi: true\n      }]\n    }]\n  }],\n  propDecorators: {\n    async: [{\n      type: Input\n    }]\n  }\n});\nconst VALIDATOR_CONFIG$1 = \"validatorConfig\";\nconst FILE_VALIDATOR_NAMES = [\"extension\", \"fileSize\", \"file\"];\n\nclass FileControlDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.isProcessed = false;\n    this.validators = [];\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n\n    this.element = elementRef.nativeElement;\n  }\n\n  onChangeCall(element) {\n    let files = element.files;\n    if (this.writeFile) this.onChange(files);else {\n      if (files.length > 0) this.onChange(element.value);else this.onChange(undefined);\n    }\n  }\n\n  writeValue(value) {}\n\n  registerOnChange(invocation) {\n    this.onChange = invocation;\n  }\n\n  registerOnTouched(invocation) {\n    this.onTouched = invocation;\n  }\n\n  set extension(config) {\n    this.pushValidator(FILE_VALIDATOR_NAMES[0], config);\n  }\n\n  set fileSize(config) {\n    this.pushValidator(FILE_VALIDATOR_NAMES[1], config);\n  }\n\n  set file(config) {\n    this.pushValidator(FILE_VALIDATOR_NAMES[2], config);\n  }\n\n  setConfig(control) {\n    FILE_VALIDATOR_NAMES.forEach(t => {\n      if (!this[t] && control[VALIDATOR_CONFIG$1] && control[VALIDATOR_CONFIG$1][t]) this[t] = control[VALIDATOR_CONFIG$1][t];\n    });\n    this.isProcessed = true;\n  }\n\n  pushValidator(validatorName, config) {\n    if (config) this.validators.push(APP_VALIDATORS[validatorName](config));\n  }\n\n  validate(control) {\n    if (!this.isProcessed) this.setConfig(control);\n    var result = null;\n\n    for (var validator of this.validators) {\n      result = validator(control, this.element.files);\n      if (result) break;\n    }\n\n    return result;\n  }\n\n}\n\nFileControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: FileControlDirective,\n  deps: [{\n    token: i0.ElementRef\n  }],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nFileControlDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: FileControlDirective,\n  selectors: [[\"input\", \"type\", \"file\"]],\n  hostBindings: function FileControlDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ÉµÉµlistener(\"change\", function FileControlDirective_change_HostBindingHandler($event) {\n        return ctx.onChangeCall($event.target);\n      })(\"blur\", function FileControlDirective_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      });\n    }\n  },\n  inputs: {\n    writeFile: \"writeFile\",\n    extension: \"extension\",\n    fileSize: \"fileSize\",\n    file: \"file\"\n  },\n  features: [i0.ÉµÉµProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: FileControlDirective,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => FileControlDirective),\n    multi: true\n  }])]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: FileControlDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: \"input[type=file]\",\n      host: {\n        \"(change)\": \"onChangeCall($event.target)\",\n        \"(blur)\": \"onTouched()\"\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: FileControlDirective,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => FileControlDirective),\n        multi: true\n      }]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  },\n  propDecorators: {\n    writeFile: [{\n      type: Input\n    }],\n    extension: [{\n      type: Input\n    }],\n    fileSize: [{\n      type: Input\n    }],\n    file: [{\n      type: Input\n    }]\n  }\n});\nconst VALIDATOR_CONFIG = \"validatorConfig\";\n\nclass ImageFileControlDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.isProcessed = false;\n    this.element = elementRef.nativeElement;\n  }\n\n  set image(config) {\n    this.imageValidation = APP_VALIDATORS.image(config);\n  }\n\n  setConfig(control) {\n    let image = \"image\";\n    if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image]) this[image] = control[VALIDATOR_CONFIG][image];\n    this.isProcessed = true;\n  }\n\n  validate(control) {\n    if (!this.isProcessed) this.setConfig(control);\n\n    if (this.imageValidation) {\n      return this.imageValidation(control, this.element.files);\n    }\n\n    return of(null);\n  }\n\n}\n\nImageFileControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ImageFileControlDirective,\n  deps: [{\n    token: i0.ElementRef\n  }],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nImageFileControlDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: ImageFileControlDirective,\n  selectors: [[\"input\", \"type\", \"file\"]],\n  inputs: {\n    image: \"image\"\n  },\n  features: [i0.ÉµÉµProvidersFeature([{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => ImageFileControlDirective),\n    multi: true\n  }])]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ImageFileControlDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: \"input[type=file]\",\n      providers: [{\n        provide: NG_ASYNC_VALIDATORS,\n        useExisting: forwardRef(() => ImageFileControlDirective),\n        multi: true\n      }]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  },\n  propDecorators: {\n    image: [{\n      type: Input\n    }]\n  }\n});\n\nclass ControlExpressionProcess {\n  constructor() {\n    this.controlConfig = {};\n    this.isProcessed = false;\n  }\n\n  setModelConfig(control) {\n    this.isProcessed = true;\n\n    if (this.controlConfig && this.controlConfig.validatorConfig) {\n      control[VALIDATOR_CONFIG$2] = this.controlConfig.validatorConfig;\n      this.controlConfig = undefined;\n    }\n  }\n\n}\n\nControlExpressionProcess.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ControlExpressionProcess,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nControlExpressionProcess.Éµdir = i0.ÉµÉµdefineDirective({\n  type: ControlExpressionProcess,\n  inputs: {\n    name: \"name\",\n    formControlName: \"formControlName\"\n  }\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ControlExpressionProcess,\n  decorators: [{\n    type: Directive\n  }],\n  propDecorators: {\n    name: [{\n      type: Input\n    }],\n    formControlName: [{\n      type: Input\n    }]\n  }\n});\n\nclass BaseValidator extends ControlExpressionProcess {\n  constructor() {\n    super(...arguments);\n    this.validators = [];\n  }\n\n  validation(control) {\n    let result = null;\n\n    for (let validator of this.validators) {\n      result = validator(control);\n      if (result) break;\n    }\n\n    if (!result && this.maskProvider) result = this.maskProvider.validate();\n    return result;\n  }\n\n  setEventName() {\n    var eventName = '';\n\n    switch (this.element.tagName) {\n      case INPUT:\n      case TEXTAREA:\n        eventName = this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE ? CHANGE : INPUT;\n        break;\n\n      case SELECT:\n        eventName = CHANGE;\n        break;\n    }\n\n    this.eventName = eventName.toLowerCase();\n  }\n\n}\n\nBaseValidator.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: BaseValidator,\n  deps: null,\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nBaseValidator.Éµdir = i0.ÉµÉµdefineDirective({\n  type: BaseValidator,\n  inputs: {\n    formControl: \"formControl\"\n  },\n  features: [i0.ÉµÉµInheritDefinitionFeature]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: BaseValidator,\n  decorators: [{\n    type: Directive\n  }],\n  propDecorators: {\n    formControl: [{\n      type: Input\n    }]\n  }\n});\nconst SIMPLE_EMAIL_VALIDATION = \"simple-email-validation\";\nconst ADVANCED_EMAIL_VALIDATION = \"advanced-email-validation\";\n\nclass MaskProvider {\n  constructor(input, mask, renderer, formControl, config) {\n    this.input = input;\n    this.mask = mask;\n    this.renderer = renderer;\n    this.formControl = formControl;\n    this.config = config;\n    this.eventListeners = [];\n    this.oldValue = '';\n    this.type = 'text';\n    this.slotChar = '_';\n    this.autoClear = false;\n    this.isInvalid = false;\n    this.internalProcess = false;\n    this.bind();\n  }\n\n  bind() {\n    if (RegexValidator.isNotBlank(this.formControl.value)) this.input.value = this.formControl.value;\n    this.tests = [];\n    this.partialPosition = this.mask.length;\n    this.len = this.mask.length;\n    this.firstNonMaskPos = null;\n    this.defs = {\n      '9': '[0-9]',\n      'a': '[A-Za-z]',\n      '*': '[A-Za-z0-9]'\n    };\n    this.androidChrome = false;\n    let maskTokens = this.mask.split('');\n\n    for (let i = 0; i < maskTokens.length; i++) {\n      let c = maskTokens[i];\n\n      if (c == '?') {\n        this.len--;\n        this.partialPosition = i;\n      } else if (this.defs[c]) {\n        this.tests.push(new RegExp(this.defs[c]));\n\n        if (this.firstNonMaskPos === null) {\n          this.firstNonMaskPos = this.tests.length - 1;\n        }\n\n        if (i < this.partialPosition) {\n          this.lastRequiredNonMaskPos = this.tests.length - 1;\n        }\n      } else {\n        this.tests.push(null);\n      }\n    }\n\n    this.minLength = this.config.minLength ? this.lastRequiredNonMaskPos - (this.lastRequiredNonMaskPos - this.config.minLength) : this.lastRequiredNonMaskPos;\n    this.buffer = [];\n\n    for (let i = 0; i < maskTokens.length; i++) {\n      let c = maskTokens[i];\n\n      if (c != '?') {\n        if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));else this.buffer.push(c);\n      }\n    }\n\n    this.defaultBuffer = this.buffer.join('');\n    this.focusText = this.input.value;\n    this.bindEvents();\n    this.checkVal();\n  }\n\n  bindEvents() {\n    this.eventListeners.push(this.renderer.listen(this.input, FOCUS, this.onFocus.bind(this)));\n    this.eventListeners.push(this.renderer.listen(this.input, BLUR, this.onBlur.bind(this)));\n    this.eventListeners.push(this.renderer.listen(this.input, KEY_DOWN, this.onKeyDown.bind(this)));\n    this.eventListeners.push(this.renderer.listen(this.input, KEY_PRESS, this.onKeyPress.bind(this)));\n    this.eventListeners.push(this.renderer.listen(this.input, \"input\", this.onInput.bind(this)));\n    this.eventListeners.push(this.renderer.listen(this.input, PASTE, this.handleInputChange.bind(this)));\n  }\n\n  validate() {\n    if (this.input.value && this.oldValue != this.input.value) {\n      this.checkVal(true);\n      this.isCompleted(null, true);\n      this.oldValue = this.input.value;\n    }\n\n    let config = getConfigObject(this.config, this.formControl);\n\n    if (RegexValidator.isNotBlank(this.getUnmaskedValue()) && FormProvider.ProcessRule(this.formControl, config)) {\n      if (this.isInvalid) {\n        return ObjectMaker.toJson(AnnotationTypes.mask, config, [this.formControl.value]);\n      }\n    }\n\n    return ObjectMaker.null();\n  }\n\n  writeValue(value) {\n    this.value = value;\n\n    if (this.input) {\n      if (this.value == undefined || this.value == null) {\n        this.input.value = '';\n      }\n\n      this.checkVal();\n    }\n\n    this.updateFilledState();\n  }\n\n  caret(first, last) {\n    let range, begin, end;\n\n    if (!this.input.offsetParent || this.input !== document.activeElement) {\n      return;\n    }\n\n    if (typeof first == 'number') {\n      begin = first;\n      end = typeof last === 'number' ? last : begin;\n\n      if (this.input.setSelectionRange) {\n        this.input.setSelectionRange(begin, end);\n      } else if (this.input['createTextRange']) {\n        range = this.input['createTextRange']();\n        range.collapse(true);\n        range.moveEnd('character', end);\n        range.moveStart('character', begin);\n        range.select();\n      }\n    } else {\n      if (this.input.setSelectionRange) {\n        begin = this.input.selectionStart;\n        end = this.input.selectionEnd;\n      } else if (document['selection'] && document['selection'].createRange) {\n        range = document['selection'].createRange();\n        begin = 0 - range.duplicate().moveStart('character', -100000);\n        end = begin + range.text.length;\n      }\n\n      return {\n        begin: begin,\n        end: end\n      };\n    }\n  }\n\n  isCompleted(lastRequiredNonMaskPos, isNotRunValidator) {\n    let completed;\n    lastRequiredNonMaskPos = lastRequiredNonMaskPos || this.lastRequiredNonMaskPos;\n\n    for (let i = this.firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {\n      if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n        return false;\n      }\n    }\n\n    this.isInvalid = false;\n    if (!isNotRunValidator) this.formControl.updateValueAndValidity();\n    return true;\n  }\n\n  getPlaceholder(i) {\n    if (i < this.slotChar.length) {\n      return this.slotChar.charAt(i);\n    }\n\n    return this.slotChar.charAt(0);\n  }\n\n  seekNext(pos) {\n    while (++pos < this.len && !this.tests[pos]);\n\n    return pos;\n  }\n\n  seekPrev(pos) {\n    while (--pos >= 0 && !this.tests[pos]);\n\n    return pos;\n  }\n\n  shiftL(begin, end) {\n    let i, j;\n\n    if (begin < 0) {\n      return;\n    }\n\n    for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n      if (this.tests[i]) {\n        if (j < this.len && this.tests[i].test(this.buffer[j])) {\n          this.buffer[i] = this.buffer[j];\n          this.buffer[j] = this.getPlaceholder(j);\n        } else {\n          break;\n        }\n\n        j = this.seekNext(j);\n      }\n    }\n\n    this.writeBuffer();\n    this.caret(Math.max(this.firstNonMaskPos, begin));\n  }\n\n  shiftR(pos) {\n    let i, c, j, t;\n\n    for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n      if (this.tests[i]) {\n        j = this.seekNext(i);\n        t = this.buffer[i];\n        this.buffer[i] = c;\n\n        if (j < this.len && this.tests[j].test(t)) {\n          c = t;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  handleAndroidInput(e) {\n    var curVal = this.input.value;\n    var pos = this.caret();\n\n    if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n      this.checkVal(true);\n\n      while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n\n      if (pos.begin === 0) {\n        while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n      }\n\n      this.caret(pos.begin, pos.begin);\n    } else {\n      var pos2 = this.checkVal(true);\n\n      while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;\n\n      this.caret(pos.begin, pos.begin);\n    }\n\n    if (this.isCompleted()) {\n      this.isInvalid = false;\n    } else {\n      this.isInvalid = true;\n      this.formControl.updateValueAndValidity();\n    }\n  }\n\n  onBlur(e) {\n    this.focus = false;\n    this.checkVal();\n    this.updateModel(e);\n    this.updateFilledState();\n\n    if (this.input.value != this.focusText) {\n      let event = document.createEvent('HTMLEvents');\n      event.initEvent('change', true, false);\n      this.input.dispatchEvent(event);\n      let maskedValue = this.input.value;\n      this.formControl.setValue(this.config.valueWithMask ? maskedValue : this.getUnmaskedValue());\n      this.input.value = maskedValue;\n    }\n  }\n\n  onKeyDown(e) {\n    let k = e.which || e.keyCode,\n        pos,\n        begin,\n        end;\n    let iPhone = false;\n    this.oldVal = this.input.value;\n    let controlValid = this.config.minLength ? this.isCompleted(this.minLength + 1) : false;\n\n    if (k === 8 || k === 46 || iPhone && k === 127) {\n      pos = this.caret();\n      begin = pos.begin;\n      end = pos.end;\n\n      if (end - begin === 0) {\n        begin = k !== 46 ? this.seekPrev(begin) : end = this.seekNext(begin - 1);\n        end = k === 46 ? this.seekNext(end) : end;\n      }\n\n      this.clearBuffer(begin, end);\n      this.shiftL(begin, end - 1);\n      this.setControlValue(e, false, controlValid);\n      this.updateModel(e);\n      e.preventDefault();\n    } else if (k === 13) {\n      this.onBlur(e);\n      this.setControlValue(e, false, controlValid);\n      this.updateModel(e);\n    } else if (k === 27) {\n      this.input.value = this.focusText;\n      this.caret(0, this.checkVal());\n      this.updateModel(e);\n      this.setControlValue(e, false, controlValid);\n      e.preventDefault();\n    }\n  }\n\n  onKeyPress(e) {\n    var k = e.which || e.keyCode,\n        pos = this.caret(),\n        p,\n        c,\n        next,\n        completed;\n\n    if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\n      return;\n    } else if (k && k !== 13) {\n      if (pos.end - pos.begin !== 0) {\n        this.clearBuffer(pos.begin, pos.end);\n        this.shiftL(pos.begin, pos.end - 1);\n      }\n\n      p = this.seekNext(pos.begin - 1);\n\n      if (p < this.len) {\n        c = String.fromCharCode(k);\n\n        if (this.tests[p].test(c)) {\n          this.shiftR(p);\n          this.buffer[p] = c;\n          this.writeBuffer();\n          next = this.seekNext(p);\n          this.caret(next);\n\n          if (pos.begin <= this.lastRequiredNonMaskPos) {\n            completed = this.isCompleted();\n          }\n        }\n      }\n\n      e.preventDefault();\n    }\n\n    this.updateModel(e);\n    if (completed === undefined) completed = this.isCompleted();\n    this.setControlValue(e, completed, this.config.minLength ? this.isCompleted(this.minLength) : false);\n  }\n\n  clearBuffer(start, end) {\n    let i;\n\n    for (i = start; i < end && i < this.len; i++) {\n      if (this.tests[i]) {\n        this.buffer[i] = this.getPlaceholder(i);\n      }\n    }\n  }\n\n  writeBuffer() {\n    this.input.value = this.buffer.join('');\n  }\n\n  checkVal(allow) {\n    let test = this.input.value,\n        lastMatch = -1,\n        i,\n        c,\n        pos;\n\n    for (i = 0, pos = 0; i < this.len; i++) {\n      if (this.tests[i]) {\n        this.buffer[i] = this.getPlaceholder(i);\n\n        while (pos++ < test.length) {\n          c = test.charAt(pos - 1);\n\n          if (this.tests[i].test(c)) {\n            this.buffer[i] = c;\n            lastMatch = i;\n            break;\n          }\n        }\n\n        if (pos > test.length) {\n          this.clearBuffer(i + 1, this.len);\n          break;\n        }\n      } else {\n        if (this.buffer[i] === test.charAt(pos)) {\n          pos++;\n        }\n\n        if (i < this.partialPosition) {\n          lastMatch = i;\n        }\n      }\n    }\n\n    if (allow) {\n      this.writeBuffer();\n    } else if (lastMatch + 1 < this.partialPosition && (!this.config.minLength || !(lastMatch >= this.minLength))) {\n      if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n        this.isInvalid = true;\n      } else {\n        this.isInvalid = true;\n        this.writeBuffer();\n      }\n    } else {\n      this.writeBuffer();\n      this.input.value = this.input.value.substring(0, lastMatch + 1);\n    }\n\n    return this.partialPosition ? i : this.firstNonMaskPos;\n  }\n\n  onFocus(event) {\n    this.focus = true;\n    clearTimeout(this.caretTimeoutId);\n    let pos;\n    this.focusText = this.input.value;\n    pos = this.checkVal();\n    this.caretTimeoutId = setTimeout(() => {\n      if (this.input !== document.activeElement) {\n        return;\n      }\n\n      this.writeBuffer();\n\n      if (pos == this.mask.replace(\"?\", \"\").length) {\n        this.caret(0, pos);\n      } else {\n        this.caret(pos);\n      }\n\n      this.updateFilledState();\n    }, 10);\n  }\n\n  onInput(event) {\n    if (this.androidChrome) this.handleAndroidInput(event);else this.handleInputChange(event);\n  }\n\n  setControlValue(e, isValid, isValidControl) {\n    this.isInvalid = isValidControl ? !isValidControl : !isValid;\n    let value = this.input.value;\n    let controlValue = '';\n    if (!this.isInvalid) controlValue = this.config.valueWithMask ? value : this.getUnmaskedValue();\n    this.formControl.setValue(controlValue);\n    this.oldValue = this.input.value = value;\n    if (!isValid) this.onFocus(e);\n  }\n\n  handleInputChange(event) {\n    setTimeout(() => {\n      var pos = this.checkVal(true);\n      this.caret(pos);\n      this.updateModel(event);\n      this.setControlValue(event, this.isCompleted());\n    }, 0);\n  }\n\n  getUnmaskedValue() {\n    let unmaskedBuffer = [];\n\n    for (let i = 0; i < this.buffer.length; i++) {\n      let c = this.buffer[i];\n\n      if (this.tests[i] && c != this.getPlaceholder(i)) {\n        unmaskedBuffer.push(c);\n      }\n    }\n\n    return unmaskedBuffer.join('');\n  }\n\n  updateModel(e) {}\n\n  updateFilledState() {\n    this.filled = this.input && this.input.value != '';\n  }\n\n  onDestroy() {\n    let eventCount = this.eventListeners.length;\n\n    for (var i = 0; i < eventCount; i++) {\n      this.eventListeners[0]();\n      this.eventListeners.splice(0, 1);\n    }\n\n    this.eventListeners = [];\n  }\n\n}\n\nclass DecimalProvider {\n  constructor(decimalPipe, localeId) {\n    this.decimalPipe = decimalPipe;\n    this.localeId = localeId;\n    this.decimalSeperator = \".\";\n    this.groupSeperator = \",\";\n    this.isSetConfig = false;\n    this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);\n    ;\n    this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);\n    this.setSymbolInConfig();\n  }\n\n  replacer(value) {\n    value = String(value);\n    if (!this.isSetConfig) this.bindConfig();\n    value = value.split(this.groupSeperator).join(BLANK);\n    if (this.allowDecimalSymbol) value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);\n    var splitValue = value.split(this.decimalSeperator);\n    value = splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1]) ? splitValue[0] : value;\n    return value;\n  }\n\n  transFormDecimal(value, digitsInfo, persistZero) {\n    value = String(value);\n\n    if (!value) {\n      return value;\n    }\n\n    let transformedValue = this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, \"\").replace(this.decimalSeperator, \".\"), digitsInfo, this.localeId);\n\n    if (persistZero && value.indexOf(this.decimalSeperator)) {\n      let splitTransformed = transformedValue.split(\".\");\n      let splitDigitsInfo = digitsInfo ? digitsInfo.split(\"-\") : [];\n      let digits = splitDigitsInfo.length > 1 ? parseInt(splitDigitsInfo[splitDigitsInfo.length - 1]) : 0;\n\n      if (splitTransformed.length > 1 && splitDigitsInfo.length > 0 && digits !== 0 && splitTransformed[1].length !== digits) {\n        let diff = digits - splitTransformed[1].length;\n\n        for (let i = 0; i < diff; i++) {\n          transformedValue += \"0\";\n        }\n      }\n    }\n\n    return transformedValue;\n  }\n\n  setSymbolInConfig() {\n    ReactiveFormConfig.number = {\n      decimalSymbol: this.decimalSeperator,\n      groupSymbol: this.groupSeperator\n    };\n  }\n\n  bindConfig() {\n    if (ReactiveFormConfig.json) {\n      if (ReactiveFormConfig.json.localeId) this.localeId = ReactiveFormConfig.json.localeId;\n      if (ReactiveFormConfig.json.allowDecimalSymbol) this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;\n    }\n\n    this.isSetConfig = true;\n  }\n\n}\n\nDecimalProvider.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: DecimalProvider,\n  deps: [{\n    token: i1.DecimalPipe\n  }, {\n    token: LOCALE_ID\n  }],\n  target: i0.ÉµÉµFactoryTarget.Injectable\n});\nDecimalProvider.Éµprov = i0.ÉµÉµngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: DecimalProvider\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: DecimalProvider,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i1.DecimalPipe\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }\n});\nconst NGMODEL_BINDING = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RxFormControlDirective),\n  multi: true\n};\nconst ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];\nconst NUMERIC = \"numeric\";\nconst IS_FORMAT = \"isFormat\";\nconst DIGITS_INFO = \"digitsInfo\";\n\nclass RxFormControlDirective extends BaseValidator {\n  constructor(elementRef, renderer, decimalProvider) {\n    super();\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.decimalProvider = decimalProvider;\n    this.eventListeners = [];\n    this.isNumericSubscribed = false;\n    this.isFocusCalled = false;\n    this.isMasked = false;\n    this.element = elementRef.nativeElement;\n    this.setEventName();\n  }\n\n  set validationControls(value) {\n    this.controls = value;\n  }\n\n  get validationControls() {\n    return this.controls;\n  }\n\n  ngOnInit() {\n    let validators = [];\n    Object.keys(APP_VALIDATORS).forEach(validatorName => {\n      if (this[`rx${validatorName}`] || ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[`rx${validatorName}`] == BLANK) {\n        validators.push(APP_VALIDATORS[validatorName](this[`rx${validatorName}`]));\n\n        if (this.name && !(this.formControlName && this.formControl)) {\n          ApplicationUtil.configureControl(this.controlConfig, this[`rx${validatorName}`], validatorName);\n        }\n      }\n    });\n    if (validators.length > 0) this.validators = validators;\n\n    if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {\n      this.bindNumericElementEvent();\n    }\n  }\n\n  blurEvent() {\n    if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {\n      if (this.formControl.value !== null && this.formControl.value !== undefined) {\n        let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo, this.rxnumeric.persistZero);\n        value = !this.rxnumeric.isFormat ? this.decimalProvider.replacer(value) : value;\n        this.setValueOnElement(value);\n      }\n\n      this.isFocusCalled = false;\n    }\n  }\n\n  bindNumericElementEvent(config) {\n    if (config) this.rxnumeric = config;\n    let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));\n    this.eventListeners.push(listener);\n    listener = this.renderer.listen(this.element, FOCUS, event => {\n      this.isFocusCalled = true;\n\n      if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {\n        let value = this.decimalProvider.replacer(this.element.value);\n        this.setValueOnElement(value);\n      }\n    });\n    this.eventListeners.push(listener);\n  }\n\n  bindValueChangeEvent() {\n    if (this.eventName != BLANK) {\n      let listener = this.renderer.listen(this.element, this.eventName, () => {\n        Object.keys(this.validationControls).forEach(fieldName => {\n          this.validationControls[fieldName].updateValueAndValidity();\n        });\n      });\n      this.eventListeners.push(listener);\n    }\n  }\n\n  subscribeNumericFormatter() {\n    if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][NUMERIC] && (this.formControl[VALIDATOR_CONFIG$2][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG$2][NUMERIC][DIGITS_INFO])) {\n      if (!this.isNumericSubscribed) {\n        this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG$2][NUMERIC]);\n        this.isNumericSubscribed = true;\n      }\n\n      if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {\n        this.blurEvent();\n      }\n    }\n  }\n\n  subscribeMaskValidator() {\n    if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][\"mask\"] && !this.isMasked) {\n      let config = this.formControl[VALIDATOR_CONFIG$2][\"mask\"];\n      this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);\n      this.isMasked = true;\n    }\n  }\n\n  setValueOnElement(value) {\n    this.renderer.setProperty(this.element, ELEMENT_VALUE, value);\n  }\n\n  setTemplateValidators(control) {\n    for (let validatorName in control[VALIDATOR_CONFIG$2]) {\n      this[validatorName] = control[VALIDATOR_CONFIG$2][validatorName];\n    }\n\n    delete control[TEMPLATE_VALIDATION_CONFIG];\n    delete control[VALIDATOR_CONFIG$2];\n    this.ngOnInit();\n  }\n\n  updateOnElementClass(element) {\n    var previousClassName = '';\n    return function (className) {\n      if (previousClassName) element.classList.remove(previousClassName);\n      if (className) element.classList.add(className);\n      previousClassName = className;\n    };\n  }\n\n  setValidatorConfig(control) {\n    if (!this.formControl) {\n      this.formControl = control;\n      let rxFormControl = this.formControl;\n      if (rxFormControl.updateOnElementClass) rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);\n    }\n\n    this.subscribeMaskValidator();\n    this.subscribeNumericFormatter();\n    if (control[TEMPLATE_VALIDATION_CONFIG]) this.setTemplateValidators(control);\n\n    if (control[CONDITIONAL_VALIDATOR]) {\n      this.conditionalValidator = control[CONDITIONAL_VALIDATOR];\n      delete control[CONDITIONAL_VALIDATOR];\n    }\n  }\n\n  validate(control) {\n    this.setValidatorConfig(control);\n    if (this.conditionalValidator) this.conditionalValidator(control);\n    if (!this.isProcessed) this.setModelConfig(control);\n    return this.validators && this.validators.length > 0 || this.maskProvider ? this.validation(control) : null;\n  }\n\n  ngOnDestroy() {\n    this.controls = undefined;\n    let eventCount = this.eventListeners.length;\n\n    for (var i = 0; i < eventCount; i++) {\n      this.eventListeners[0]();\n      this.eventListeners.splice(0, 1);\n    }\n\n    this.eventListeners = [];\n    if (this.maskProvider) this.maskProvider.onDestroy();\n  }\n\n}\n\nRxFormControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxFormControlDirective,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: i0.Renderer2\n  }, {\n    token: DecimalProvider\n  }],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nRxFormControlDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: RxFormControlDirective,\n  selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControlName\", \"\"], [\"\", \"formControl\", \"\"]],\n  inputs: {\n    rxalpha: \"rxalpha\",\n    rxalphaNumeric: \"rxalphaNumeric\",\n    rxascii: \"rxascii\",\n    rxcompare: \"rxcompare\",\n    rxcompose: \"rxcompose\",\n    rxcontains: \"rxcontains\",\n    rxcreditCard: \"rxcreditCard\",\n    rxdataUri: \"rxdataUri\",\n    rxdifferent: \"rxdifferent\",\n    rxdigit: \"rxdigit\",\n    rxemail: \"rxemail\",\n    rxendsWith: \"rxendsWith\",\n    rxeven: \"rxeven\",\n    rxextension: \"rxextension\",\n    rxfactor: \"rxfactor\",\n    rxfileSize: \"rxfileSize\",\n    rxgreaterThanEqualTo: \"rxgreaterThanEqualTo\",\n    rxgreaterThan: \"rxgreaterThan\",\n    rxhexColor: \"rxhexColor\",\n    rxjson: \"rxjson\",\n    rxlatitude: \"rxlatitude\",\n    rxlatLong: \"rxlatLong\",\n    rxleapYear: \"rxleapYear\",\n    rxlessThan: \"rxlessThan\",\n    rxlessThanEqualTo: \"rxlessThanEqualTo\",\n    rxlongitude: \"rxlongitude\",\n    rxlowerCase: \"rxlowerCase\",\n    rxmac: \"rxmac\",\n    rxmaxDate: \"rxmaxDate\",\n    rxmaxLength: \"rxmaxLength\",\n    rxmaxNumber: \"rxmaxNumber\",\n    rxminDate: \"rxminDate\",\n    rxminLength: \"rxminLength\",\n    rxminNumber: \"rxminNumber\",\n    rxnumeric: \"rxnumeric\",\n    rxodd: \"rxodd\",\n    rxpassword: \"rxpassword\",\n    rxport: \"rxport\",\n    rxprimeNumber: \"rxprimeNumber\",\n    rxrequired: \"rxrequired\",\n    rxrange: \"rxrange\",\n    rxrule: \"rxrule\",\n    rxstartsWith: \"rxstartsWith\",\n    rxtime: \"rxtime\",\n    rxupperCase: \"rxupperCase\",\n    rxurl: \"rxurl\",\n    rxunique: \"rxunique\",\n    rxnotEmpty: \"rxnotEmpty\",\n    rxcusip: \"rxcusip\",\n    rxgrid: \"rxgrid\",\n    rxdate: \"rxdate\"\n  },\n  features: [i0.ÉµÉµProvidersFeature([NGMODEL_BINDING]), i0.ÉµÉµInheritDefinitionFeature]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxFormControlDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[ngModel],[formControlName],[formControl]',\n      providers: [NGMODEL_BINDING]\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: DecimalProvider\n    }];\n  },\n  propDecorators: {\n    rxalpha: [{\n      type: Input\n    }],\n    rxalphaNumeric: [{\n      type: Input\n    }],\n    rxascii: [{\n      type: Input\n    }],\n    rxcompare: [{\n      type: Input\n    }],\n    rxcompose: [{\n      type: Input\n    }],\n    rxcontains: [{\n      type: Input\n    }],\n    rxcreditCard: [{\n      type: Input\n    }],\n    rxdataUri: [{\n      type: Input\n    }],\n    rxdifferent: [{\n      type: Input\n    }],\n    rxdigit: [{\n      type: Input\n    }],\n    rxemail: [{\n      type: Input\n    }],\n    rxendsWith: [{\n      type: Input\n    }],\n    rxeven: [{\n      type: Input\n    }],\n    rxextension: [{\n      type: Input\n    }],\n    rxfactor: [{\n      type: Input\n    }],\n    rxfileSize: [{\n      type: Input\n    }],\n    rxgreaterThanEqualTo: [{\n      type: Input\n    }],\n    rxgreaterThan: [{\n      type: Input\n    }],\n    rxhexColor: [{\n      type: Input\n    }],\n    rxjson: [{\n      type: Input\n    }],\n    rxlatitude: [{\n      type: Input\n    }],\n    rxlatLong: [{\n      type: Input\n    }],\n    rxleapYear: [{\n      type: Input\n    }],\n    rxlessThan: [{\n      type: Input\n    }],\n    rxlessThanEqualTo: [{\n      type: Input\n    }],\n    rxlongitude: [{\n      type: Input\n    }],\n    rxlowerCase: [{\n      type: Input\n    }],\n    rxmac: [{\n      type: Input\n    }],\n    rxmaxDate: [{\n      type: Input\n    }],\n    rxmaxLength: [{\n      type: Input\n    }],\n    rxmaxNumber: [{\n      type: Input\n    }],\n    rxminDate: [{\n      type: Input\n    }],\n    rxminLength: [{\n      type: Input\n    }],\n    rxminNumber: [{\n      type: Input\n    }],\n    rxnumeric: [{\n      type: Input\n    }],\n    rxodd: [{\n      type: Input\n    }],\n    rxpassword: [{\n      type: Input\n    }],\n    rxport: [{\n      type: Input\n    }],\n    rxprimeNumber: [{\n      type: Input\n    }],\n    rxrequired: [{\n      type: Input\n    }],\n    rxrange: [{\n      type: Input\n    }],\n    rxrule: [{\n      type: Input\n    }],\n    rxstartsWith: [{\n      type: Input\n    }],\n    rxtime: [{\n      type: Input\n    }],\n    rxupperCase: [{\n      type: Input\n    }],\n    rxurl: [{\n      type: Input\n    }],\n    rxunique: [{\n      type: Input\n    }],\n    rxnotEmpty: [{\n      type: Input\n    }],\n    rxcusip: [{\n      type: Input\n    }],\n    rxgrid: [{\n      type: Input\n    }],\n    rxdate: [{\n      type: Input\n    }]\n  }\n});\nvar UrlValidationType;\n\n(function (UrlValidationType) {\n  UrlValidationType[UrlValidationType[\"FQDN\"] = 1] = \"FQDN\";\n  UrlValidationType[UrlValidationType[\"LocalHost\"] = 2] = \"LocalHost\";\n  UrlValidationType[UrlValidationType[\"IntranetServer\"] = 3] = \"IntranetServer\";\n})(UrlValidationType || (UrlValidationType = {}));\n\nclass FormBuilderConfiguration {\n  constructor(formBuilderConfiguration) {\n    if (formBuilderConfiguration) for (var column in formBuilderConfiguration) this[column] = formBuilderConfiguration[column];\n  }\n\n}\n\nclass IAbstractControl extends AbstractControl {}\n\nclass ControlHostDirective {\n  constructor(viewContainerRef) {\n    this.viewContainerRef = viewContainerRef;\n  }\n\n  set portal(context) {\n    if (context.templateRef) {\n      if (this.view) {\n        this.view.destroy();\n        this.view = undefined;\n      }\n\n      this.view = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.view) this.view.destroy();\n    if (this.viewContainerRef) this.viewContainerRef.clear();\n  }\n\n}\n\nControlHostDirective.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ControlHostDirective,\n  deps: [{\n    token: i0.ViewContainerRef\n  }],\n  target: i0.ÉµÉµFactoryTarget.Directive\n});\nControlHostDirective.Éµdir = i0.ÉµÉµdefineDirective({\n  type: ControlHostDirective,\n  selectors: [[\"\", \"controlHost\", \"\"]],\n  inputs: {\n    portal: [\"controlHost\", \"portal\"]\n  }\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ControlHostDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[controlHost]'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ViewContainerRef\n    }];\n  },\n  propDecorators: {\n    portal: [{\n      type: Input,\n      args: ['controlHost']\n    }]\n  }\n});\n\nclass BaseFormBuilder {\n  constructor() {}\n\n  createInstance() {\n    let instance = {};\n    defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;\n    let modelName = `RxWebModel${defaultContainer.modelIncrementCount}`;\n    instance.constructor = Function(`\"use strict\";return(function ${modelName}(){ })`)();\n    return instance;\n  }\n\n  createClassObject(model, formBuilderConfiguration, classInstance) {\n    let instanceContainer = defaultContainer.get(model);\n    let autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;\n\n    if (!autoInstanceConfig) {\n      return classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, []);\n    } else {\n      classInstance = classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);\n\n      if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {\n        autoInstanceConfig.objectPropInstanceConfig.forEach(t => {\n          let objectProperty = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY)[0];\n\n          if (objectProperty) {\n            let data = classInstance[t.propertyName];\n            classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);\n            if (data) this.setObjectValue(data, classInstance[t.propertyName]);\n          }\n        });\n      }\n\n      if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {\n        autoInstanceConfig.arrayPropInstanceConfig.forEach(t => {\n          let property = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY)[0];\n\n          if (property) {\n            let data = classInstance[t.propertyName];\n            classInstance[t.propertyName] = [];\n\n            for (var i = 0; i < t.rowItems; i++) {\n              let instance = getInstance(property.entity, t.arguments || []);\n              if (data && data[i]) this.setObjectValue(data[i], instance);\n              classInstance[t.propertyName].push(instance);\n            }\n          }\n        });\n      }\n\n      return classInstance;\n    }\n  }\n\n  updateObject(model, entityObject, formBuilderConfiguration) {\n    let instanceContainer = instanceProvider(model);\n    let classInstance = getInstance(model, []);\n\n    if (instanceContainer) {\n      instanceContainer.properties.forEach(t => {\n        let entity = (t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity ? t.entity : formBuilderConfiguration && formBuilderConfiguration.genericEntities ? formBuilderConfiguration.genericEntities[t.name] : undefined;\n        if (!entity && t.entityProvider) entity = t.entityProvider.call(entityObject);\n\n        switch (t.propertyType) {\n          case PROPERTY:\n            classInstance[t.name] = this.getValue(entityObject, t, formBuilderConfiguration);\n            break;\n\n          case OBJECT_PROPERTY:\n            let objectValue = this.getValue(entityObject, t, formBuilderConfiguration);\n            if (objectValue) classInstance[t.name] = this.updateObject(entity, objectValue, formBuilderConfiguration);\n            break;\n\n          case ARRAY_PROPERTY:\n            let arrayObjectValue = this.getValue(entityObject, t, formBuilderConfiguration);\n\n            if (arrayObjectValue && Array.isArray(arrayObjectValue)) {\n              classInstance[t.name] = [];\n\n              for (let row of arrayObjectValue) {\n                let instanceObject = this.updateObject(entity, row, formBuilderConfiguration);\n                classInstance[t.name].push(instanceObject);\n              }\n            }\n\n            break;\n        }\n      });\n    }\n\n    return classInstance;\n  }\n\n  instaceProvider(instanceFunc, entityObject) {\n    return instanceProvider(instanceFunc, entityObject);\n  }\n\n  getDefaultValue(propertyInfo, value, formBuilderConfiguration) {\n    let defaultValue = formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value) ? propertyInfo.defaultValue : value;\n    return defaultValue;\n  }\n\n  sanitizeValue(instanceContainer, propertyName, value, entityObject, baseObject) {\n    if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {\n      for (let sanitizer of instanceContainer.sanitizers[propertyName]) value = SANITIZERS[sanitizer.name](value, sanitizer.config);\n    }\n\n    if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value) entityObject[propertyName] = value;\n    if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value) baseObject[propertyName] = value;\n    return value;\n  }\n\n  getValue(entityObject, propertyInfo, formBuilderConfiguration) {\n    let propValue = propertyInfo.dataPropertyName ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];\n    return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);\n  }\n\n  setObjectValue(entityObject, classInstance) {\n    for (var column in entityObject) {\n      classInstance[column] = entityObject[column];\n    }\n  }\n\n}\n\nfunction andValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let validatorNames = Object.keys(config.validation);\n      let failed = false;\n\n      for (var validatorName of validatorNames) {\n        failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\n        if (failed) break;\n      }\n\n      if (failed) return ObjectMaker.toJson(AnnotationTypes.and, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction orValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let validatorNames = Object.keys(config.validation);\n      let failed = false;\n\n      for (var validatorName of validatorNames) {\n        failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\n        if (!failed) break;\n      }\n\n      if (failed) return ObjectMaker.toJson(AnnotationTypes.or, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nfunction notValidator(configModel) {\n  return control => {\n    let config = getConfigObject(configModel, control);\n\n    if (ValidatorValueChecker.pass(control, config)) {\n      let validatorNames = Object.keys(config.validation);\n      let failed = false;\n\n      for (var validatorName of validatorNames) {\n        failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\n        if (!failed) break;\n      }\n\n      if (!failed) return ObjectMaker.toJson(AnnotationTypes.not, config, [control.value]);\n    }\n\n    return ObjectMaker.null();\n  };\n}\n\nconst LOGICAL_VALIDATORS = {\n  and: andValidator,\n  or: orValidator,\n  not: notValidator\n};\nconst ASYNC = \"async\";\nconst ENTITY_OBJECT = \"entityObject\";\n\nclass RxFormBuilder extends BaseFormBuilder {\n  constructor() {\n    super();\n    this.conditionalObjectProps = [];\n    this.conditionalValidationInstance = {};\n    this.builderConfigurationConditionalObjectProps = [];\n    this.formGroupPropOtherValidator = {};\n    this.currentFormGroupPropOtherValidator = {};\n    this.isNested = false;\n    this.isGroupCalled = false;\n    this.isNestedBinding = false;\n  }\n\n  getInstanceContainer(instanceFunc, entityObject) {\n    return this.instaceProvider(instanceFunc, entityObject);\n  }\n\n  setValue(formGroup, object) {\n    for (var col in object) {\n      var control = formGroup.get([col]);\n      control.setValue(object[col]);\n      control.updateValueAndValidity();\n    }\n  }\n\n  extractExpressions(fomrBuilderConfiguration) {\n    if (fomrBuilderConfiguration && fomrBuilderConfiguration.dynamicValidation) {\n      for (var property in fomrBuilderConfiguration.dynamicValidation) {\n        for (var decorator in fomrBuilderConfiguration.dynamicValidation[property]) {\n          if (fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression) {\n            let columns = Linq.expressionColumns(fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression);\n            defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  addAsyncValidation(property, propertyValidators, propValidationConfig) {\n    let asyncValidators = [];\n\n    if (propertyValidators) {\n      for (let propertyValidator of propertyValidators) {\n        if (propertyValidator.isAsync) propertyValidator.config.forEach(t => {\n          asyncValidators.push(t);\n        });\n      }\n    }\n\n    if (propValidationConfig && propValidationConfig[ASYNC]) {\n      propValidationConfig[ASYNC].forEach(t => {\n        asyncValidators.push(t);\n      });\n    }\n\n    return asyncValidators;\n  }\n\n  addFormControl(property, propertyValidators, propValidationConfig, instance, entity) {\n    let validators = [];\n    let columns = [];\n\n    if (instance.conditionalValidationProps && instance.conditionalValidationProps[property.name] || this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name]) {\n      let props = [];\n      if (instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) instance.conditionalValidationProps[property.name].forEach(t => props.push(t));\n      if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name]) this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(t => props.push(t));\n      validators.push(conditionalChangeValidator(props));\n    }\n\n    if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {\n      let propConditions = [];\n      if (this.conditionalObjectProps) propConditions = this.conditionalObjectProps.filter(t => t.propName == property.name);\n      if (this.builderConfigurationConditionalObjectProps) this.builderConfigurationConditionalObjectProps.filter(t => t.propName == property.name).forEach(t => propConditions.push(t));\n      propConditions.forEach(t => {\n        if (t.referencePropName && columns.indexOf(t.referencePropName) == -1) columns.push(t.referencePropName);\n      });\n      if (columns.length > 0) validators.push(conditionalChangeValidator(columns));\n    }\n\n    for (let propertyValidator of propertyValidators) {\n      if (!propertyValidator.isAsync) {\n        let config = propertyValidator.config;\n        if (property.messageNexus) config = config ? Object.assign({\n          messageNexus: property.messageNexus\n        }, config) : {\n          messageNexus: property.messageNexus\n        };\n\n        switch (propertyValidator.annotationType) {\n          case AnnotationTypes.rule:\n            validators.push(APP_VALIDATORS[propertyValidator.annotationType](config, entity));\n            break;\n\n          case AnnotationTypes.and:\n          case AnnotationTypes.or:\n          case AnnotationTypes.not:\n            validators.push(LOGICAL_VALIDATORS[propertyValidator.annotationType](config));\n            break;\n\n          default:\n            validators.push(APP_VALIDATORS[propertyValidator.annotationType](config));\n            break;\n        }\n      }\n    }\n\n    if (propValidationConfig) this.additionalValidation(validators, propValidationConfig);\n    if (this.currentFormGroupPropOtherValidator[property.name]) this.currentFormGroupPropOtherValidator[property.name].forEach(t => {\n      validators.push(t);\n    });\n    return validators;\n  }\n\n  additionalValidation(validations, propValidationConfig) {\n    for (var col in AnnotationTypes) {\n      if (propValidationConfig[AnnotationTypes[col]] && col != \"custom\") {\n        validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));\n      } else if (col == AnnotationTypes.custom && propValidationConfig[AnnotationTypes[col]]) validations.push(propValidationConfig[col]);\n    }\n  }\n\n  getEntity(object, formBuilderConfiguration, propertyName, isSameObjectConstructor = false) {\n    if (formBuilderConfiguration && formBuilderConfiguration.genericEntities && formBuilderConfiguration.genericEntities[propertyName]) return formBuilderConfiguration.genericEntities[propertyName];\n    return isSameObjectConstructor ? object.constructor : undefined;\n  }\n\n  getObjectPropertyInstance(object, propertyInfo, formBuilderConfiguration) {\n    if (propertyInfo.propertyType == OBJECT_PROPERTY && object[propertyInfo.name]) return object[propertyInfo.name].constructor;else if (propertyInfo.propertyType == ARRAY_PROPERTY && object[propertyInfo.name] && object[propertyInfo.name].length > 0) return object[propertyInfo.name][0].constructor;\n    return this.getEntity(object, formBuilderConfiguration, propertyInfo.name);\n  }\n\n  checkObjectPropAdditionalValidation(instanceContainer, object, formBuilderConfiguration) {\n    var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY);\n    props.forEach(t => {\n      let entity = t.entity;\n      if (!t.entity) entity = this.getObjectPropertyInstance(object, t, formBuilderConfiguration);\n\n      if (entity) {\n        let instance = this.getInstanceContainer(entity, null);\n\n        if (instance && instance.conditionalValidationProps) {\n          for (var key in instance.conditionalValidationProps) {\n            var prop = instanceContainer.properties.filter(t => t.name == key)[0];\n\n            if (prop) {\n              if (!instanceContainer.conditionalValidationProps) instanceContainer.conditionalValidationProps = {};\n              if (!instanceContainer.conditionalValidationProps[key]) instanceContainer.conditionalValidationProps[key] = [];\n              instance.conditionalValidationProps[key].forEach(x => {\n                if (t.propertyType != ARRAY_PROPERTY) instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));else instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));\n              });\n            }\n          }\n        }\n      }\n    });\n  }\n\n  getObject(model, entityObject, formBuilderConfiguration) {\n    let json = {};\n    if (typeof model == FUNCTION_STRING) json.model = model;\n\n    if (typeof model == FUNCTION_STRING && entityObject instanceof FormBuilderConfiguration) {\n      json.entityObject = this.createClassObject(json.model, entityObject);\n    }\n\n    if (entityObject && !(entityObject instanceof FormBuilderConfiguration)) json.entityObject = entityObject;\n    if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration) json.formBuilderConfiguration = entityObject;else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration) {\n      json.formBuilderConfiguration = formBuilderConfiguration;\n      json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, json.entityObject);\n    }\n\n    if (!entityObject) {\n      if (typeof model == OBJECT_STRING) json.model = model.constructor;\n      json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, model);\n    } else if (model && entityObject instanceof FormBuilderConfiguration && typeof model == OBJECT_STRING) {\n      json[MODEL] = model.constructor;\n      json[ENTITY_OBJECT] = this.createClassObject(json.model, json.formBuilderConfiguration, model);\n    }\n\n    return json;\n  }\n\n  control(value, validators, asyncValidators) {\n    return new RxFormControl(value, validators, asyncValidators, {}, {}, '', []);\n  }\n\n  array(values, validatorConfig) {\n    let formArray = this.group({\n      temp: values\n    }, validatorConfig).get(\"temp\");\n    var formBuilder = new FormBuilder();\n    return formBuilder.array(formArray.controls);\n  }\n\n  group(groupObject, validatorConfig) {\n    let modelInstance = super.createInstance();\n    let entityObject = {};\n    this.formGroupPropOtherValidator = {};\n    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\n    this.createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig);\n    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\n    this.isGroupCalled = true;\n    let formGroup = this.formGroup(modelInstance.constructor, entityObject, validatorConfig);\n    this.isGroupCalled = false;\n    this.formGroupPropOtherValidator = {};\n    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\n    this.formGroupPropOtherValidator = {};\n    return formGroup;\n  }\n\n  applyAllPropValidator(propName, validatorConfig, modelInstance) {\n    if (validatorConfig && validatorConfig.applyAllProps) {\n      if (!(validatorConfig.excludeProps && validatorConfig.excludeProps.length > 0 && validatorConfig.excludeProps.indexOf(propName) == -1)) {\n        validatorConfig.applyAllProps.forEach(t => {\n          if (t.name == RX_WEB_VALIDATOR) {\n            t(propName, modelInstance);\n          } else {\n            if (!this.currentFormGroupPropOtherValidator[propName]) this.currentFormGroupPropOtherValidator[propName] = [];\n            this.currentFormGroupPropOtherValidator[propName].push(t);\n          }\n        });\n      }\n    }\n  }\n\n  dynamicValidationPropCheck(propName, validatorConfig) {\n    return validatorConfig == undefined ? true : !validatorConfig.dynamicValidationConfigurationPropertyName ? true : validatorConfig.dynamicValidationConfigurationPropertyName == propName ? false : true;\n  }\n\n  isNotObject(value) {\n    return value instanceof Date || value === null || typeof value != OBJECT_STRING;\n  }\n\n  createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig) {\n    for (var propName in groupObject) {\n      var prop = groupObject[propName];\n\n      if (prop instanceof Array && prop.length > 0 && this.isNotObject(prop[0])) {\n        let propValidators = prop.length > 1 && prop[1] instanceof Array ? prop[1] : prop.length == 2 ? [prop[1]] : [];\n        let propertyAdded = false;\n\n        for (var i = 0; i < propValidators.length; i++) {\n          if (propValidators[i].name == RX_WEB_VALIDATOR) {\n            propValidators[i](propName, modelInstance);\n            propertyAdded = true;\n          } else {\n            if (!this.currentFormGroupPropOtherValidator[propName]) this.currentFormGroupPropOtherValidator[propName] = [];\n            this.currentFormGroupPropOtherValidator[propName].push(propValidators[i]);\n          }\n        }\n\n        if (!propertyAdded) defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : {\n          constructor: modelInstance\n        });\n        this.applyAllPropValidator(propName, validatorConfig, modelInstance);\n      } else if (prop === null || prop === undefined || typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\n        defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : {\n          constructor: modelInstance\n        });\n        this.applyAllPropValidator(propName, validatorConfig, modelInstance);\n      } else if (prop instanceof Array) {\n        if (prop instanceof FormArray) {\n          entityObject[propName] = prop;\n        } else {\n          let propModelInstance = super.createInstance();\n          if (typeof modelInstance == \"function\") modelInstance.constructor = modelInstance;\n          defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, propModelInstance.constructor, modelInstance);\n          entityObject[propName] = [];\n\n          for (let row of prop) {\n            let jObject = {};\n            entityObject[propName].push(jObject);\n            this.createValidatorFormGroup(row, jObject, propModelInstance.constructor, validatorConfig);\n          }\n        }\n      } else if (typeof prop == OBJECT_STRING && !(prop instanceof FormControl || prop instanceof RxFormControl)) {\n        let formGroup = prop instanceof FormArray ? prop.controls[0] : prop;\n\n        if (!formGroup.model && (prop instanceof FormGroup || prop instanceof RxFormGroup)) {\n          formGroup = this.group(formGroup.controls);\n        }\n\n        if (prop instanceof FormGroup || prop instanceof RxFormGroup) {\n          entityObject[propName] = prop;\n          defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, formGroup.model, modelInstance);\n        } else if (prop instanceof FormArray) {\n          entityObject[propName] = prop;\n          defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, formGroup.model, modelInstance);\n        } else {\n          if (this.dynamicValidationPropCheck(propName, validatorConfig)) {\n            this.formGroupPropOtherValidator[propName] = {};\n            this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[propName];\n            let propModelInstance = super.createInstance();\n            entityObject[propName] = {};\n            entityObject[propName].constructor = propModelInstance.constructor;\n            defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, entityObject[propName].constructor, modelInstance.constructor == Function ? {\n              constructor: modelInstance\n            } : modelInstance);\n            let objectValidationConfig = this.getValidatorConfig(validatorConfig, groupObject, propName + \".\");\n            this.createValidatorFormGroup(groupObject[propName], entityObject[propName], entityObject[propName].constructor, objectValidationConfig);\n          } else entityObject[propName] = groupObject[propName];\n        }\n      }\n\n      if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\n        entityObject[propName] = prop;\n      } else if (prop && prop.length > 0 && this.isNotObject(prop[0]) && !(prop instanceof FormControl || prop instanceof RxFormControl) && !(prop instanceof FormArray)) {\n        entityObject[propName] = prop[0];\n      } else if (prop instanceof FormArray) {\n        entityObject[propName] = prop;\n      } else if (prop instanceof FormControl || prop instanceof RxFormControl) {\n        entityObject[propName] = prop;\n        defaultContainer.initPropertyObject(propName, PROPERTY, undefined, modelInstance.constructor ? modelInstance : {\n          constructor: modelInstance\n        });\n      }\n    }\n  }\n\n  getValidatorConfig(validatorConfig, entityObject, rootPropertyName, arrayPropertyName) {\n    let excludeProps = [];\n    let includeProps = [];\n    let ignoreUndefinedProps = [];\n    if (!validatorConfig) return {};\n    const validationProps = this.getObjectForProperty(validatorConfig.dynamicValidation, rootPropertyName, arrayPropertyName);\n    const abstractControlOptions = this.getObjectForProperty(validatorConfig.abstractControlOptions, rootPropertyName, arrayPropertyName);\n    if (validatorConfig.excludeProps) excludeProps = this.getProps(validatorConfig.excludeProps, rootPropertyName);\n    if (validatorConfig.includeProps) includeProps = this.getProps(validatorConfig.includeProps, rootPropertyName);\n    if (validatorConfig.ignoreUndefinedProps) ignoreUndefinedProps = this.getProps(validatorConfig.ignoreUndefinedProps, rootPropertyName, true);\n    if (!Object.keys(abstractControlOptions).length && rootPropertyName.endsWith('.') && validatorConfig.abstractControlOptions && validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)]) abstractControlOptions['global'] = validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)];\n    const dynamicValidation = validatorConfig.dynamicValidationConfigurationPropertyName && entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] ? entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] : validationProps;\n    return {\n      ignoreUndefinedProps: ignoreUndefinedProps,\n      includeProps: includeProps,\n      dynamicValidation: dynamicValidation,\n      excludeProps: excludeProps,\n      abstractControlOptions: abstractControlOptions\n    };\n  }\n\n  getObjectForProperty(rootObject, rootPropertyName, arrayPropertyName) {\n    const result = {};\n\n    for (let propName in rootObject) {\n      if (!propName.startsWith(rootPropertyName) && (!arrayPropertyName || !propName.startsWith(arrayPropertyName))) continue;\n      let splitProp = propName.split(\".\", 2)[1];\n      if (!splitProp) continue;\n      result[splitProp] = rootObject[propName];\n    }\n\n    return result;\n  }\n\n  getProps(properties, rootPropertyName, isIgnoreProp = false) {\n    let props = [];\n\n    for (let prop of properties) {\n      if (prop.indexOf(rootPropertyName) != -1) {\n        let splitProps = prop.split(\".\");\n\n        if (splitProps.length == 2) {\n          props.push(splitProps[1]);\n        } else if (splitProps.length > 2) {\n          splitProps.splice(0, 1);\n          props.push(splitProps.join(\".\"));\n        }\n      }\n    }\n\n    if (isIgnoreProp && properties.filter(x => x == rootPropertyName.replace('.', '')).length == 1) props.push(':self:');\n    return props;\n  }\n\n  formGroup(model, entityObject, formBuilderConfiguration) {\n    let json = this.getObject(model, entityObject, formBuilderConfiguration);\n    model = json.model;\n    entityObject = json.entityObject;\n\n    if (entityObject.constructor != model && !this.isGroupCalled) {\n      entityObject = json.entityObject = this.updateObject(model, json.entityObject, formBuilderConfiguration);\n    }\n\n    formBuilderConfiguration = json.formBuilderConfiguration;\n    if (formBuilderConfiguration) this.extractExpressions(formBuilderConfiguration);\n    let instanceContainer = this.getInstanceContainer(model, entityObject);\n    this.checkObjectPropAdditionalValidation(instanceContainer, entityObject, formBuilderConfiguration);\n    let formGroupObject = {};\n    let extendedProperties = {};\n    let formChildGroup = undefined;\n    let formArrayGroup = undefined;\n    var additionalValidations = {};\n    instanceContainer.properties.forEach(property => {\n      let isIncludeProp = true;\n\n      if (formBuilderConfiguration) {\n        if (formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0) isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;\n        if (formBuilderConfiguration.dynamicValidation) additionalValidations = formBuilderConfiguration.dynamicValidation;\n        if (formBuilderConfiguration.includeProps && formBuilderConfiguration.includeProps.length > 0) isIncludeProp = formBuilderConfiguration.includeProps.indexOf(property.name) != -1;\n\n        if (formBuilderConfiguration.ignoreUndefinedProps && formBuilderConfiguration.ignoreUndefinedProps.length > 0) {\n          isIncludeProp = !(property.propertyType == PROPERTY && !RegexValidator.isNotBlank(json.entityObject[property.name]) && (formBuilderConfiguration.ignoreUndefinedProps.indexOf(property.name) !== -1 || formBuilderConfiguration.ignoreUndefinedProps.indexOf(\":self:\") !== -1));\n        }\n      }\n\n      if (property.ignore) isIncludeProp = !property.ignore.call(json.entityObject, json.entityObject);\n\n      if (isIncludeProp) {\n        switch (property.propertyType) {\n          case PROPERTY:\n            if (!(entityObject[property.name] instanceof FormControl || entityObject[property.name] instanceof RxFormControl)) {\n              let propertyValidators = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && t.isValidator);\n              let updateOn = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && !t.isValidator && t.annotationType === \"updateOn\")[0];\n              let sanitizeValue = super.sanitizeValue(instanceContainer, property.name, super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration), json.entityObject, Object.assign({}, json.entityObject));\n              if (entityObject[property.name] === undefined && sanitizeValue) entityObject[property.name] = sanitizeValue;\n              let validators = this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer, entityObject);\n              let abstractControlOptions = {\n                validators: validators,\n                asyncValidators: this.addAsyncValidation(property, propertyValidators, additionalValidations[property.name])\n              };\n              abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, abstractControlOptions);\n              if (updateOn && !abstractControlOptions.updateOn) abstractControlOptions.updateOn = updateOn.config.runOn;\n              formGroupObject[property.name] = new RxFormControl(sanitizeValue, abstractControlOptions, [], json.entityObject, Object.assign({}, json.entityObject), property.name, instanceContainer.sanitizers[property.name]);\n              this.isNested = false;\n            } else formGroupObject[property.name] = super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration);\n\n            extendedProperties[property.name] = true;\n            break;\n\n          case OBJECT_PROPERTY:\n            let objectValue = entityObject[property.name];\n            objectValue = !objectValue && property.defaultValue ? property.defaultValue : objectValue;\n            if (!objectValue && property.objectConfig && property.objectConfig.autoCreate) objectValue = this.createClassObject(property.entity, {});\n\n            if (objectValue && objectValue instanceof Object && !(objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)) {\n              this.isNestedBinding = this.isNested = true;\n              if (instanceContainer && instanceContainer.conditionalObjectProps) this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name);\n              if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps) this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name);\n              if (this.formGroupPropOtherValidator[property.name]) this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\n              let objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, objectValue, `${property.name}.`);\n              let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\n              formGroupObject[property.name] = this.formGroup(entity || property.entity || this.getEntity(objectValue, formBuilderConfiguration, property.name, true), objectValue, objectValidationConfig);\n              this.conditionalObjectProps = [];\n              this.builderConfigurationConditionalObjectProps = [];\n              this.isNestedBinding = this.isNested = false;\n            } else if (objectValue instanceof FormGroup || objectValue instanceof RxFormGroup) formGroupObject[property.name] = objectValue;\n\n            break;\n\n          case ARRAY_PROPERTY:\n            let arrayObjectValue = entityObject[property.name];\n\n            if (arrayObjectValue && arrayObjectValue instanceof Array && !(arrayObjectValue instanceof FormArray)) {\n              this.isNestedBinding = this.isNested = true;\n              var formArrayGroup = [];\n              let index = 0;\n              let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\n              let objectValidationConfig = null;\n\n              for (let subObject of arrayObjectValue) {\n                if (instanceContainer && instanceContainer.conditionalObjectProps) this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\n                if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps) this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\n                if (this.formGroupPropOtherValidator[property.name]) this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\n                objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, subObject, `${property.name}.`, `${property.name}[${index}].`);\n                formArrayGroup.push(this.formGroup(entity || property.entity || this.getEntity(subObject, formBuilderConfiguration, property.name, true), subObject, objectValidationConfig));\n                index++;\n                this.conditionalObjectProps = [];\n                this.builderConfigurationConditionalObjectProps = [];\n              }\n\n              let abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, {});\n              formGroupObject[property.name] = new RxFormArray(arrayObjectValue, formArrayGroup, abstractControlOptions, null, property.arrayConfig);\n\n              if (ReactiveFormConfig.autoInstancePush) {\n                arrayObjectValue.push = instance => {\n                  let formGroup = this.formGroup(instance.constructor, instance, objectValidationConfig);\n                  formGroupObject[property.name].push(formGroup, {\n                    isAddedInstance: true\n                  });\n                  return 0;\n                };\n\n                arrayObjectValue.splice = (start, deleteCount) => {\n                  let end = start + deleteCount - 1;\n\n                  for (var i = start; i <= end; i++) {\n                    formGroupObject[property.name].removeAt(i, {\n                      isRemovedInstance: true\n                    });\n                  }\n\n                  return [];\n                };\n              }\n\n              this.isNestedBinding = this.isNested = false;\n            } else if (arrayObjectValue instanceof FormArray) formGroupObject[property.name] = arrayObjectValue;else if (property.arrayConfig && property.arrayConfig.createBlank) formGroupObject[property.name] = new RxFormArray([], [], null, null, property.arrayConfig);\n\n            break;\n        }\n      }\n    });\n\n    if (!this.isNested) {\n      this.conditionalValidationInstance = {};\n      this.builderConfigurationConditionalObjectProps = [];\n    }\n\n    let abstractControlOptions = {\n      validators: [],\n      asyncValidators: [],\n      updateOn: formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions['global'] ? formBuilderConfiguration.abstractControlOptions['global'] : undefined\n    };\n    abstractControlOptions = this.getAbstractControlOptions(\"global\", formBuilderConfiguration, abstractControlOptions);\n    let formGroup = new RxFormGroup(json.model, json.entityObject, formGroupObject, abstractControlOptions);\n\n    if (defaultContainer.isExperimental) {\n      json.entityObject[\"formGroup\"] = formGroup;\n      this.overrideProperties(formGroup, json.entityObject, extendedProperties);\n    }\n\n    if (!this.isNestedBinding && !this.isGroupCalled) formGroup.refreshDisable();\n    return formGroup;\n  }\n\n  overrideProperties(formGroup, entityObject, properties) {\n    Object.keys(properties).forEach(t => {\n      this.overrideProp(entityObject, t, formGroup);\n    });\n  }\n\n  getAbstractControlOptions(name, formBuilderConfiguration, abstractControlOptions) {\n    if (formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions[name]) abstractControlOptions.updateOn = formBuilderConfiguration.abstractControlOptions[name];\n    const controlOptions = formBuilderConfiguration ? formBuilderConfiguration.baseAbstractControlOptions : null;\n\n    if (controlOptions && controlOptions[name]) {\n      if (controlOptions[name].updateOn) abstractControlOptions.updateOn = controlOptions[name].updateOn;\n\n      if (controlOptions[name].validators) {\n        if (Array.isArray(controlOptions[name].validators)) controlOptions[name].validators.forEach(validator => abstractControlOptions.validators.push(validator));else abstractControlOptions.validators.push(controlOptions[name].validators);\n      }\n\n      if (controlOptions[name].asyncValidators) {\n        if (Array.isArray(controlOptions[name].asyncValidators)) controlOptions[name].asyncValidators.forEach(validator => abstractControlOptions.asyncValidators.push(validator));else abstractControlOptions.asyncValidators.push(controlOptions[name].validators);\n      }\n    }\n\n    return abstractControlOptions;\n  }\n\n  overrideProp(entityObject, propName, formGroup) {\n    let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(entityObject), propName);\n    let value = entityObject[propName];\n    let oldValue = null;\n    Object.defineProperty(entityObject, propName, {\n      get: () => {\n        return descriptor ? descriptor.get.call(entityObject) : value;\n      },\n      set: v => {\n        value = v;\n\n        if (oldValue != v) {\n          if (descriptor) descriptor.set.call(entityObject, v);\n\n          if (!formGroup.changing && formGroup.controls[propName]) {\n            formGroup.controls[propName].setValue(v);\n          }\n        }\n\n        oldValue = v;\n      }\n    });\n  }\n\n}\n\nRxFormBuilder.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxFormBuilder,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.Injectable\n});\nRxFormBuilder.Éµprov = i0.ÉµÉµngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxFormBuilder\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxFormBuilder,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nclass TypedFormBuilder {\n  constructor() {\n    this.formBuilder = new FormBuilder();\n    this.rxFormBuilder = new RxFormBuilder();\n  }\n\n  group(controlsConfig, options) {\n    let paramOptions = options || {};\n    if (typeof controlsConfig == FUNCTION_STRING) return !(paramOptions && paramOptions.isInstance) ? this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config) : this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config).modelInstance;\n    return this.formBuilder.group(controlsConfig, options);\n  }\n\n}\n\nTypedFormBuilder.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: TypedFormBuilder,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.Injectable\n});\nTypedFormBuilder.Éµprov = i0.ÉµÉµngDeclareInjectable({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: TypedFormBuilder\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: TypedFormBuilder,\n  decorators: [{\n    type: Injectable\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nclass RxReactiveFormsModule {\n  static forRoot() {\n    return {\n      ngModule: RxReactiveFormsModule,\n      providers: []\n    };\n  }\n\n}\n\nRxReactiveFormsModule.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxReactiveFormsModule,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.NgModule\n});\nRxReactiveFormsModule.Éµmod = i0.ÉµÉµngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxReactiveFormsModule,\n  declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]\n});\nRxReactiveFormsModule.Éµinj = i0.ÉµÉµngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxReactiveFormsModule,\n  providers: [RxFormBuilder, DecimalProvider, DecimalPipe],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: RxReactiveFormsModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      providers: [RxFormBuilder, DecimalProvider, DecimalPipe],\n      exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]\n    }]\n  }]\n}); // Experimental\n\nclass ReactiveTypedFormsModule {\n  constructor() {\n    defaultContainer.isExperimental = true;\n    ReactiveFormConfig.autoInstancePush = true;\n  }\n\n  static forRoot() {\n    return {\n      ngModule: ReactiveTypedFormsModule,\n      providers: []\n    };\n  }\n\n}\n\nReactiveTypedFormsModule.Éµfac = i0.ÉµÉµngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ReactiveTypedFormsModule,\n  deps: [],\n  target: i0.ÉµÉµFactoryTarget.NgModule\n});\nReactiveTypedFormsModule.Éµmod = i0.ÉµÉµngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ReactiveTypedFormsModule,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule],\n  exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]\n});\nReactiveTypedFormsModule.Éµinj = i0.ÉµÉµngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ReactiveTypedFormsModule,\n  providers: [{\n    provide: FormBuilder,\n    useClass: TypedFormBuilder\n  }, TypedFormBuilder],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot(), ReactiveFormsModule, FormsModule, ReactiveFormsModule]\n});\ni0.ÉµÉµngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.2.12\",\n  ngImport: i0,\n  type: ReactiveTypedFormsModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [],\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],\n      providers: [{\n        provide: FormBuilder,\n        useClass: TypedFormBuilder\n      }, TypedFormBuilder],\n      exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]\n    }]\n  }],\n  ctorParameters: function () {\n    return [];\n  }\n});\n\nfunction baseValidator(config, type, validator) {\n  var rxwebValidator = (control, target) => {\n    if (typeof control == STRING) defaultContainer.init(target, 0, control, type, config, false);else {\n      if (config && (!control.validatorConfig || !control.validatorConfig[type])) ApplicationUtil.configureControl(control, config, type);\n      return validator(control);\n    }\n    return null;\n  };\n\n  Object.defineProperty(rxwebValidator, \"name\", {\n    value: RX_WEB_VALIDATOR\n  });\n  return rxwebValidator;\n}\n\nfunction baseAsyncValidatorExtension(config, type, validator) {\n  var rxwebValidator = (control, target) => {\n    if (typeof control == STRING) defaultContainer.init(target, 0, control, type, config, true);else {\n      if (config && (!control.validatorConfig || !control.validatorConfig[type])) ApplicationUtil.configureControl(control, config, type);\n      return validator(control);\n    }\n    return null;\n  };\n\n  Object.defineProperty(rxwebValidator, \"name\", {\n    value: RX_WEB_VALIDATOR\n  });\n  return rxwebValidator;\n}\n\nfunction alphaValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.alpha, alphaValidator(config));\n}\n\nfunction alphaAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.alpha, baseAsyncValidator(config, AnnotationTypes.alpha));\n}\n\nfunction allOfValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.allOf, allOfValidator(config));\n}\n\nfunction allOfAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.allOf, baseAsyncValidator(config, AnnotationTypes.allOf));\n}\n\nfunction alphaNumericValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.alphaNumeric, alphaNumericValidator(config));\n}\n\nfunction alphaNumericAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.alphaNumeric, baseAsyncValidator(config, AnnotationTypes.alphaNumeric));\n}\n\nfunction choiceValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.choice, choiceValidator(config));\n}\n\nfunction choiceAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.choice, baseAsyncValidator(config, AnnotationTypes.choice));\n}\n\nfunction compareValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.compare, compareValidator(config));\n}\n\nfunction containsValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.contains, containsValidator(config));\n}\n\nfunction containsAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.contains, baseAsyncValidator(config, AnnotationTypes.contains));\n}\n\nfunction creditCardValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.creditCard, creditCardValidator(config));\n}\n\nfunction creditCardAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.creditCard, baseAsyncValidator(config, AnnotationTypes.creditCard));\n}\n\nfunction differentValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.different, differentValidator(config));\n}\n\nfunction digitValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.digit, digitValidator(config));\n}\n\nfunction emailValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.email, emailValidator(config));\n}\n\nfunction evenValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.even, evenValidator(config));\n}\n\nfunction factorValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.factor, factorValidator(config));\n}\n\nfunction factorAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.factor, baseAsyncValidator(config, AnnotationTypes.factor));\n}\n\nfunction greaterThanEqualToValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.greaterThanEqualTo, greaterThanEqualToValidator(config));\n}\n\nfunction greaterThanEqualToAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThanEqualTo, baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo));\n}\n\nfunction greaterThanValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.greaterThan, greaterThanValidator(config));\n}\n\nfunction greaterThanAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThan, baseAsyncValidator(config, AnnotationTypes.greaterThan));\n}\n\nfunction hexColorValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.hexColor, hexColorValidator(config));\n}\n\nfunction jsonValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.json, jsonValidator(config));\n}\n\nfunction leapYearValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.leapYear, leapYearValidator(config));\n}\n\nfunction lessThanEqualToValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.lessThanEqualTo, lessThanEqualToValidator(config));\n}\n\nfunction lessThanEqualToAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.lessThanEqualTo, baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo));\n}\n\nfunction lessThanValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.lessThan, lessThanValidator(config));\n}\n\nfunction lessThanAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.lessThan, baseAsyncValidator(config, AnnotationTypes.lessThan));\n}\n\nfunction lowerCaseValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.lowerCase, lowercaseValidator(config));\n}\n\nfunction macValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.mac, macValidator(config));\n}\n\nfunction maxDateValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.maxDate, maxDateValidator(config));\n}\n\nfunction maxDateAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.maxDate, baseAsyncValidator(config, AnnotationTypes.maxDate));\n}\n\nfunction maxLengthValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.maxLength, maxLengthValidator(config));\n}\n\nfunction maxLengthAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.maxLength, baseAsyncValidator(config, AnnotationTypes.maxLength));\n}\n\nfunction maxNumberValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.maxNumber, maxNumberValidator(config));\n}\n\nfunction maxNumberAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.maxNumber, baseAsyncValidator(config, AnnotationTypes.maxNumber));\n}\n\nfunction minDateValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.minDate, minDateValidator(config));\n}\n\nfunction minDateAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.minDate, baseAsyncValidator(config, AnnotationTypes.minDate));\n}\n\nfunction minLengthValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.minLength, minLengthValidator(config));\n}\n\nfunction minLengthAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.minLength, baseAsyncValidator(config, AnnotationTypes.minLength));\n}\n\nfunction minNumberValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.minNumber, minNumberValidator(config));\n}\n\nfunction minNumberAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.minNumber, baseAsyncValidator(config, AnnotationTypes.minNumber));\n}\n\nfunction noneOfValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.noneOf, noneOfValidator(config));\n}\n\nfunction noneOfAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.noneOf, baseAsyncValidator(config, AnnotationTypes.noneOf));\n}\n\nfunction numericValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.numeric, numericValidator(config));\n}\n\nfunction numericAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.numeric, baseAsyncValidator(config, AnnotationTypes.numeric));\n}\n\nfunction oddValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.odd, oddValidator(config));\n}\n\nfunction oneOfValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.oneOf, oneOfValidator(config));\n}\n\nfunction oneOfAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.oneOf, baseAsyncValidator(config, AnnotationTypes.oneOf));\n}\n\nfunction passwordcValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.password, passwordValidator(config));\n}\n\nfunction passwordAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.password, baseAsyncValidator(config, AnnotationTypes.password));\n}\n\nfunction patternValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.pattern, patternValidator(config));\n}\n\nfunction patternAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.pattern, baseAsyncValidator(config, AnnotationTypes.pattern));\n}\n\nfunction rangeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.range, rangeValidator(config));\n}\n\nfunction rangeAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.range, baseAsyncValidator(config, AnnotationTypes.range));\n}\n\nfunction requiredValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.required, requiredValidator(config));\n}\n\nfunction timeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.time, timeValidator(config));\n}\n\nfunction timeAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.time, baseAsyncValidator(config, AnnotationTypes.time));\n}\n\nfunction upperCaseValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.upperCase, uppercaseValidator(config));\n}\n\nfunction urlValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.url, urlValidator(config));\n}\n\nfunction urlAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.url, baseAsyncValidator(config, AnnotationTypes.url));\n}\n\nfunction asciiValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.ascii, asciiValidator(config));\n}\n\nfunction dataUriValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.dataUri, dataUriValidator(config));\n}\n\nfunction portValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.port, portValidator(config));\n}\n\nfunction latLongValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.latLong, latLongValidator(config));\n}\n\nfunction extensionValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.extension, control => {\n    return null;\n  });\n}\n\nfunction extensionAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.extension, baseAsyncValidator(config, AnnotationTypes.extension));\n}\n\nfunction fileSizeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.fileSize, control => {\n    return null;\n  });\n}\n\nfunction fileSizeAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.fileSize, baseAsyncValidator(config, AnnotationTypes.fileSize));\n}\n\nfunction endsWithValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.endsWith, endsWithValidator(config));\n}\n\nfunction endsWithAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.endsWith, baseAsyncValidator(config, AnnotationTypes.endsWith));\n}\n\nfunction startsWithValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.startsWithWith, startsWithValidator(config));\n}\n\nfunction startsWithAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.startsWithWith, baseAsyncValidator(config, AnnotationTypes.startsWith));\n}\n\nfunction primeNumberValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.primeNumber, primeNumberValidator(config));\n}\n\nfunction latitudeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.latitude, latitudeValidator(config));\n}\n\nfunction longitudeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.longitude, longitudeValidator(config));\n}\n\nfunction composeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.compose, composeValidator(config));\n}\n\nfunction fileValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.file, control => {\n    return null;\n  });\n}\n\nfunction fileAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.file, baseAsyncValidator(config, AnnotationTypes.file));\n}\n\nfunction customValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.custom, customValidator(config));\n}\n\nfunction customAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.custom, baseAsyncValidator(config, AnnotationTypes.custom));\n}\n\nfunction uniqueValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.unique, uniqueValidator(config));\n}\n\nfunction imageValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.image, control => {\n    return null;\n  });\n}\n\nfunction imageAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.image, baseAsyncValidator(config, AnnotationTypes.image));\n}\n\nfunction notEmptyValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.notEmpty, notEmptyValidator(config));\n}\n\nfunction ipValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.ip, ipValidator(config));\n}\n\nfunction ipAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.ip, baseAsyncValidator(config, AnnotationTypes.ip));\n}\n\nfunction cusipValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.cusip, cusipValidator(config));\n}\n\nfunction gridValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.grid, gridValidator(config));\n}\n\nfunction dateValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.date, dateValidator(config));\n}\n\nfunction dateAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.date, baseAsyncValidator(config, AnnotationTypes.date));\n}\n\nfunction andValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.and, andValidator(config));\n}\n\nfunction orValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.or, orValidator(config));\n}\n\nfunction notValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.not, notValidator(config));\n}\n\nfunction minTimeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.minTime, minTimeValidator(config));\n}\n\nfunction minTimeAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.minTime, baseAsyncValidator(config, AnnotationTypes.minTime));\n}\n\nfunction maxTimeValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.maxTime, maxTimeValidator(config));\n}\n\nfunction maxTimeAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.maxTime, baseAsyncValidator(config, AnnotationTypes.maxTime));\n}\n\nfunction requiredTrueValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.requiredTrue, requiredTrueValidator(config));\n}\n\nfunction maskValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.mask, maskValidator(config));\n}\n\nfunction ibanValidatorExtension(config) {\n  return baseValidator(config, AnnotationTypes.iban, ibanValidator(config));\n}\n\nfunction ibanAsyncValidatorExtension(config) {\n  return baseAsyncValidatorExtension(config, AnnotationTypes.iban, baseAsyncValidator(config, AnnotationTypes.iban));\n}\n\nclass RxwebValidators {}\n\nRxwebValidators.alpha = alphaValidatorExtension;\nRxwebValidators.allOf = allOfValidatorExtension;\nRxwebValidators.alphaNumeric = alphaNumericValidatorExtension;\nRxwebValidators.choice = choiceValidatorExtension;\nRxwebValidators.compare = compareValidatorExtension;\nRxwebValidators.contains = containsValidatorExtension;\nRxwebValidators.creditCard = creditCardValidatorExtension;\nRxwebValidators.different = differentValidatorExtension;\nRxwebValidators.digit = digitValidatorExtension;\nRxwebValidators.email = emailValidatorExtension;\nRxwebValidators.even = evenValidatorExtension;\nRxwebValidators.factor = factorValidatorExtension;\nRxwebValidators.greaterThanEqualTo = greaterThanEqualToValidatorExtension;\nRxwebValidators.greaterThan = greaterThanValidatorExtension;\nRxwebValidators.hexColor = hexColorValidatorExtension;\nRxwebValidators.json = jsonValidatorExtension;\nRxwebValidators.leapYear = leapYearValidatorExtension;\nRxwebValidators.lessThanEqualTo = lessThanEqualToValidatorExtension;\nRxwebValidators.lessThan = lessThanValidatorExtension;\nRxwebValidators.lowerCase = lowerCaseValidatorExtension;\nRxwebValidators.mac = macValidatorExtension;\nRxwebValidators.maxDate = maxDateValidatorExtension;\nRxwebValidators.maxLength = maxLengthValidatorExtension;\nRxwebValidators.maxNumber = maxNumberValidatorExtension;\nRxwebValidators.minDate = minDateValidatorExtension;\nRxwebValidators.minLength = minLengthValidatorExtension;\nRxwebValidators.minNumber = minNumberValidatorExtension;\nRxwebValidators.noneOf = noneOfValidatorExtension;\nRxwebValidators.numeric = numericValidatorExtension;\nRxwebValidators.odd = oddValidatorExtension;\nRxwebValidators.oneOf = oneOfValidatorExtension;\nRxwebValidators.password = passwordcValidatorExtension;\nRxwebValidators.pattern = patternValidatorExtension;\nRxwebValidators.range = rangeValidatorExtension;\nRxwebValidators.required = requiredValidatorExtension;\nRxwebValidators.time = timeValidatorExtension;\nRxwebValidators.upperCase = upperCaseValidatorExtension;\nRxwebValidators.url = urlValidatorExtension;\nRxwebValidators.ascii = asciiValidatorExtension;\nRxwebValidators.dataUri = dataUriValidatorExtension;\nRxwebValidators.port = portValidatorExtension;\nRxwebValidators.latLong = latLongValidatorExtension;\nRxwebValidators.extension = extensionValidatorExtension;\nRxwebValidators.fileSize = fileSizeValidatorExtension;\nRxwebValidators.endsWith = endsWithValidatorExtension;\nRxwebValidators.startsWith = startsWithValidatorExtension;\nRxwebValidators.primeNumber = primeNumberValidatorExtension;\nRxwebValidators.latitude = latitudeValidatorExtension;\nRxwebValidators.longitude = longitudeValidatorExtension;\nRxwebValidators.compose = composeValidatorExtension;\nRxwebValidators.file = fileValidatorExtension;\nRxwebValidators.custom = customValidatorExtension;\nRxwebValidators.unique = uniqueValidatorExtension;\nRxwebValidators.image = imageValidatorExtension;\nRxwebValidators.notEmpty = notEmptyValidatorExtension;\nRxwebValidators.ip = ipValidatorExtension;\nRxwebValidators.cusip = cusipValidatorExtension;\nRxwebValidators.grid = gridValidatorExtension;\nRxwebValidators.date = dateValidatorExtension;\nRxwebValidators.and = andValidatorExtension;\nRxwebValidators.or = orValidatorExtension;\nRxwebValidators.not = notValidatorExtension;\nRxwebValidators.minTime = minTimeValidatorExtension;\nRxwebValidators.maxTime = maxTimeValidatorExtension;\nRxwebValidators.requiredTrue = requiredTrueValidatorExtension;\nRxwebValidators.mask = maskValidatorExtension;\nRxwebValidators.iban = ibanValidatorExtension;\nRxwebValidators.alphaAsync = alphaAsyncValidatorExtension;\nRxwebValidators.alphaNumericAsync = alphaNumericAsyncValidatorExtension;\nRxwebValidators.allOfAsync = allOfAsyncValidatorExtension;\nRxwebValidators.choiceAsync = choiceAsyncValidatorExtension;\nRxwebValidators.containsAsync = containsAsyncValidatorExtension;\nRxwebValidators.creditCardAsync = creditCardAsyncValidatorExtension;\nRxwebValidators.customAsync = customAsyncValidatorExtension;\nRxwebValidators.dateAsync = dateAsyncValidatorExtension;\nRxwebValidators.endsWithAsync = endsWithAsyncValidatorExtension;\nRxwebValidators.extensionAsync = extensionAsyncValidatorExtension;\nRxwebValidators.factorAsync = factorAsyncValidatorExtension;\nRxwebValidators.fileSizeAsync = fileSizeAsyncValidatorExtension;\nRxwebValidators.fileAsync = fileAsyncValidatorExtension;\nRxwebValidators.greaterThanEqualToAsync = greaterThanEqualToAsyncValidatorExtension;\nRxwebValidators.greaterThanAsync = greaterThanAsyncValidatorExtension;\nRxwebValidators.imageAsync = imageAsyncValidatorExtension;\nRxwebValidators.ipAsync = ipAsyncValidatorExtension;\nRxwebValidators.lessThanEqualToAsync = lessThanEqualToAsyncValidatorExtension;\nRxwebValidators.lessThanAsync = lessThanAsyncValidatorExtension;\nRxwebValidators.maxDateAsync = maxDateAsyncValidatorExtension;\nRxwebValidators.maxLengthAsync = maxLengthAsyncValidatorExtension;\nRxwebValidators.maxNumberAsync = maxNumberAsyncValidatorExtension;\nRxwebValidators.maxTimeAsync = maxTimeAsyncValidatorExtension;\nRxwebValidators.minDateAsync = minDateAsyncValidatorExtension;\nRxwebValidators.minLengthAsync = minLengthAsyncValidatorExtension;\nRxwebValidators.minNumberAsync = minNumberAsyncValidatorExtension;\nRxwebValidators.minTimeAsync = minTimeAsyncValidatorExtension;\nRxwebValidators.noneOfAsync = noneOfAsyncValidatorExtension;\nRxwebValidators.numericAsync = numericAsyncValidatorExtension;\nRxwebValidators.oneOfAsync = oneOfAsyncValidatorExtension;\nRxwebValidators.passwordAsync = passwordAsyncValidatorExtension;\nRxwebValidators.patternAsync = patternAsyncValidatorExtension;\nRxwebValidators.rangeAsync = rangeAsyncValidatorExtension;\nRxwebValidators.startsWithAsync = startsWithAsyncValidatorExtension;\nRxwebValidators.timeAsync = timeAsyncValidatorExtension;\nRxwebValidators.urlAsync = urlAsyncValidatorExtension;\nRxwebValidators.ibanAsync = ibanAsyncValidatorExtension;\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AsyncValidationDirective, ErrorMessageBindingStrategy, FileControlDirective, FormBuilderConfiguration, HtmlControlTemplateDirective, IAbstractControl, ImageFileControlDirective, IpVersion, NumericValueType, ReactiveFormConfig, ReactiveTypedFormsModule, ResetFormType, RxFormArray, RxFormBuilder, RxFormControl, RxFormControlDirective, RxFormGroup, RxReactiveFormsModule, RxwebFormDirective, RxwebValidators, TypedForm, TypedFormBuilder, UrlValidationType, ValidationAlphabetLocale, allOf, allOfAsync, alpha, alphaAsync, alphaNumeric, alphaNumericAsync, and, ascii, async, blacklist, choice, choiceAsync, compare, compose, contains, containsAsync, creditCard, creditCardAsync, cusip, custom, customAsync, dataUri, date, dateAsync, different, digit, disable, elementClass, email, endsWith, endsWithAsync, error, escape, even, extension, extensionAsync, factor, factorAsync, file, fileAsync, fileSize, fileSizeAsync, greaterThan, greaterThanAsync, greaterThanEqualTo, greaterThanEqualToAsync, grid, hexColor, image, imageAsync, json, latLong, latitude, leapYear, lessThan, lessThanAsync, lessThanEqualTo, lessThanEqualToAsync, longitude, lowerCase, ltrim, mac, mask, maxDate, maxDateAsync, maxLength, maxLengthAsync, maxNumber, maxNumberAsync, maxTime, maxTimeAsync, minDate, minDateAsync, minLength, minLengthAsync, minNumber, minNumberAsync, minTime, minTimeAsync, model, noneOf, noneOfAsync, not, notEmpty, numeric, numericAsync, odd, oneOf, oneOfAsync, or, password, passwordAsync, pattern, patternAsync, port, prefix, primeNumber, prop, propArray, propObject, range, rangeAsync, required, requiredTrue, rtrim, rule, sanitize, startsWith, startsWithAsync, stripLow, suffix, time, timeAsync, toBoolean, toDate, toDouble, toFloat, toInt, toString, trim, unique, updateOn, upperCase, url, urlAsync, whitelist }; //# sourceMappingURL=rxweb-reactive-form-validators.mjs.map","map":{"version":3,"sources":["C:/Users/PC-YOUSSRA/Desktop/inesProjet/RH-Front/RH-Front/node_modules/@rxweb/reactive-form-validators/fesm2015/rxweb-reactive-form-validators.mjs"],"names":["of","map","FormArray","FormControl","FormGroup","NG_ASYNC_VALIDATORS","NG_VALUE_ACCESSOR","NG_VALIDATORS","AbstractControl","FormBuilder","FormsModule","ReactiveFormsModule","i0","Directive","Input","forwardRef","LOCALE_ID","Injectable","Inject","NgModule","i1","getLocaleNumberSymbol","NumberSymbol","CommonModule","DecimalPipe","TypedForm","ValidationAlphabetLocale","CONTROLS_ERROR","VALUE_CHANGED_SYNC","FUNCTION_STRING","OBJECT_STRING","RX_WEB_VALIDATOR","NUMBER","BOOLEAN$1","CUSTOM","TEMPLATE_VALIDATION_CONFIG","CONDITIONAL_VALIDATOR","VALIDATOR_CONFIG$2","THIS","RXCODE","MODEL","MODEL_INSTANCE","PATCH","Linq","functionCreator","expression","functionSetter","match","splitSelect","split","i","length","equalToOperator","Function","input","accessFunction","execute","jObject","config","parentObject","modelInstance","isDynamicConfig","expressionFunction","dynamicConfig","conditionalExpression","lastParam","constructor","Object","call","getConditionPath","texts","path","trim","expressionParser","isNonValidationExpression","splitExpressions","columns","expressionString","toString","expressionArguments","extractArguments","splitTexts","replace","RegExp","forEach","t","text","push","x","startsWith","splitText","propName","argumentIndex","arrayProp","objectPropName","arrayIndex","undefined","expressionColumns","dynamicConfigParser","controlNames","splitString","splice","filter","AnnotationTypes","numeric","required","minLength","maxLength","minNumber","maxNumber","pattern","password","compare","minDate","maxDate","alpha","alphaNumeric","email","hexColor","lowerCase","url","upperCase","nested","propArray","propObject","contains","range","custom","digit","creditCard","time","json","greaterThan","greaterThanEqualTo","lessThan","lessThanEqualTo","choice","different","even","odd","factor","leapYear","allOf","oneOf","noneOf","mac","ascii","dataUri","port","latLong","extension","fileSize","endsWith","primeNumber","latitude","longitude","compose","rule","file","image","unique","notEmpty","ip","cusip","grid","date","and","or","not","minTime","maxTime","requiredTrue","mask","iban","updateOn","INVALID","PROPERTY","OBJECT_PROPERTY","ARRAY_PROPERTY","STRING","MESSAGE","BLANK","KEYPRESS","ONCHANGE","ONCLICK","ONKEYUP","ONBLUR","ONFOCUS","ELEMENT_VALUE","BLUR","FOCUS","CHANGE","KEY_DOWN","KEY_PRESS","PASTE","INPUT","SELECT","CHECKBOX","RADIO","FILE","TEXTAREA","DECORATORS","disabled","error","ltrim","rtrim","blacklist","stripLow","toBoolean","toDate","toDouble","toFloat","toInt","string","whitelist","escape","prefix","suffix","sanitize","elementClass","defaultContainer","instances","modelIncrementCount","get","instanceFunc","instance","getInstance","target","parameterIndex","propertyKey","decoratorType","isPropertyKey","addInstanceContainer","addPropsConfig","configs","instanceContainer","prop","propNames","propertyInfo","properties","name","propertyType","addPropConfig","excludeProp","excludePropNames","validationConfig","typeName","init","addDecoratorConfig","disable","ignore","addSanitizer","value","sanitizers","nonValidationDecorators","conditionalExpressions","column","columnName","changeDetection","disabledColumns","indexOf","controlProp","annotationType","isAsync","decoratorConfiguration","propertyIndex","propertyName","isValidator","addAnnotation","initPropertyObject","entity","dataPropertyName","entityProvider","defaultValue","objectConfig","autoCreate","addProperty","propertyAnnotations","isFromAnnotation","addPropertyInfo","isAddProperty","property","getProperty","updateProperty","messageNexus","addChangeValidation","setConditionalColumns","keys","validation","setLogicalConditional","fieldName","setConditionalValueProp","refPropName","splitProps","conditionalValidationProps","referencePropName","conditionalObjectProps","clearInstance","currentProperty","baseDecoratorFunction","RegExRule","alphaExits","alphaWithSpace","macId","onlyDigit","isDigitExits","specialCharacter","advancedEmail","basicEmail","alphaNumericWithSpace","strictHexColor","float","decimal","hexaDecimal","timeWithSeconds","localhostUrl","interanetUrl","lat","long","ipV4","ipV6","cidrV4","cidrV6","ALPHABET","DIGIT","CONTAINS","LOWERCASE","UPPERCASE","SPECIAL_CHARACTER","MIN_LENGTH","MAX_LENGTH","RegexValidator","isExits","regex","isValid","test","isNotBlank","isRemoveSpace","String","isValidPassword","passwordValidation","keyName","objectProperties","getOwnPropertyNames","isZero","commaRegex","ReactiveFormConfig","set","splitPath","i18n","number","autoInstancePush","ObjectMaker","toJson","key","values","setMessage","message","messageKey","messageText","validationMessage","index","Date","getDateString","refValues","isAddMessageKey","null","getPasswordMessage","language","seperator","baseConfig","dateFormat","internationalization","result","year","getFullYear","month","getMonth","day","getDay","concat","isObjectType","isObject","prototype","clone","jsonObject","Array","isArray","row","merge","firstObject","secondObject","isMatched","compareObject","isModified","PROP_ARRAY","RxFormArray","arrayObject","controls","validatorOrOpts","asyncValidator","arrayConfig","_isModified","_modified","cloneObject","control","options","isAddedInstance","formGroup","root","valueChangedSync","patch","checkValidation","checkModification","parent","resetForm","groupOption","_baseValue","pushFunction","commit","removeAt","isRemovedInstance","pop","setTimeout","allowMaxIndex","setErrors","errors","NumericValueType","IpVersion","ErrorMessageBindingStrategy","ResetFormType","MODEL_INSTANCE_VALUE","ApplicationUtil","getParentObjectValue","parentObjectValue","getParentModelInstanceValue","getRootFormGroup","getParentControl","getFormControlName","controlName","formControlName","getParentFormArray","toLower","toLowerCase","getControl","formControl","getFormControl","isNumeric","parseFloat","notEqualTo","primaryValue","secondaryValue","firstValue","secondValue","numericValidation","allowDecimal","acceptValue","decimalSymbol","allowDecimalSymbol","PositiveNumber","NegativeNumber","Both","configureControl","type","validatorConfig","assign","lowerCaseWithTrim","cloneValue","instanceProvider","entityObject","__proto__","isLoop","extendClassInstance","model","objectArguments","classInstance","create","apply","ex","Reflect","construct","DisableProvider","getFormGroupName","currentFormGroup","zeroArgumentProcess","getDisabledColumns","topControlPath","rootFormGroup","controlPath","isRoot","pathName","getChangeDetectionColumns","conditionalDisableControls","childControlDisabledExpression","props","y","oneArgumentProcess","childColumns","ISO_DATE_REGEX","DateProvider","isDate","isNaN","valueOf","getRegex","regExp","getDate","configDateFormat","isBaseFormat","val","allowISODate","getConfigDateValue","getCompareDate","checkControl","trim$1","ltrim$1","rtrim$1","blacklist$1","chars","stripLow$1","keepNewLines","toBoolean$1","strict","toFloat$1","toDouble$1","toInt$1","radix","parseInt","toString$1","whitelist$1","toDate$1","dateProvider","escape$1","prefix$1","suffix$1","sanitize$1","SANITIZERS","DIRTY","TOUCHED","UNTOUCHED","PRISTINE","PENDING","RxFormControl","formState","validator","baseObject","_sanitizers","_errorMessages","_childColumns","_refDisableControls","_refMessageControls","_refClassNameControls","_isPassedExpression","_dirty","backEndErrors","defineErrorsProperty","getFormState","_validators","validators","_asyncValidators","asyncValidators","_errorMessageBindingStrategy","floatSanitizer","baseValue","setValue","errorMessages","_messageExpression","setControlErrorMessages","_language","getLanguage","errorMessage","_errorMessage","defineProperty","configurable","_errors","getValidators","getValidatorSource","getAsyncValidators","setValidators","newValidator","setAsyncValidators","changing","parsedValue","getSanitizedValue","dirty","bindError","bindClassName","executeExpressions","callPatch","updateChanged","getControlValue","executeExpression","updateOnElementClass","className","_classNameExpression","updateElement","setBackEndErrors","clearBackEndErrors","markAsTouched","opts","currentState","touched","runControlPropChangeExpression","markAsUntouched","untouched","markAsDirty","markAsPristine","pristine","markAsPending","pending","_controlProp","checkErrorMessageStrategy","_classNameControlProp","refresh","getMessageExpression","bindConditionalControls","reset","getValue","isBind","OnSubmit","submitted","OnDirty","OnTouched","OnDirtyOrTouched","OnDirtyOrSubmit","OnTouchedOrSubmit","processExpression","sanitizer","refName","_disableProvider","getErrorMessage","errorObject","operationType","controlInfo","enable","OBJECT","BOOLEAN","FormDataProvider","convertToFormData","convertFormData","currentFormData","parentKey","formData","FormData","nonObjectValueBind","File","FileList","formValue","append","excludeImageIndex","item","isResetControl","isReset","resetType","ControlsOnly","ControlsAndFormGroupsOnly","FormGroupsOnly","FormArraysOnly","DefinedPropsOnly","with","getNestedOptions","jObjectOptions","nestedControls","splitControls","join","RxFormGroup","formDataProvider","bindPrimaryKey","primaryKeyProp","isPrimaryKey","modifiedValue","formArray","processModified","nestedFormsModification","nestedArrayIsModified","isDirty","currentValue","patchModelValue","patchValue","getErrorSummary","onlyMessage","validationName","refreshDisable","bindErrorMessages","_submitted","modelInstanceValue","controlsError","toFormData","clearErrors","formGroups","FormProvider","ProcessRule","expressionProcessed","formGroupValue","updateFormControlValue","forDisableUpdate","disableConfig","ValidatorValueChecker","pass","passArrayValue","ARRAY_CONFIG","FIELD_CONFIG","IP_CONFIG","NUMBER_CONFIG","PASSWORD_CONFIG","PATTERN_CONFIG","RANGE_CONFIG","RELATIONAL_OPERATOR_CONFIG","CONFIG_REQUIRED_FIELDS","getConfigObject","configName","configProvider","currentConfig","checkRequiredProps","Error","alphabet","alphaWithWhitespace","alphanumeric","alphanumericWithWitespace","alphaValidation","configModel","regExps","allowWhiteSpace","allowCharacters","alphaLocale","locale","defaultValidationLocale","alphaNumericLocale","alphaValidator","alphaNumericValidator","compareValidator","compareControl","controlValue","compareControlValue","containsValidator","failed","checkLength","checks","isPassed","check","calculate","numbers","numberSum","substring","deltas","mod","creditCardValidator","cardDigits","AmericanExpress","DinersClub","Discover","JCB","Maestro","MasterCard","Visa","validate","creditCardNumber","getCardProviderName","cardNumber","cardProviderName","cardTypes","creditCardTypes","cardType","creditCardType","regexValidation","digitValidator","emailValidator","hexColorValidator","lowercaseValidator","OPERATORS","runCondition$1","leftValue","rightValue","operator","dateChecker","checkDate","currentControlValue","validateDate","maxDateValidator","maxLengthValidator","maxNumberValidator","minDateValidator","minLengthValidator","minNumberValidator","passwordValidator","getMessageObject","rangeValidator","minimumNumber","maximumNumber","uppercaseValidator","toUpperCase","requiredValidator","patternValidator","timeValidator","allowSeconds","urlValidation","urlValidationType","urlValidator","jsonValidator","process","JSON","parse","operatorOpposite","relationalCheck","relationalOperatorName","matchControl","matchControlValue","isArrayControl","arrayControlValidation","isValid$1","setTimeFunc","invalidateControls","timeOut","updateValueAndValidity","clearTimeout","parentFormGroup","oppositeOperator","updateValidityControls","valid","validateControl","greaterThanValidator","greaterThanEqualToValidator","lessThanEqualToValidator","lessThanValidator","choiceValidator","differentValidator","differentControl","differentControlValue","numericValidator","evenValidator","oddValidator","factorValidator","positiveFactors","dividend","isPositive","Math","floor","sqrt","dividendField","leapYearValidator","allOfValidator","testResult","matchValues","some","oneOfValidator","matchValue","noneOfValidator","macValidator","asciiValidator","dataUriValidator","portValidator","latLongValidator","extensionValidator","files","extensions","isExcludeExtensions","fileSizeValidator","minFileSize","minSize","size","maxSize","endsWithValidator","endString","substr","startsWithValidator","startString","isRestrict","primeNumberValidator","isPrime","isPrimeNumber","latitudeValidator","longitudeValidator","composeValidator","ruleValidator","customRules","fileValidator","minFiles","maxFiles","customValidator","additionalValue","uniqueValidator","setTimeoutFunc","controlValues","additionalValidation","formArrayValue","matchedControl","imageValidator","Promise","resolve","reject","Image","minWidth","minHeight","onload","width","height","maxWidth","maxHeight","onerror","src","URL","createObjectURL","notEmptyValidator","checkIpV4","splitDots","ipNum","checkIpV6","ipValidator","isCidr","version","V4","V6","cusipValidator","numericValues","charCode","charCodeAt","totalCount","numericValue","gridValidator","alphaNums","alphaNumLength","charAt","dateValidator","runCondition","getTime","splitTime","timeChecker","crossFormControl","crossControlValue","minTimeValidator","maxTimeValidator","requiredTrueValidator","maskValidator","IBAN_COUNTRY_CODE_REGEX","AD","AE","AL","AT","AZ","BA","BE","BG","BH","BR","BY","CH","CR","CY","CZ","DE","DK","DO","EE","EG","ES","FI","FO","FR","GB","GE","GI","GL","GR","GT","HR","HU","IE","IL","IQ","IR","IS","IT","JO","KW","KZ","LB","LC","LI","LT","LU","LV","MC","MD","ME","MK","MR","MT","MU","NL","NO","PK","PL","PS","PT","QA","RO","RS","SA","SC","SE","SI","SK","SM","SV","TL","TN","TR","UA","VA","VG","XK","hasValidIbanFormat","countryCode","strippedStr","isoCountryCode","slice","hasValidIbanChecksum","str","rearranged","alphaCapsReplacedWithDigits","char","remainder","reduce","acc","Number","ibanValidator","APP_VALIDATORS","baseAsyncValidator","validatorName","pipe","resolveConfig","configClone","alphaAsync","alphaNumericAsync","containsAsync","creditCardAsync","maxDateAsync","maxLengthAsync","minDateAsync","maxNumberAsync","minLengthAsync","minNumberAsync","passwordAsync","patternAsync","createBlank","rangeAsync","timeAsync","urlAsync","greaterThanAsync","greaterThanEqualToAsync","lessThanEqualToAsync","lessThanAsync","choiceAsync","numericAsync","factorAsync","allOfAsync","oneOfAsync","noneOfAsync","extensionAsync","fileSizeAsync","endsWithAsync","startsWithAsync","fileAsync","customAsync","imageAsync","async","dateAsync","minTimeAsync","maxTimeAsync","HtmlControlTemplateDirective","templateRef","Éµfac","ÉµÉµngDeclareFactory","minVersion","ngImport","deps","token","TemplateRef","ÉµÉµFactoryTarget","Éµdir","ÉµÉµngDeclareClassMetadata","decorators","args","selector","ctorParameters","propDecorators","BaseDirective","applyValidations","modelConfig","setValidatorConfig","annotations","annotation","DISABLED_EXPRESSION","conditionalChangeValidator","timeOuts","oldValue","setTimeOut","runDisabledExpression","emitEvent","disabledConfig","a","abstractControl","isDisabled","RxwebFormDirective","arguments","clearTimeoutNumber","validationRule","ngAfterContentInit","expressionProcessor","setConditionalValidator","ngForm","configureModelValidations","form","rootFieldName","disableExpression","fields","nestedFormGroup","propWiseConditionalControls","ngOnDestroy","AsyncValidationDirective","provide","useExisting","multi","providers","VALIDATOR_CONFIG$1","FILE_VALIDATOR_NAMES","FileControlDirective","elementRef","isProcessed","onChange","_","onTouched","element","nativeElement","onChangeCall","writeFile","writeValue","registerOnChange","invocation","registerOnTouched","pushValidator","setConfig","ElementRef","host","VALIDATOR_CONFIG","ImageFileControlDirective","imageValidation","ControlExpressionProcess","controlConfig","setModelConfig","BaseValidator","maskProvider","setEventName","eventName","tagName","SIMPLE_EMAIL_VALIDATION","ADVANCED_EMAIL_VALIDATION","MaskProvider","renderer","eventListeners","slotChar","autoClear","isInvalid","internalProcess","bind","tests","partialPosition","len","firstNonMaskPos","defs","androidChrome","maskTokens","c","lastRequiredNonMaskPos","buffer","getPlaceholder","defaultBuffer","focusText","bindEvents","checkVal","listen","onFocus","onBlur","onKeyDown","onKeyPress","onInput","handleInputChange","isCompleted","getUnmaskedValue","updateFilledState","caret","first","last","begin","end","offsetParent","document","activeElement","setSelectionRange","collapse","moveEnd","moveStart","select","selectionStart","selectionEnd","createRange","duplicate","isNotRunValidator","completed","seekNext","pos","seekPrev","shiftL","j","writeBuffer","max","shiftR","handleAndroidInput","e","curVal","oldVal","pos2","focus","updateModel","event","createEvent","initEvent","dispatchEvent","maskedValue","valueWithMask","k","which","keyCode","iPhone","controlValid","clearBuffer","setControlValue","preventDefault","p","next","ctrlKey","altKey","metaKey","fromCharCode","start","allow","lastMatch","caretTimeoutId","isValidControl","unmaskedBuffer","filled","onDestroy","eventCount","DecimalProvider","decimalPipe","localeId","decimalSeperator","groupSeperator","isSetConfig","Decimal","Group","setSymbolInConfig","replacer","bindConfig","splitValue","transFormDecimal","digitsInfo","persistZero","transformedValue","transform","groupSymbol","splitTransformed","splitDigitsInfo","digits","diff","Éµprov","ÉµÉµngDeclareInjectable","NGMODEL_BINDING","RxFormControlDirective","ALLOW_VALIDATOR_WITHOUT_CONFIG","NUMERIC","IS_FORMAT","DIGITS_INFO","decimalProvider","isNumericSubscribed","isFocusCalled","isMasked","validationControls","ngOnInit","rxnumeric","isFormat","bindNumericElementEvent","blurEvent","setValueOnElement","listener","bindValueChangeEvent","subscribeNumericFormatter","subscribeMaskValidator","setProperty","setTemplateValidators","previousClassName","classList","remove","add","rxFormControl","conditionalValidator","Renderer2","rxalpha","rxalphaNumeric","rxascii","rxcompare","rxcompose","rxcontains","rxcreditCard","rxdataUri","rxdifferent","rxdigit","rxemail","rxendsWith","rxeven","rxextension","rxfactor","rxfileSize","rxgreaterThanEqualTo","rxgreaterThan","rxhexColor","rxjson","rxlatitude","rxlatLong","rxleapYear","rxlessThan","rxlessThanEqualTo","rxlongitude","rxlowerCase","rxmac","rxmaxDate","rxmaxLength","rxmaxNumber","rxminDate","rxminLength","rxminNumber","rxodd","rxpassword","rxport","rxprimeNumber","rxrequired","rxrange","rxrule","rxstartsWith","rxtime","rxupperCase","rxurl","rxunique","rxnotEmpty","rxcusip","rxgrid","rxdate","UrlValidationType","FormBuilderConfiguration","formBuilderConfiguration","IAbstractControl","ControlHostDirective","viewContainerRef","portal","context","view","destroy","createEmbeddedView","clear","ViewContainerRef","BaseFormBuilder","createInstance","modelName","createClassObject","autoInstanceConfig","objectPropInstanceConfig","objectProperty","data","setObjectValue","arrayPropInstanceConfig","rowItems","updateObject","genericEntities","objectValue","arrayObjectValue","instanceObject","instaceProvider","getDefaultValue","propsConfig","sanitizeValue","propValue","andValidator","validatorNames","orValidator","notValidator","LOGICAL_VALIDATORS","ASYNC","ENTITY_OBJECT","RxFormBuilder","conditionalValidationInstance","builderConfigurationConditionalObjectProps","formGroupPropOtherValidator","currentFormGroupPropOtherValidator","isNested","isGroupCalled","isNestedBinding","getInstanceContainer","object","col","extractExpressions","fomrBuilderConfiguration","dynamicValidation","decorator","addAsyncValidation","propertyValidators","propValidationConfig","propertyValidator","addFormControl","propConditions","validations","getEntity","isSameObjectConstructor","getObjectPropertyInstance","checkObjectPropAdditionalValidation","getObject","array","group","temp","formBuilder","groupObject","createValidatorFormGroup","applyAllPropValidator","applyAllProps","excludeProps","dynamicValidationPropCheck","dynamicValidationConfigurationPropertyName","isNotObject","propValidators","propertyAdded","propModelInstance","objectValidationConfig","getValidatorConfig","rootPropertyName","arrayPropertyName","includeProps","ignoreUndefinedProps","validationProps","getObjectForProperty","abstractControlOptions","getProps","rootObject","splitProp","isIgnoreProp","formGroupObject","extendedProperties","formChildGroup","formArrayGroup","additionalValidations","isIncludeProp","getAbstractControlOptions","runOn","subObject","deleteCount","isExperimental","overrideProperties","overrideProp","controlOptions","baseAbstractControlOptions","descriptor","getOwnPropertyDescriptor","getPrototypeOf","v","TypedFormBuilder","rxFormBuilder","controlsConfig","paramOptions","isInstance","RxReactiveFormsModule","forRoot","ngModule","Éµmod","ÉµÉµngDeclareNgModule","declarations","imports","exports","Éµinj","ÉµÉµngDeclareInjector","ReactiveTypedFormsModule","useClass","baseValidator","rxwebValidator","baseAsyncValidatorExtension","alphaValidatorExtension","alphaAsyncValidatorExtension","allOfValidatorExtension","allOfAsyncValidatorExtension","alphaNumericValidatorExtension","alphaNumericAsyncValidatorExtension","choiceValidatorExtension","choiceAsyncValidatorExtension","compareValidatorExtension","containsValidatorExtension","containsAsyncValidatorExtension","creditCardValidatorExtension","creditCardAsyncValidatorExtension","differentValidatorExtension","digitValidatorExtension","emailValidatorExtension","evenValidatorExtension","factorValidatorExtension","factorAsyncValidatorExtension","greaterThanEqualToValidatorExtension","greaterThanEqualToAsyncValidatorExtension","greaterThanValidatorExtension","greaterThanAsyncValidatorExtension","hexColorValidatorExtension","jsonValidatorExtension","leapYearValidatorExtension","lessThanEqualToValidatorExtension","lessThanEqualToAsyncValidatorExtension","lessThanValidatorExtension","lessThanAsyncValidatorExtension","lowerCaseValidatorExtension","macValidatorExtension","maxDateValidatorExtension","maxDateAsyncValidatorExtension","maxLengthValidatorExtension","maxLengthAsyncValidatorExtension","maxNumberValidatorExtension","maxNumberAsyncValidatorExtension","minDateValidatorExtension","minDateAsyncValidatorExtension","minLengthValidatorExtension","minLengthAsyncValidatorExtension","minNumberValidatorExtension","minNumberAsyncValidatorExtension","noneOfValidatorExtension","noneOfAsyncValidatorExtension","numericValidatorExtension","numericAsyncValidatorExtension","oddValidatorExtension","oneOfValidatorExtension","oneOfAsyncValidatorExtension","passwordcValidatorExtension","passwordAsyncValidatorExtension","patternValidatorExtension","patternAsyncValidatorExtension","rangeValidatorExtension","rangeAsyncValidatorExtension","requiredValidatorExtension","timeValidatorExtension","timeAsyncValidatorExtension","upperCaseValidatorExtension","urlValidatorExtension","urlAsyncValidatorExtension","asciiValidatorExtension","dataUriValidatorExtension","portValidatorExtension","latLongValidatorExtension","extensionValidatorExtension","extensionAsyncValidatorExtension","fileSizeValidatorExtension","fileSizeAsyncValidatorExtension","endsWithValidatorExtension","endsWithAsyncValidatorExtension","startsWithValidatorExtension","startsWithWith","startsWithAsyncValidatorExtension","primeNumberValidatorExtension","latitudeValidatorExtension","longitudeValidatorExtension","composeValidatorExtension","fileValidatorExtension","fileAsyncValidatorExtension","customValidatorExtension","customAsyncValidatorExtension","uniqueValidatorExtension","imageValidatorExtension","imageAsyncValidatorExtension","notEmptyValidatorExtension","ipValidatorExtension","ipAsyncValidatorExtension","cusipValidatorExtension","gridValidatorExtension","dateValidatorExtension","dateAsyncValidatorExtension","andValidatorExtension","orValidatorExtension","notValidatorExtension","minTimeValidatorExtension","minTimeAsyncValidatorExtension","maxTimeValidatorExtension","maxTimeAsyncValidatorExtension","requiredTrueValidatorExtension","maskValidatorExtension","ibanValidatorExtension","ibanAsyncValidatorExtension","RxwebValidators","ipAsync","ibanAsync"],"mappings":"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","sourcesContent":["import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALUE_ACCESSOR, NG_VALIDATORS, AbstractControl, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, forwardRef, LOCALE_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { getLocaleNumberSymbol, NumberSymbol, CommonModule, DecimalPipe } from '@angular/common';\n\nclass TypedForm {\r\n}\n\nconst ValidationAlphabetLocale = {\r\n    'danish': 'danish',\r\n    'french': 'french',\r\n    'german': 'german',\r\n    'greek': 'greek',\r\n    'spanish': 'spanish',\r\n    'russian': 'russian'\r\n};\n\nconst CONTROLS_ERROR = \"controlsError\";\r\nconst VALUE_CHANGED_SYNC = \"valueChangedSync\";\r\nconst FUNCTION_STRING = \"function\";\r\nconst OBJECT_STRING = \"object\";\r\nconst RX_WEB_VALIDATOR = \"rxwebValidator\";\r\nconst NUMBER = \"number\";\r\nconst BOOLEAN$1 = \"boolean\";\r\nconst CUSTOM = \"custom\";\r\nconst TEMPLATE_VALIDATION_CONFIG = \"template-validation-config\";\r\nconst CONDITIONAL_VALIDATOR = \"conditionalValidator\";\r\nconst VALIDATOR_CONFIG$2 = \"validatorConfig\";\r\nconst THIS = \"this\";\r\nconst RXCODE = \"-rxw-\";\r\nconst MODEL = \"model\";\r\nconst MODEL_INSTANCE = \"modelInstance\";\r\nconst PATCH = \"patch\";\n\nclass Linq {\r\n    static functionCreator(expression) {\r\n        var functionSetter = [];\r\n        var match = expression.match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=>(.*)/);\r\n        var splitSelect = match[2].split(\",\");\r\n        for (var i = 0; i < splitSelect.length; i++) {\r\n            var equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);\r\n            if (equalToOperator !== null) {\r\n                functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n            }\r\n            else {\r\n                equalToOperator = splitSelect[i].match(/^\\s*\\(?\\s*([^)]*)\\s*\\)?\\s*=(.*)/);\r\n                if (equalToOperator === null) {\r\n                    functionSetter = new Function(match[1], \"return \" + splitSelect.input);\r\n                }\r\n                else {\r\n                    functionSetter = new Function(match[1], \"return \" + equalToOperator.input);\r\n                }\r\n            }\r\n        }\r\n        if (splitSelect.length == 0)\r\n            functionSetter = { accessFunction: new Function(match[1], \"return \" + match[2]) };\r\n        return functionSetter;\r\n    }\r\n    static execute(jObject, config, parentObject, modelInstance, isDynamicConfig) {\r\n        let expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;\r\n        let lastParam = isDynamicConfig ? config : modelInstance;\r\n        if (parentObject && typeof expressionFunction == \"string\")\r\n            expressionFunction = Linq.functionCreator(expressionFunction);\r\n        if (parentObject && expressionFunction)\r\n            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);\r\n        return true;\r\n    }\r\n    static getConditionPath(texts) {\r\n        let path = \"\";\r\n        for (var i = 1; i < texts.length; i++)\r\n            path += (texts.length - 1) == i ? texts[i].trim() : `${texts[i].trim()}.`;\r\n        return path;\r\n    }\r\n    static expressionParser(expression, isNonValidationExpression) {\r\n        let splitExpressions = [];\r\n        let columns = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        if (expressionArguments.length > 0) {\r\n            let splitTexts = [];\r\n            expressionString.replace(/\\s/g, '').replace(new RegExp(/{|}/, \"g\"), \"\").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(t => {\r\n                let texts = t.replace(/\\(|\\)/g, \"\").split(\"||\");\r\n                for (let text of texts)\r\n                    splitTexts.push(text);\r\n            });\r\n            splitTexts.forEach(t => {\r\n                expressionArguments.forEach((x, i) => {\r\n                    t = t.trim();\r\n                    if (t.startsWith(x + '.')) {\r\n                        var splitText = t.split('.');\r\n                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))\r\n                            if (!isNonValidationExpression)\r\n                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                            else\r\n                                columns.push({ propName: this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });\r\n                        else {\r\n                            var arrayProp = splitText[1].split('[');\r\n                            let jObject = {\r\n                                propName: splitText[splitText.length - 1].trim(),\r\n                                objectPropName: arrayProp[0],\r\n                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i\r\n                            };\r\n                            columns.push(jObject);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return columns;\r\n    }\r\n    static extractArguments(splitText) {\r\n        let expressionArguments = [THIS];\r\n        if (splitText[0].trim() !== \"(\" && !splitText.trim().startsWith(\"function\")) {\r\n            let text = splitText[0].split(\"=>\")[0];\r\n            expressionArguments.push(text.trim().replace(\"(\", \"\").replace(\")\", \"\"));\r\n        }\r\n        else {\r\n            let splitTexts = splitText.match(/\\(([^)]+)\\)/g);\r\n            if (splitTexts && splitTexts[0])\r\n                splitTexts[0].split(\",\").forEach(t => expressionArguments.push(t.trim().replace(\"(\", \"\").replace(\")\", \"\")));\r\n        }\r\n        return expressionArguments;\r\n    }\r\n    static expressionColumns(expression, isNonValidationExpression = false) {\r\n        var columns = [];\r\n        let splitExpressions = [];\r\n        if (typeof expression == \"string\") {\r\n            expression.split(\"=>\")[1].split(\" && \").forEach(t => {\r\n                t.split(\" || \").forEach(x => {\r\n                    splitExpressions.push(x.trim().split(' ')[0]);\r\n                });\r\n            });\r\n            splitExpressions.forEach(t => {\r\n                var splitText = t.split('.');\r\n                if (splitText.length == 2)\r\n                    columns.push({ propName: splitText[1].trim() });\r\n                else {\r\n                    var arrayProp = splitText[1].split('[');\r\n                    let jObject = {\r\n                        propName: splitText[splitText.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined\r\n                    };\r\n                    columns.push(jObject);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            columns = Linq.expressionParser(expression, isNonValidationExpression);\r\n        }\r\n        return columns;\r\n    }\r\n    static dynamicConfigParser(expression, propName) {\r\n        let controlNames = [];\r\n        let expressionString = expression.toString();\r\n        let expressionArguments = Linq.extractArguments(expressionString);\r\n        let splitString = expressionString.replace(new RegExp(/\\r?\\n|\\r|;/g), ' ').replace(/[\"%()\\{}=\\\\?ï¿½`'#<>|,;:+-]+/g, \" \").split(/ /g);\r\n        if (expressionArguments.length > 3)\r\n            expressionArguments.splice(expressionArguments.length - 1, 1);\r\n        expressionArguments.forEach(t => {\r\n            splitString.filter(x => x != `${t}.${propName}` && x.startsWith(`${t}.`)).forEach(x => {\r\n                let split = x.split('.');\r\n                if (split.length == 2)\r\n                    controlNames.push({ propName: x.replace(`${t}.`, '') });\r\n                else {\r\n                    var arrayProp = split[1].split('[');\r\n                    let jObject = {\r\n                        propName: split[split.length - 1].trim(),\r\n                        objectPropName: arrayProp[0],\r\n                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace(\"]\", \"\") : undefined,\r\n                    };\r\n                    controlNames.push(jObject);\r\n                }\r\n            });\r\n        });\r\n        return controlNames;\r\n    }\r\n}\n\nconst AnnotationTypes = {\r\n    numeric: 'numeric',\r\n    required: 'required',\r\n    minLength: 'minLength',\r\n    maxLength: 'maxLength',\r\n    minNumber: 'minNumber',\r\n    maxNumber: 'maxNumber',\r\n    pattern: 'pattern',\r\n    password: 'password',\r\n    compare: 'compare',\r\n    minDate: 'minDate',\r\n    maxDate: 'maxDate',\r\n    alpha: 'alpha',\r\n    alphaNumeric: 'alphaNumeric',\r\n    email: 'email',\r\n    hexColor: 'hexColor',\r\n    lowerCase: 'lowerCase',\r\n    url: 'url',\r\n    upperCase: 'upperCase',\r\n    nested: 'nested',\r\n    propArray: 'propArray',\r\n    propObject: 'propObject',\r\n    contains: 'contains',\r\n    range: 'range',\r\n    custom: 'custom',\r\n    digit: \"digit\",\r\n    creditCard: \"creditCard\",\r\n    time: \"time\",\r\n    json: \"json\",\r\n    greaterThan: \"greaterThan\",\r\n    greaterThanEqualTo: \"greaterThanEqualTo\",\r\n    lessThan: \"lessThan\",\r\n    lessThanEqualTo: \"lessThanEqualTo\",\r\n    choice: \"choice\",\r\n    different: \"different\",\r\n    even: \"even\",\r\n    odd: \"odd\",\r\n    factor: \"factor\",\r\n    leapYear: \"leapYear\",\r\n    allOf: \"allOf\",\r\n    oneOf: \"oneOf\",\r\n    noneOf: \"noneOf\",\r\n    mac: \"mac\",\r\n    ascii: \"ascii\",\r\n    dataUri: \"dataUri\",\r\n    port: \"port\",\r\n    latLong: \"latLong\",\r\n    extension: \"extension\",\r\n    fileSize: \"fileSize\",\r\n    endsWith: \"endsWith\",\r\n    startsWith: \"startsWith\",\r\n    primeNumber: \"primeNumber\",\r\n    latitude: \"latitude\",\r\n    longitude: \"longitude\",\r\n    compose: \"compose\",\r\n    rule: \"rule\",\r\n    file: \"file\",\r\n    image: \"image\",\r\n    unique: \"unique\",\r\n    notEmpty: \"notEmpty\",\r\n    ip: \"ip\",\r\n    cusip: \"cusip\",\r\n    grid: \"grid\",\r\n    date: 'date',\r\n    and: 'and',\r\n    or: 'or',\r\n    not: 'not',\r\n    minTime: 'minTime',\r\n    maxTime: 'maxTime',\r\n    requiredTrue: 'requiredTrue',\r\n    mask: 'mask',\r\n    iban: 'iban',\r\n    updateOn: 'updateOn'\r\n};\n\nconst INVALID = \"INVALID\";\r\nconst PROPERTY = \"property\";\r\nconst OBJECT_PROPERTY = \"objectProperty\";\r\nconst ARRAY_PROPERTY = \"arrayProperty\";\r\nconst STRING = \"string\";\r\nconst MESSAGE = \"message\";\r\nconst BLANK = \"\";\n\nconst KEYPRESS = \"onkeypress\";\r\nconst ONCHANGE = \"onchange\";\r\nconst ONCLICK = \"onclick\";\r\nconst ONKEYUP = \"onkeyup\";\r\nconst ONBLUR = \"onblur\";\r\nconst ONFOCUS = \"onfocus\";\r\nconst ELEMENT_VALUE = \"value\";\r\nconst BLUR = \"blur\";\r\nconst FOCUS = \"focus\";\r\nconst CHANGE = \"change\";\r\nconst KEY_DOWN = \"keydown\";\r\nconst KEY_PRESS = \"keypress\";\r\nconst PASTE = \"paste\";\n\nconst INPUT = \"INPUT\";\r\nconst SELECT = \"SELECT\";\r\nconst CHECKBOX = \"checkbox\";\r\nconst RADIO = \"radio\";\r\nconst FILE = \"file\";\r\nconst TEXTAREA = \"textarea\";\n\nconst DECORATORS = {\r\n    disabled: 'disabled',\r\n    error: 'error',\r\n    trim: 'trim',\r\n    ltrim: 'ltrim',\r\n    rtrim: 'rtrim',\r\n    blacklist: 'blacklist',\r\n    stripLow: 'stripLow',\r\n    toBoolean: 'toBoolean',\r\n    toDate: 'toDate',\r\n    toDouble: 'toDouble',\r\n    toFloat: 'toFloat',\r\n    toInt: 'toInt',\r\n    string: 'toString',\r\n    whitelist: 'whitelist',\r\n    escape: 'escape',\r\n    prefix: 'prefix',\r\n    suffix: 'suffix',\r\n    sanitize: 'sanitize',\r\n    elementClass: 'elementClass',\r\n    updateOn: 'updateOn'\r\n};\n\nconst defaultContainer = new (class {\r\n    constructor() {\r\n        this.instances = [];\r\n        this.modelIncrementCount = 0;\r\n    }\r\n    get(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        return instance;\r\n    }\r\n    getInstance(target, parameterIndex, propertyKey, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        return instance;\r\n    }\r\n    addPropsConfig(target, configs) {\r\n        let instanceContainer = this.instances.filter(instance => instance.instance == target)[0];\r\n        if (instanceContainer) {\r\n            for (let config of configs) {\r\n                for (let prop of config.propNames) {\r\n                    let propertyInfo = instanceContainer.properties.filter(t => t.name == prop && (t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY))[0];\r\n                    if (propertyInfo) {\r\n                        this.addPropConfig(target, [propertyInfo], config);\r\n                    }\r\n                    else if (prop === \":all:\")\r\n                        this.addPropConfig(target, instanceContainer.properties.filter(t => t.propertyType !== OBJECT_PROPERTY && t.propertyType !== ARRAY_PROPERTY), config);\r\n                }\r\n            }\r\n        }\r\n        else if (configs === undefined)\r\n            this.addInstanceContainer(target);\r\n    }\r\n    addPropConfig(target, properties, config) {\r\n        for (var propertyInfo of properties) {\r\n            let excludeProp = false;\r\n            if (config.excludePropNames)\r\n                excludeProp = config.excludePropNames.filter(t => t == propertyInfo.name)[0] !== undefined;\r\n            if (!excludeProp) {\r\n                if (config.validationConfig)\r\n                    for (let typeName in config.validationConfig) {\r\n                        this.init({ constructor: target }, 0, propertyInfo.name, typeName, config.validationConfig[typeName] === true ? undefined : config.validationConfig[typeName], false);\r\n                    }\r\n                if (config.error)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.error, DECORATORS.error);\r\n                if (config.disable)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.disable, DECORATORS.disabled);\r\n                if (config.elementClass)\r\n                    this.addDecoratorConfig({ constructor: target }, 0, propertyInfo.name, config.elementClass, DECORATORS.elementClass);\r\n                if (config.ignore)\r\n                    propertyInfo.ignore = config.ignore;\r\n            }\r\n        }\r\n    }\r\n    addSanitizer(target, parameterIndex, propertyKey, decoratorType, value) {\r\n        let instance = this.getInstance(target, parameterIndex, propertyKey, decoratorType);\r\n        if (instance) {\r\n            if (!instance.sanitizers[propertyKey])\r\n                instance.sanitizers[propertyKey] = [];\r\n            instance.sanitizers[propertyKey].push({ name: decoratorType, config: value });\r\n        }\r\n    }\r\n    addDecoratorConfig(target, parameterIndex, propertyKey, config, decoratorType) {\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        let instanceFunc = !isPropertyKey ? target : target.constructor;\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (!instance)\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n        instance.nonValidationDecorators[decoratorType].conditionalExpressions[propertyKey] = config.conditionalExpression;\r\n        let columns = Linq.expressionColumns(config.conditionalExpression, true);\r\n        columns.forEach(column => {\r\n            if (column.argumentIndex !== -1) {\r\n                let columnName = (!column.objectPropName) ? `${column.propName}${RXCODE}${column.argumentIndex}` : `${column.objectPropName}.${column.propName}${RXCODE}${column.argumentIndex}`;\r\n                if (!instance.nonValidationDecorators[decoratorType].changeDetection[columnName])\r\n                    instance.nonValidationDecorators[decoratorType].changeDetection[columnName] = [];\r\n                let disabledColumns = instance.nonValidationDecorators[decoratorType].changeDetection[columnName];\r\n                if (disabledColumns.indexOf(columnName) === -1)\r\n                    disabledColumns.push(propertyKey);\r\n            }\r\n            else {\r\n                if (!instance.nonValidationDecorators[decoratorType].controlProp[propertyKey])\r\n                    instance.nonValidationDecorators[decoratorType].controlProp[propertyKey] = {};\r\n                instance.nonValidationDecorators[decoratorType].controlProp[propertyKey][column.propName.replace(\";\", \"\")] = true;\r\n            }\r\n        });\r\n    }\r\n    init(target, parameterIndex, propertyKey, annotationType, config, isAsync) {\r\n        var decoratorConfiguration = {\r\n            propertyIndex: parameterIndex,\r\n            propertyName: propertyKey,\r\n            annotationType: annotationType,\r\n            config: config,\r\n            isAsync: isAsync,\r\n            isValidator: annotationType !== \"updateOn\"\r\n        };\r\n        let isPropertyKey = (propertyKey != undefined);\r\n        this.addAnnotation(!isPropertyKey ? target : target.constructor, decoratorConfiguration);\r\n    }\r\n    initPropertyObject(name, propertyType, entity, target, config) {\r\n        var propertyInfo = {\r\n            name: name,\r\n            propertyType: propertyType,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined,\r\n            defaultValue: config ? config.defaultValue : undefined,\r\n            objectConfig: config && config.autoCreate ? { autoCreate: config.autoCreate } : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    }\r\n    addInstanceContainer(instanceFunc) {\r\n        let instanceContainer = {\r\n            instance: instanceFunc,\r\n            propertyAnnotations: [],\r\n            properties: [],\r\n            nonValidationDecorators: {\r\n                disabled: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, error: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }, elementClass: {\r\n                    conditionalExpressions: {},\r\n                    changeDetection: {},\r\n                    controlProp: {}\r\n                }\r\n            },\r\n            sanitizers: {}\r\n        };\r\n        this.instances.push(instanceContainer);\r\n        return instanceContainer;\r\n    }\r\n    addProperty(instanceFunc, propertyInfo, isFromAnnotation = false) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            this.addPropertyInfo(instance, propertyInfo, !isFromAnnotation);\r\n        }\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            this.addPropertyInfo(instance, propertyInfo);\r\n        }\r\n    }\r\n    addPropertyInfo(instance, propertyInfo, isAddProperty = false) {\r\n        var property = this.getProperty(instance, propertyInfo);\r\n        if (!property)\r\n            instance.properties.push(propertyInfo);\r\n        else if (isAddProperty)\r\n            this.updateProperty(property, propertyInfo);\r\n        if (property && propertyInfo.messageNexus)\r\n            property.messageNexus = propertyInfo.messageNexus;\r\n    }\r\n    addAnnotation(instanceFunc, decoratorConfiguration) {\r\n        this.addProperty(instanceFunc, { propertyType: PROPERTY, name: decoratorConfiguration.propertyName }, true);\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance)\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        else {\r\n            instance = this.addInstanceContainer(instanceFunc);\r\n            instance.propertyAnnotations.push(decoratorConfiguration);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.conditionalExpression) {\r\n            let columns = Linq.expressionColumns(decoratorConfiguration.config.conditionalExpression);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        if (decoratorConfiguration.config && decoratorConfiguration.config.dynamicConfig) {\r\n            let columns = Linq.dynamicConfigParser(decoratorConfiguration.config.dynamicConfig, decoratorConfiguration.propertyName);\r\n            this.addChangeValidation(instance, decoratorConfiguration.propertyName, columns);\r\n        }\r\n        this.setConditionalColumns(instance, decoratorConfiguration);\r\n    }\r\n    setConditionalColumns(instance, decoratorConfiguration) {\r\n        if (instance && decoratorConfiguration.config) {\r\n            if (decoratorConfiguration.annotationType == AnnotationTypes.and || decoratorConfiguration.annotationType == AnnotationTypes.or || decoratorConfiguration.annotationType == AnnotationTypes.not) {\r\n                Object.keys(decoratorConfiguration.config.validation).forEach(t => {\r\n                    if (typeof decoratorConfiguration.config.validation[t] !== \"boolean\")\r\n                        this.setLogicalConditional(instance, t, decoratorConfiguration.config.validation[t].fieldName, decoratorConfiguration.propertyName);\r\n                });\r\n            }\r\n            else\r\n                this.setLogicalConditional(instance, decoratorConfiguration.annotationType, decoratorConfiguration.config.fieldName, decoratorConfiguration.propertyName);\r\n        }\r\n    }\r\n    setLogicalConditional(instance, annotationType, fieldName, propertyName) {\r\n        if (instance && ((annotationType == AnnotationTypes.compare || annotationType == AnnotationTypes.greaterThan || annotationType == AnnotationTypes.greaterThanEqualTo || annotationType == AnnotationTypes.lessThan || annotationType == AnnotationTypes.lessThanEqualTo || annotationType == AnnotationTypes.different || annotationType == AnnotationTypes.factor || annotationType == AnnotationTypes.minTime || annotationType == AnnotationTypes.maxTime) || (annotationType == AnnotationTypes.creditCard && fieldName) || ((annotationType == AnnotationTypes.minDate || annotationType == AnnotationTypes.maxDate) && fieldName))) {\r\n            this.setConditionalValueProp(instance, fieldName, propertyName);\r\n        }\r\n    }\r\n    setConditionalValueProp(instance, propName, refPropName) {\r\n        if (propName) {\r\n            let splitProps = propName.split ? propName.split('.') : '';\r\n            if (splitProps.length < 2) {\r\n                if (!instance.conditionalValidationProps)\r\n                    instance.conditionalValidationProps = {};\r\n                if (!instance.conditionalValidationProps[propName])\r\n                    instance.conditionalValidationProps[propName] = [];\r\n                if (instance.conditionalValidationProps[propName].indexOf(refPropName) == -1)\r\n                    instance.conditionalValidationProps[propName].push(refPropName);\r\n            }\r\n            else\r\n                this.addChangeValidation(instance, refPropName, [{ argumentIndex: 1, objectPropName: splitProps[0], propName: splitProps[1], referencePropName: refPropName }]);\r\n        }\r\n    }\r\n    addChangeValidation(instance, propertyName, columns) {\r\n        if (instance) {\r\n            if (!instance.conditionalValidationProps)\r\n                instance.conditionalValidationProps = {};\r\n            columns.forEach(t => {\r\n                if (t.propName && !t.objectPropName) {\r\n                    if (!instance.conditionalValidationProps[t.propName])\r\n                        instance.conditionalValidationProps[t.propName] = [];\r\n                    if (instance.conditionalValidationProps[t.propName].indexOf(propertyName) == -1)\r\n                        instance.conditionalValidationProps[t.propName].push(propertyName);\r\n                }\r\n                else {\r\n                    if (t.propName && t.objectPropName) {\r\n                        if (!instance.conditionalObjectProps)\r\n                            instance.conditionalObjectProps = [];\r\n                        t.referencePropName = propertyName;\r\n                        instance.conditionalObjectProps.push(t);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    clearInstance(instanceFunc) {\r\n        let instance = this.instances.filter(instance => instance.instance === instanceFunc)[0];\r\n        if (instance) {\r\n            let indexOf = this.instances.indexOf(instance);\r\n            this.instances.splice(indexOf, 1);\r\n        }\r\n    }\r\n    getProperty(instance, propertyInfo) {\r\n        return instance.properties.filter(t => t.name == propertyInfo.name)[0];\r\n    }\r\n    updateProperty(property, currentProperty) {\r\n        property.dataPropertyName = currentProperty.dataPropertyName;\r\n        property.defaultValue = currentProperty.defaultValue;\r\n    }\r\n})();\n\nfunction baseDecoratorFunction(annotationType, config, isAsync = false) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.init(target, parameterIndex, propertyKey, annotationType, config, isAsync);\r\n    };\r\n}\n\nconst RegExRule = {\r\n    alpha: /^[a-zA-Z]+$/,\r\n    alphaExits: /[a-zA-Z]/,\r\n    alphaWithSpace: /^[a-zA-Z\\s]+$/,\r\n    macId: /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/,\r\n    onlyDigit: /^[0-9]+$/,\r\n    isDigitExits: /[0-9]/,\r\n    lowerCase: /[a-z]/,\r\n    upperCase: /[A-Z]/,\r\n    specialCharacter: /[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi,\r\n    advancedEmail: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n    basicEmail: /^(([^<>()\\[\\]\\\\.,,:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n    alphaNumeric: /^[0-9a-zA-Z]+$/,\r\n    alphaNumericWithSpace: /^[0-9a-zA-Z\\s]+$/,\r\n    hexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    strictHexColor: /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,\r\n    float: /^(?:[-+]?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/,\r\n    decimal: /^[-+]?([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/,\r\n    hexaDecimal: /^[0-9A-F]+$/i,\r\n    date: /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/,\r\n    time: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,\r\n    timeWithSeconds: /^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/,\r\n    url: /^(https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www)|(?!a-zA-Z))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})$/,\r\n    localhostUrl: /^(https?:\\/\\/localhost\\:([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|https?:\\/\\/localhost\\::([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))$/,\r\n    interanetUrl: /^(https?:\\/\\/[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9])$/,\r\n    ascii: /^[\\x00-\\x7F]+$/,\r\n    dataUri: /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*?)$/i,\r\n    lat: /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/,\r\n    long: /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/,\r\n    ipV4: /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/,\r\n    ipV6: /^((?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(:[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(:[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(:[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(:[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(:[a-fA-F\\d]{1,4}){1,6}|:)|(?::((?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(%[0-9a-zA-Z]{1,})?$/,\r\n    cidrV4: /^(3[0-2]|[12]?[0-9])$/,\r\n    cidrV6: /^(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\r\n    cusip: /^[0-9A-Z]{9}$/,\r\n    grid: /^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g\r\n};\n\nconst ALPHABET = \"alphabet\";\r\nconst DIGIT = \"digit\";\r\nconst CONTAINS = \"contains\";\r\nconst LOWERCASE = \"lowerCase\";\r\nconst UPPERCASE = \"upperCase\";\r\nconst SPECIAL_CHARACTER = \"specialCharacter\";\r\nconst MIN_LENGTH = \"minLength\";\r\nconst MAX_LENGTH = \"maxLength\";\r\nclass RegexValidator {\r\n    static isExits(value, regex) {\r\n        return value.match(regex) != null;\r\n    }\r\n    static isValid(value, regex) {\r\n        return regex.test(value);\r\n    }\r\n    static isNotBlank(value, isRemoveSpace = false) {\r\n        return !isRemoveSpace ?\r\n            (value === 0) || (value !== undefined && value !== null && value !== \"\") :\r\n            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== \"\");\r\n    }\r\n    static isValidPassword(passwordValidation, value) {\r\n        let isValid = false;\r\n        let jObject = {};\r\n        let keyName = \"status\";\r\n        let objectProperties = Object.getOwnPropertyNames(passwordValidation);\r\n        for (let propertyName of objectProperties) {\r\n            switch (propertyName) {\r\n                case ALPHABET:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.alphaExits);\r\n                    keyName = ALPHABET;\r\n                    break;\r\n                case DIGIT:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);\r\n                    keyName = DIGIT;\r\n                    break;\r\n                case CONTAINS:\r\n                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;\r\n                    keyName = CONTAINS;\r\n                    break;\r\n                case LOWERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.lowerCase);\r\n                    keyName = LOWERCASE;\r\n                    break;\r\n                case UPPERCASE:\r\n                    isValid = RegexValidator.isValid(value, RegExRule.upperCase);\r\n                    keyName = UPPERCASE;\r\n                    break;\r\n                case SPECIAL_CHARACTER:\r\n                    isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);\r\n                    keyName = SPECIAL_CHARACTER;\r\n                    break;\r\n                case MIN_LENGTH:\r\n                    isValid = value.length >= passwordValidation[propertyName];\r\n                    keyName = MIN_LENGTH;\r\n                    break;\r\n                case MAX_LENGTH:\r\n                    isValid = value.length <= passwordValidation[propertyName];\r\n                    keyName = MAX_LENGTH;\r\n                    break;\r\n            }\r\n            if (!isValid)\r\n                break;\r\n        }\r\n        return { isValid: isValid, keyName: keyName };\r\n    }\r\n    static isZero(value) {\r\n        return value == 0;\r\n    }\r\n    static commaRegex() {\r\n        return new RegExp(\",\", \"g\");\r\n    }\r\n}\n\nclass ReactiveFormConfig {\r\n    static set(jObject) {\r\n        if (jObject)\r\n            ReactiveFormConfig.json = jObject;\r\n    }\r\n    static get(path) {\r\n        let jObject;\r\n        if (ReactiveFormConfig.json) {\r\n            let splitPath = path.split('.');\r\n            for (let columnName of splitPath) {\r\n                jObject = (!jObject) ? ReactiveFormConfig.json[columnName] : jObject[columnName];\r\n                if (!jObject)\r\n                    break;\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n}\r\nReactiveFormConfig.i18n = {};\r\nReactiveFormConfig.number = {};\r\nReactiveFormConfig.json = {};\r\nReactiveFormConfig.autoInstancePush = false;\n\nclass ObjectMaker {\r\n    static toJson(key, config, values) {\r\n        ObjectMaker.setMessage();\r\n        let message = config ? config.message : null;\r\n        let messageKey = undefined;\r\n        if (!message && config && config.messageKey)\r\n            messageKey = config.messageKey;\r\n        let messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key]) ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';\r\n        values.forEach((t, index) => {\r\n            if (t instanceof Date)\r\n                t = this.getDateString(t);\r\n            messageText = messageText.replace(`{{${index}}}`, t);\r\n        });\r\n        if (config && config.messageNexus)\r\n            Object.keys(config.messageNexus).forEach(propName => {\r\n                messageText = messageText.replace(`{{${propName}}}`, config.messageNexus[propName]);\r\n            });\r\n        let jObject = {};\r\n        jObject[key] = {\r\n            message: messageText, refValues: values\r\n        };\r\n        if (config && config.isAddMessageKey)\r\n            jObject[\"messageKey\"] = messageKey;\r\n        return jObject;\r\n    }\r\n    static null() {\r\n        return null;\r\n    }\r\n    static getPasswordMessage() {\r\n        let messageKey = \"password\";\r\n        return (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey]) ? ReactiveFormConfig.json.validationMessage[messageKey] : '';\r\n    }\r\n    static setMessage() {\r\n        if (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.validationMessage && ObjectMaker.language !== ReactiveFormConfig.i18n.language) {\r\n            if (!ReactiveFormConfig.json)\r\n                ReactiveFormConfig.json = {};\r\n            ReactiveFormConfig.json.validationMessage = ReactiveFormConfig.i18n.validationMessage();\r\n            ObjectMaker.language = ReactiveFormConfig.i18n.language;\r\n        }\r\n    }\r\n    static getDateString(value) {\r\n        let seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\r\n        let dateFormat = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\r\n        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\r\n            seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n            dateFormat = ReactiveFormConfig.json.internationalization.dateFormat;\r\n        }\r\n        let result = '';\r\n        let year = value.getFullYear().toString();\r\n        let month = String(value.getMonth() + 1);\r\n        let day = String(value.getDay());\r\n        switch (dateFormat) {\r\n            case 'ymd':\r\n                result = \"\".concat(year, seperator, month, seperator, day);\r\n                break;\r\n            case 'dmy':\r\n                result = \"\".concat(day, seperator, month, seperator, year);\r\n                break;\r\n            case 'mdy':\r\n                result = \"\".concat(month, seperator, day, seperator, year);\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nObjectMaker.language = \"\";\n\nfunction isObjectType(value) {\r\n    return !(typeof value == \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value instanceof Date);\r\n}\r\nfunction isObject(value) {\r\n    return Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\nfunction clone(jsonObject) {\r\n    let jObject = {};\r\n    if (isObjectType(jsonObject)) {\r\n        for (var columnName in jsonObject) {\r\n            if ((columnName != \"formGroup\")) {\r\n                if (Array.isArray(jsonObject[columnName])) {\r\n                    jObject[columnName] = [];\r\n                    for (let row of jsonObject[columnName]) {\r\n                        if (isObject(row))\r\n                            jObject[columnName].push(clone(row));\r\n                        else\r\n                            jObject[columnName].push(row);\r\n                    }\r\n                }\r\n                else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n                    jObject[columnName] = clone(jsonObject[columnName]);\r\n                else\r\n                    jObject[columnName] = jsonObject[columnName];\r\n            }\r\n        }\r\n        return jObject;\r\n    }\r\n    else\r\n        return jsonObject;\r\n}\r\nfunction merge(firstObject, secondObject) {\r\n    for (var columnName in secondObject) {\r\n        if (Array.isArray(secondObject[columnName])) {\r\n            if (!firstObject[columnName])\r\n                firstObject[columnName] = [];\r\n            for (let row of secondObject[columnName])\r\n                firstObject[columnName].push(clone(row));\r\n        }\r\n        else if (typeof firstObject[columnName] == \"object\" && !(firstObject[columnName] instanceof RegExp))\r\n            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);\r\n        else\r\n            firstObject[columnName] = secondObject[columnName];\r\n    }\r\n    return firstObject;\r\n}\r\nfunction isMatched(jsonObject, compareObject) {\r\n    let isModified = false;\r\n    for (var columnName in compareObject) {\r\n        if (Array.isArray(jsonObject[columnName])) {\r\n            for (var i = 0; i < jsonObject[columnName].length; i++) {\r\n                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);\r\n            }\r\n        }\r\n        else if (typeof jsonObject[columnName] == \"object\" && !(jsonObject[columnName] instanceof RegExp))\r\n            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);\r\n        else\r\n            isModified = !(jsonObject[columnName] == compareObject[columnName]);\r\n        if (isModified)\r\n            break;\r\n    }\r\n    return isModified;\r\n}\n\nconst PROP_ARRAY = \"propArray\";\r\nclass RxFormArray extends FormArray {\r\n    constructor(arrayObject, controls, validatorOrOpts, asyncValidator, arrayConfig) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.arrayObject = arrayObject;\r\n        this.arrayConfig = arrayConfig;\r\n        this._isModified = false;\r\n        this._modified = [];\r\n        this.cloneObject(arrayObject);\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    push(control, options = { isAddedInstance: false }) {\r\n        let formGroup = this.root;\r\n        if (this.arrayObject)\r\n            if (control.modelInstance) {\r\n                if (!options.isAddedInstance)\r\n                    this.arrayObject.push(control.modelInstance);\r\n                else\r\n                    this.arrayObject[this.arrayObject.length] = control.modelInstance;\r\n            }\r\n        super.push(control);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    patch() {\r\n        this.checkModification();\r\n        if (this.parent)\r\n            this.parent[PATCH]();\r\n    }\r\n    resetForm(options) {\r\n        if (options && options.index >= 0 && options.groupOption) {\r\n            this.controls[options.index].resetForm(options.groupOption);\r\n        }\r\n        else {\r\n            for (var i = 0; i < this._baseValue.length; i++) {\r\n                if (this.controls[i] !== undefined)\r\n                    this.controls[i].resetForm({ value: this._baseValue[i] });\r\n                else if (options && options.pushFunction) {\r\n                    let formGroup = options.pushFunction(this._baseValue[i]);\r\n                    this.push(formGroup);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        this._baseValue = [];\r\n        for (let formGroup of this.controls) {\r\n            formGroup.commit();\r\n            this._baseValue.push(clone(formGroup.value));\r\n        }\r\n        this.patch();\r\n    }\r\n    removeAt(index, options = { isRemovedInstance: false }) {\r\n        let formGroup = this.root;\r\n        if (!options.isRemovedInstance)\r\n            this.arrayObject.splice(index, 1);\r\n        else {\r\n            for (var i = index; i < this.arrayObject.length - 1; i++)\r\n                this.arrayObject[i] = this.arrayObject[i + 1];\r\n            this.arrayObject.pop();\r\n        }\r\n        super.removeAt(index, options);\r\n        if (formGroup[VALUE_CHANGED_SYNC])\r\n            formGroup.valueChangedSync();\r\n        this.patch();\r\n        this.checkValidation();\r\n    }\r\n    checkValidation() {\r\n        setTimeout(() => {\r\n            if (this.arrayConfig != undefined && this.arrayConfig.allowMaxIndex && this.length > this.arrayConfig.allowMaxIndex)\r\n                this.setErrors(ObjectMaker.toJson(PROP_ARRAY, this.arrayConfig, [this.length, this.arrayConfig.allowMaxIndex]));\r\n            else if (this.errors && this.errors[PROP_ARRAY])\r\n                delete this.errors[PROP_ARRAY];\r\n        });\r\n    }\r\n    checkModification() {\r\n        this._isModified = !(this._baseValue.length == this.controls.length);\r\n        if (!this._isModified)\r\n            for (var i = 0; i < this.controls.length; i++) {\r\n                this._isModified = isMatched(this._baseValue[i], this.controls[i].value);\r\n                if (this._isModified)\r\n                    break;\r\n            }\r\n    }\r\n    cloneObject(value) {\r\n        this._baseValue = [];\r\n        for (let row of value) {\r\n            this._baseValue.push(clone(row));\r\n        }\r\n    }\r\n}\n\nvar NumericValueType;\r\n(function (NumericValueType) {\r\n    NumericValueType[NumericValueType[\"PositiveNumber\"] = 1] = \"PositiveNumber\";\r\n    NumericValueType[NumericValueType[\"NegativeNumber\"] = 2] = \"NegativeNumber\";\r\n    NumericValueType[NumericValueType[\"Both\"] = 3] = \"Both\";\r\n})(NumericValueType || (NumericValueType = {}));\n\nvar IpVersion;\r\n(function (IpVersion) {\r\n    IpVersion[IpVersion[\"V4\"] = 1] = \"V4\";\r\n    IpVersion[IpVersion[\"V6\"] = 2] = \"V6\";\r\n    IpVersion[IpVersion[\"AnyOne\"] = 3] = \"AnyOne\";\r\n})(IpVersion || (IpVersion = {}));\n\nvar ErrorMessageBindingStrategy;\r\n(function (ErrorMessageBindingStrategy) {\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"None\"] = 0] = \"None\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnSubmit\"] = 1] = \"OnSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirty\"] = 2] = \"OnDirty\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouched\"] = 3] = \"OnTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrTouched\"] = 4] = \"OnDirtyOrTouched\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnDirtyOrSubmit\"] = 5] = \"OnDirtyOrSubmit\";\r\n    ErrorMessageBindingStrategy[ErrorMessageBindingStrategy[\"OnTouchedOrSubmit\"] = 6] = \"OnTouchedOrSubmit\";\r\n})(ErrorMessageBindingStrategy || (ErrorMessageBindingStrategy = {}));\n\nvar ResetFormType;\r\n(function (ResetFormType) {\r\n    ResetFormType[ResetFormType[\"ControlsOnly\"] = 1] = \"ControlsOnly\";\r\n    ResetFormType[ResetFormType[\"FormGroupsOnly\"] = 2] = \"FormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"FormArraysOnly\"] = 3] = \"FormArraysOnly\";\r\n    ResetFormType[ResetFormType[\"ControlsAndFormGroupsOnly\"] = 4] = \"ControlsAndFormGroupsOnly\";\r\n    ResetFormType[ResetFormType[\"DefinedPropsOnly\"] = 5] = \"DefinedPropsOnly\";\r\n    ResetFormType[ResetFormType[\"All\"] = 6] = \"All\";\r\n})(ResetFormType || (ResetFormType = {}));\n\nconst MODEL_INSTANCE_VALUE = \"modelInstanceValue\";\r\nclass ApplicationUtil {\r\n    static getParentObjectValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent.value;\r\n        }\r\n        return {};\r\n    }\r\n    static getParentModelInstanceValue(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent[MODEL_INSTANCE_VALUE];\r\n        }\r\n        return {};\r\n    }\r\n    static getRootFormGroup(control) {\r\n        if (control.parent) {\r\n            return this.getRootFormGroup(control.parent);\r\n        }\r\n        return control;\r\n    }\r\n    static getParentControl(control) {\r\n        if (control.parent) {\r\n            let parent = this.parentObjectValue(control.parent);\r\n            return parent;\r\n        }\r\n        return control;\r\n    }\r\n    static getFormControlName(control) {\r\n        let controlName = '';\r\n        if (control.parent) {\r\n            for (var formControlName in control.parent.controls) {\r\n                if (control.parent.controls[formControlName] == control) {\r\n                    controlName = formControlName;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return controlName;\r\n    }\r\n    static getParentFormArray(control) {\r\n        if (control.parent && !(control.parent instanceof FormArray || control.parent instanceof RxFormArray)) {\r\n            let parent = this.getParentFormArray(control.parent);\r\n            return parent;\r\n        }\r\n        return control.parent;\r\n    }\r\n    static toLower(value) {\r\n        if (value)\r\n            return String(value).toLowerCase().trim();\r\n        return value;\r\n    }\r\n    static getControl(fieldName, formGroup) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1) {\r\n            var formControl = formGroup;\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        else\r\n            return formGroup.controls[fieldName];\r\n    }\r\n    static getFormControl(fieldName, control) {\r\n        let splitText = fieldName.split('.');\r\n        if (splitText.length > 1 && control.parent) {\r\n            var formControl = this.getParentControl(control);\r\n            splitText.forEach((name, index) => { formControl = formControl.controls[name]; });\r\n            return formControl;\r\n        }\r\n        return (control.parent) ? control.parent.get([fieldName]) : undefined;\r\n    }\r\n    static parentObjectValue(control) {\r\n        if (!control.parent)\r\n            return control;\r\n        else\r\n            control = this.parentObjectValue(control.parent);\r\n        return control;\r\n    }\r\n    static isNumeric(value) {\r\n        return (value - parseFloat(value) + 1) >= 0;\r\n    }\r\n    static notEqualTo(primaryValue, secondaryValue) {\r\n        let firstValue = (primaryValue === undefined || primaryValue === null) ? \"\" : primaryValue;\r\n        let secondValue = (secondaryValue === undefined || secondaryValue === null) ? \"\" : secondaryValue;\r\n        if (firstValue instanceof Date && secondValue instanceof Date)\r\n            return +firstValue != +secondValue;\r\n        return (firstValue != secondValue);\r\n    }\r\n    static numericValidation(allowDecimal, acceptValue) {\r\n        let decimalSymbol;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        else {\r\n            decimalSymbol = \".\";\r\n        }\r\n        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;\r\n        let regex = /^[0-9]+$/;\r\n        switch (acceptValue) {\r\n            case NumericValueType.PositiveNumber:\r\n                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[0-9\\.]+$/ : /^[0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.NegativeNumber:\r\n                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-][0-9\\.]+$/ : /^[-][0-9\\,]+$/;\r\n                break;\r\n            case NumericValueType.Both:\r\n                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == \".\" || decimalSymbol == undefined) ? /^[-|+]?[0-9\\.]+$/ : /^[-|+]?[0-9\\,]+$/;\r\n                break;\r\n        }\r\n        return regex;\r\n    }\r\n    static configureControl(control, config, type) {\r\n        if (!control.validatorConfig) {\r\n            let jObject = {};\r\n            jObject[type] = config;\r\n            Object.assign(control, { validatorConfig: jObject });\r\n        }\r\n        else\r\n            control.validatorConfig[type] = config;\r\n    }\r\n    static lowerCaseWithTrim(value) {\r\n        return typeof value === \"string\" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();\r\n    }\r\n    /** Check if a value is an object */\r\n    static isObject(value) {\r\n        return Object.prototype.toString.call(value) === '[object Object]';\r\n    }\r\n    /** Check if a value is an object */\r\n    static isArray(value) {\r\n        return Array.isArray(value);\r\n    }\r\n    static cloneValue(value) {\r\n        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? [...value] : Object.assign({}, value) : value;\r\n    }\r\n}\n\nfunction instanceProvider(instanceFunc, entityObject) {\r\n    let instance = defaultContainer.get(instanceFunc);\r\n    let prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;\r\n    if (prototype.__proto__) {\r\n        let isLoop = false;\r\n        do {\r\n            isLoop = prototype.__proto__.constructor != Object;\r\n            if (isLoop) {\r\n                let extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);\r\n                instance = merge(clone(instance), clone(extendClassInstance));\r\n                prototype = prototype.__proto__;\r\n            }\r\n        } while (isLoop);\r\n    }\r\n    return instance;\r\n}\r\nfunction getInstance(model, objectArguments) {\r\n    let classInstance = Object.create(model.prototype);\r\n    try {\r\n        model.apply(classInstance, objectArguments);\r\n    }\r\n    catch (ex) {\r\n        ///resolution of issue https://github.com/rxweb/rxweb/issues/188\r\n        classInstance = Reflect.construct(model, objectArguments);\r\n    }\r\n    return classInstance;\r\n}\n\nclass DisableProvider {\r\n    constructor(decoratorType, entityObject) {\r\n        this.decoratorType = decoratorType;\r\n        this.entityObject = entityObject;\r\n    }\r\n    getFormGroupName(currentFormGroup) {\r\n        let keyName = '';\r\n        if (currentFormGroup.parent)\r\n            for (var controlName of Object.keys(currentFormGroup.parent.controls))\r\n                if (currentFormGroup.parent.controls[controlName] == currentFormGroup) {\r\n                    keyName = controlName;\r\n                    break;\r\n                }\r\n        return keyName;\r\n    }\r\n    zeroArgumentProcess(control, columnName) {\r\n        let disabledColumns = [];\r\n        this.getDisabledColumns(control.parent, `${columnName}${RXCODE}0`, false).forEach(t => disabledColumns.push(t));\r\n        let path = this.topControlPath(control, columnName);\r\n        let splitPath = path.split(\".\");\r\n        if (splitPath.length > 1) {\r\n            let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            this.getDisabledColumns(rootFormGroup, `${path}${RXCODE}0`, true).forEach(t => disabledColumns.push(t));\r\n            let controlPath = '';\r\n            for (var i = 0; i < splitPath.length - 2; i++) {\r\n                let controlName = splitPath[i];\r\n                controlPath = `${path.replace(`${controlName}.`, '')}${RXCODE}-0`;\r\n                if (rootFormGroup.controls[controlName]) {\r\n                    this.getDisabledColumns(rootFormGroup.controls[controlName], controlPath, true, controlName).forEach(t => disabledColumns.push(t));\r\n                    rootFormGroup = rootFormGroup.controls[controlName];\r\n                }\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    getDisabledColumns(formGroup, columnName, isRoot, pathName = \"\") {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = instanceProvider(formGroup[MODEL_INSTANCE].constructor, this.entityObject);\r\n            return this.getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName);\r\n        }\r\n        return [];\r\n    }\r\n    getChangeDetectionColumns(instanceContainer, columnName, isRoot, pathName = \"\") {\r\n        let conditionalDisableControls = [];\r\n        let columns = instanceContainer.nonValidationDecorators[this.decoratorType].changeDetection[columnName];\r\n        if (columns) {\r\n            columns.forEach(t => {\r\n                conditionalDisableControls.push({ controlPath: pathName ? `${pathName}.${t}` : t, conditionalExpression: instanceContainer.nonValidationDecorators[this.decoratorType].conditionalExpressions[t], isRoot: isRoot });\r\n            });\r\n        }\r\n        return conditionalDisableControls;\r\n    }\r\n    topControlPath(control, columnName) {\r\n        if (control.parent) {\r\n            let name = this.getFormGroupName(control.parent);\r\n            if (name) {\r\n                columnName = `${name}.${columnName}`;\r\n                return this.topControlPath(control.parent, columnName);\r\n            }\r\n        }\r\n        return columnName;\r\n    }\r\n    childControlDisabledExpression(formGroup, columnName, path = \"\") {\r\n        let disabledColumns = [];\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this.getChangeDetectionColumns(instanceContainer, columnName, true, path).forEach(t => disabledColumns.push(t));\r\n                var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY);\r\n                props.forEach(t => {\r\n                    if (formGroup.controls[t.name]) {\r\n                        let columns = this.getDisabledColumns(formGroup.controls[t.name], columnName, true, path ? `${path}.${t.name}` : `${t.name}`);\r\n                        columns.forEach(x => disabledColumns.push(x));\r\n                        this.childControlDisabledExpression(formGroup.controls[t.name], columnName, path ? `${path}.${t.name}` : `${t.name}`).forEach(y => disabledColumns.push(y));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return disabledColumns;\r\n    }\r\n    oneArgumentProcess(control, columnName) {\r\n        let path = this.topControlPath(control, columnName);\r\n        let rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n        let childColumns = this.childControlDisabledExpression(rootFormGroup, path);\r\n        return childColumns;\r\n    }\r\n}\n\nconst ISO_DATE_REGEX = /^(?:[\\+-]?\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[\\.,]\\d+(?!:))?)?(?:\\2[0-5]\\d(?:[\\.,]\\d+)?)?(?:[zZ]|(?:[\\+-])(?:[01]\\d|2[0-3]):?(?:[0-5]\\d)?)?)?)?$/;\r\nclass DateProvider {\r\n    isDate(value) {\r\n        return value instanceof Date && !isNaN(value.valueOf());\r\n    }\r\n    getRegex(dateFormat) {\r\n        var regExp;\r\n        switch (dateFormat) {\r\n            case 'ymd':\r\n                regExp = \"^(?:[0-9]{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$\";\r\n                break;\r\n            case 'dmy':\r\n                regExp = \"^(3[01]|[12][0-9]|0?[1-9])-(1[0-2]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n            case 'mdy':\r\n                regExp = \"^(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])-(?:[0-9]{2})?[0-9]{2}$\";\r\n                break;\r\n        }\r\n        return new RegExp(regExp);\r\n    }\r\n    regex(config) {\r\n        var regExp;\r\n        if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator)\r\n            regExp = this.getRegex(config.dateFormat || ReactiveFormConfig.json.internationalization.dateFormat);\r\n        else\r\n            regExp = (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat) ? this.getRegex(config.dateFormat || ReactiveFormConfig.json.baseConfig.dateFormat) : this.getRegex(config.dateFormat || \"mdy\");\r\n        return regExp;\r\n    }\r\n    getDate(value, configDateFormat = undefined, isBaseFormat = false) {\r\n        let year, month, day;\r\n        if (!this.isDate(value)) {\r\n            let seperator;\r\n            let dateFormat;\r\n            if (ISO_DATE_REGEX.test(value)) {\r\n                return new Date(value);\r\n            }\r\n            else {\r\n                seperator = ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator ? ReactiveFormConfig.json.baseConfig.seperator : \"/\";\r\n                dateFormat = configDateFormat || ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.dateFormat ? ReactiveFormConfig.json.baseConfig.dateFormat : \"mdy\";\r\n            }\r\n            if (!isBaseFormat && ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.dateFormat && ReactiveFormConfig.json.internationalization.seperator) {\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n                dateFormat = configDateFormat || ReactiveFormConfig.json.internationalization.dateFormat;\r\n            }\r\n            switch (dateFormat) {\r\n                case 'ymd':\r\n                    [year, month, day] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'dmy':\r\n                    [day, month, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n                case 'mdy':\r\n                    [month, day, year] = value.split(seperator).map((val) => +val);\r\n                    break;\r\n            }\r\n            return new Date(year, month - 1, day);\r\n        }\r\n        else\r\n            return value;\r\n    }\r\n    isValid(value, config) {\r\n        if (config && config.isValid)\r\n            return config.isValid(value);\r\n        if (typeof value == \"string\") {\r\n            // Fixed issue : https://github.com/rxweb/rxweb/issues/280 & feature request : https://github.com/rxweb/rxweb/issues/295\r\n            if (config && config.allowISODate && ISO_DATE_REGEX.test(value))\r\n                return true;\r\n            let seperator = '/';\r\n            if (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.baseConfig && ReactiveFormConfig.json.baseConfig.seperator)\r\n                seperator = ReactiveFormConfig.json.baseConfig.seperator;\r\n            if (ReactiveFormConfig.json && ReactiveFormConfig.json.internationalization && ReactiveFormConfig.json.internationalization.seperator)\r\n                seperator = ReactiveFormConfig.json.internationalization.seperator;\r\n            if (value.split(seperator).length !== 3)\r\n                return false;\r\n            value = value.replace(seperator, '-').replace(seperator, '-');\r\n            return this.regex(config).test(value);\r\n        }\r\n        else\r\n            return this.isDate(value);\r\n    }\r\n    getConfigDateValue(config) {\r\n        let date = config.value;\r\n        if (config.value && typeof config.value == \"string\") {\r\n            date = this.getDate(config.value, config.dateFormat, true);\r\n        }\r\n        return date;\r\n    }\r\n    getCompareDate(config, control) {\r\n        let date = this.getConfigDateValue(config);\r\n        if (config.fieldName) {\r\n            let checkControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            if (checkControl && checkControl.value) {\r\n                date = this.getDate(checkControl.value, config.dateFormat);\r\n            }\r\n        }\r\n        return date;\r\n    }\r\n}\n\nfunction isNotBlank(value) {\r\n    return (value !== undefined && value !== null && value !== \"\");\r\n}\r\nfunction trim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.trim();\r\n    return value;\r\n}\r\n;\r\nfunction ltrim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/^\\s+/g, '');\r\n    return value;\r\n}\r\nfunction rtrim$1(value) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(/\\s+$/g, '');\r\n    return value;\r\n}\r\nfunction blacklist$1(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp('[$' + chars + ']+', 'g'), '');\r\n    return value;\r\n}\r\n;\r\nfunction stripLow$1(value, keepNewLines) {\r\n    let chars = keepNewLines === true ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';\r\n    return blacklist$1(value, chars);\r\n}\r\nfunction toBoolean$1(value, strict) {\r\n    if (isNotBlank(value)) {\r\n        if (strict) {\r\n            return value === '1' || value === 'true';\r\n        }\r\n        return value !== '0' && value !== 'false' && value !== '';\r\n    }\r\n    return value;\r\n}\r\nfunction toFloat$1(value) {\r\n    if (isNotBlank(value)) {\r\n        var decimalSymbol = '.';\r\n        if (ReactiveFormConfig && ReactiveFormConfig.number) {\r\n            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;\r\n        }\r\n        if (decimalSymbol == ',' && typeof value == \"string\")\r\n            value = value.replace(',', '.');\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseFloat(value);\r\n    }\r\n    return null;\r\n}\r\nfunction toDouble$1(value) {\r\n    return toFloat$1(value);\r\n}\r\nfunction toInt$1(value, radix) {\r\n    if (isNotBlank(value))\r\n        if (ApplicationUtil.isNumeric(value))\r\n            return parseInt(value, radix || 10);\r\n    return null;\r\n}\r\nfunction toString$1(value, radix) {\r\n    if (isNotBlank(value))\r\n        return String(value);\r\n    return value;\r\n}\r\nfunction whitelist$1(value, chars) {\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\")\r\n            return value.replace(new RegExp(`[^${chars}]+`, 'g'), '');\r\n    return value;\r\n}\r\nfunction toDate$1(value, config) {\r\n    var dateProvider = new DateProvider();\r\n    if (isNotBlank(value))\r\n        if (typeof value === \"string\" && dateProvider.isValid(value, config)) {\r\n            value = dateProvider.getDate(value);\r\n            return value;\r\n        }\r\n    return null;\r\n}\r\nfunction escape$1(value) {\r\n    if (isNotBlank(value))\r\n        return (value.replace(/&/g, '&amp;')\r\n            .replace(/\"/g, '&quot;')\r\n            .replace(/'/g, '&#x27;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\//g, '&#x2F;')\r\n            .replace(/\\\\/g, '&#x5C;')\r\n            .replace(/`/g, '&#96;'));\r\n    return value;\r\n}\r\nfunction prefix$1(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${text}${value}`;\r\n    return value;\r\n}\r\nfunction suffix$1(value, text) {\r\n    if (isNotBlank(value))\r\n        return `${value}${text}`;\r\n    return value;\r\n}\r\nfunction sanitize$1(value, config) {\r\n    return config.custom(value);\r\n}\r\nconst SANITIZERS = {\r\n    trim: trim$1,\r\n    ltrim: ltrim$1,\r\n    rtrim: rtrim$1,\r\n    blacklist: blacklist$1,\r\n    stripLow: stripLow$1,\r\n    toBoolean: toBoolean$1,\r\n    toDouble: toDouble$1,\r\n    toFloat: toFloat$1,\r\n    toInt: toInt$1,\r\n    'toString': toString$1,\r\n    whitelist: whitelist$1,\r\n    toDate: toDate$1,\r\n    escape: escape$1,\r\n    prefix: prefix$1,\r\n    suffix: suffix$1,\r\n    sanitize: sanitize$1\r\n};\n\nconst DIRTY = \"dirty\";\r\nconst TOUCHED = \"touched\";\r\nconst UNTOUCHED = \"untouched\";\r\nconst PRISTINE = \"pristine\";\r\nconst PENDING = \"pending\";\r\nclass RxFormControl extends FormControl {\r\n    constructor(formState, validator, asyncValidator, entityObject, baseObject, controlName, _sanitizers) {\r\n        super(formState, validator, asyncValidator);\r\n        this.entityObject = entityObject;\r\n        this.baseObject = baseObject;\r\n        this._sanitizers = _sanitizers;\r\n        this._errorMessages = [];\r\n        this._childColumns = [];\r\n        this._refDisableControls = [];\r\n        this._refMessageControls = [];\r\n        this._refClassNameControls = [];\r\n        this._isPassedExpression = false;\r\n        this._dirty = false;\r\n        this.backEndErrors = {};\r\n        this.defineErrorsProperty();\r\n        this._baseValue = formState === undefined ? null : this.getFormState(formState);\r\n        this._isModified = false;\r\n        this.keyName = controlName;\r\n        this._validators = validator.validators;\r\n        this._asyncValidators = validator.asyncValidators;\r\n        this._errorMessageBindingStrategy = ReactiveFormConfig.get(\"reactiveForm.errorMessageBindingStrategy\");\r\n        if (this._sanitizers) {\r\n            var floatSanitizer = this._sanitizers.filter(t => t.name == \"toFloat\")[0];\r\n            if (floatSanitizer && this._baseValue && ReactiveFormConfig.number && ReactiveFormConfig.number.decimalSymbol == \",\") {\r\n                let baseValue = String(this._baseValue);\r\n                if (baseValue.indexOf('.') != -1) {\r\n                    this._baseValue = baseValue.replace(\".\", ReactiveFormConfig.number.decimalSymbol);\r\n                    super.setValue(this._baseValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get errorMessages() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessages.length == 0 && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return [];\r\n        if (!this.errors && this._errorMessages.length > 0)\r\n            this.setControlErrorMessages();\r\n        if (this._language != this.getLanguage())\r\n            this.setControlErrorMessages();\r\n        return this._errorMessages;\r\n    }\r\n    get errorMessage() {\r\n        if (!this._messageExpression) {\r\n            if (this._errorMessage == undefined && this.errors)\r\n                this.setControlErrorMessages();\r\n        }\r\n        else if (this._messageExpression && !this._isPassedExpression)\r\n            return undefined;\r\n        if (!this.errors && this._errorMessage)\r\n            this.setControlErrorMessages();\r\n        if (this._language != this.getLanguage())\r\n            this.setControlErrorMessages();\r\n        return this._errorMessage;\r\n    }\r\n    defineErrorsProperty() {\r\n        Object.defineProperty(this, \"errors\", {\r\n            configurable: true,\r\n            get() {\r\n                if (this._language && this._language != this.getLanguage() && this.validator) {\r\n                    this[\"errors\"] = this.validator(this);\r\n                }\r\n                return this._errors;\r\n            },\r\n            set(value) { this._errors = value; },\r\n        });\r\n    }\r\n    getFormState(value) {\r\n        let baseValue = value;\r\n        if (Array.isArray(value)) {\r\n            baseValue = [];\r\n            value.forEach(t => baseValue.push(t));\r\n        }\r\n        return baseValue;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    getValidators() {\r\n        return this.getValidatorSource(this._validators);\r\n    }\r\n    getAsyncValidators() {\r\n        return this.getValidatorSource(this._asyncValidators);\r\n    }\r\n    getValidatorSource(validators) {\r\n        if (validators)\r\n            return Array.isArray(validators) ? [...validators] : [validators];\r\n        return [];\r\n    }\r\n    setValidators(newValidator) {\r\n        this._validators = newValidator;\r\n        super.setValidators(newValidator);\r\n    }\r\n    setAsyncValidators(newValidator) {\r\n        this._asyncValidators = newValidator;\r\n        super.setAsyncValidators(newValidator);\r\n    }\r\n    setValue(value, options) {\r\n        this.parent.changing = true;\r\n        let parsedValue = this.getSanitizedValue(value);\r\n        if (options && options.dirty)\r\n            this.baseObject[this.keyName] = value;\r\n        this.entityObject[this.keyName] = parsedValue;\r\n        super.setValue(value, options);\r\n        this.bindError();\r\n        this.bindClassName();\r\n        this.executeExpressions();\r\n        this.callPatch();\r\n        if (options && !options.updateChanged && this.root[VALUE_CHANGED_SYNC]) {\r\n            this.root[VALUE_CHANGED_SYNC]();\r\n        }\r\n        this.parent.changing = false;\r\n    }\r\n    getControlValue() {\r\n        return this.getSanitizedValue(this.value);\r\n    }\r\n    bindError() {\r\n        if (this._messageExpression)\r\n            this._isPassedExpression = this.executeExpression(this._messageExpression, this);\r\n        this.setControlErrorMessages();\r\n        var t = this;\r\n        t[\"errors\"] = this.errors;\r\n    }\r\n    bindClassName() {\r\n        if (this.updateOnElementClass && typeof this.updateOnElementClass === \"function\") {\r\n            let className = this.executeExpression(this._classNameExpression, this);\r\n            let updateElement = this.updateOnElementClass;\r\n            updateElement(className);\r\n        }\r\n    }\r\n    setBackEndErrors(error) {\r\n        Object.keys(error).forEach(key => this.backEndErrors[key] = error[key]);\r\n        this.setControlErrorMessages();\r\n    }\r\n    clearBackEndErrors(errors) {\r\n        if (!errors)\r\n            this.backEndErrors = {};\r\n        else\r\n            Object.keys(errors).forEach(t => delete this.backEndErrors[t]);\r\n        this.setControlErrorMessages();\r\n    }\r\n    markAsTouched(opts) {\r\n        let currentState = this.touched;\r\n        super.markAsTouched(opts);\r\n        if (currentState != this.touched)\r\n            this.runControlPropChangeExpression([TOUCHED, UNTOUCHED]);\r\n    }\r\n    markAsUntouched(opts) {\r\n        let currentState = this.untouched;\r\n        super.markAsUntouched(opts);\r\n        if (currentState != this.untouched)\r\n            this.runControlPropChangeExpression([UNTOUCHED, TOUCHED]);\r\n    }\r\n    markAsDirty(opts) {\r\n        let currentState = this._dirty;\r\n        super.markAsDirty(opts);\r\n        this._dirty = true;\r\n        if (currentState != this._dirty)\r\n            this.runControlPropChangeExpression([DIRTY]);\r\n    }\r\n    markAsPristine(opts) {\r\n        let currentState = this.pristine;\r\n        super.markAsPristine(opts);\r\n        if (currentState != this.pristine)\r\n            this.runControlPropChangeExpression([PRISTINE]);\r\n    }\r\n    markAsPending(opts) {\r\n        let currentState = this.pending;\r\n        super.markAsDirty(opts);\r\n        if (currentState != this.pending)\r\n            this.runControlPropChangeExpression([PENDING]);\r\n    }\r\n    runControlPropChangeExpression(propNames) {\r\n        propNames.forEach(name => {\r\n            if ((this._controlProp && this._messageExpression && this._controlProp[name]) || (!this._messageExpression && this.checkErrorMessageStrategy()))\r\n                this.bindError();\r\n            if (this._classNameControlProp && this._classNameControlProp[name])\r\n                this.bindClassName();\r\n        });\r\n    }\r\n    refresh() {\r\n        this.getMessageExpression(this.parent, this.keyName);\r\n        this.bindConditionalControls(DECORATORS.disabled, \"_refDisableControls\");\r\n        this.bindConditionalControls(DECORATORS.error, \"_refMessageControls\");\r\n        this.bindConditionalControls(DECORATORS.elementClass, \"_refClassNameControls\");\r\n        this.executeExpressions();\r\n        this.bindError();\r\n    }\r\n    reset(value, options = {}) {\r\n        if (value !== undefined)\r\n            this.setValue(value, options);\r\n        else\r\n            this.setValue(this.getFormState(this._baseValue), options);\r\n        this._dirty = false;\r\n    }\r\n    commit() {\r\n        this._baseValue = this.value;\r\n        this.callPatch();\r\n    }\r\n    callPatch() {\r\n        this._isModified = this.getValue(this._baseValue) != this.getValue(this.value);\r\n        if (this.parent && this.parent[PATCH])\r\n            this.parent[PATCH](this.keyName);\r\n    }\r\n    checkErrorMessageStrategy() {\r\n        let isBind = true;\r\n        switch (this._errorMessageBindingStrategy) {\r\n            case ErrorMessageBindingStrategy.OnSubmit:\r\n                isBind = this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirty:\r\n                isBind = this._dirty;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouched:\r\n                isBind = this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrTouched:\r\n                isBind = this._dirty || this.touched;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnDirtyOrSubmit:\r\n                isBind = this._dirty || this.parent.submitted;\r\n                break;\r\n            case ErrorMessageBindingStrategy.OnTouchedOrSubmit:\r\n                isBind = this.touched || this.parent.submitted;\r\n                break;\r\n            default:\r\n                isBind = true;\r\n        }\r\n        return isBind;\r\n    }\r\n    executeExpressions() {\r\n        this.processExpression(\"_refDisableControls\", \"disabled\");\r\n        this.processExpression(\"_refMessageControls\", \"bindError\");\r\n        this.processExpression(\"_refClassNameControls\", \"bindClassName\");\r\n    }\r\n    getMessageExpression(formGroup, keyName) {\r\n        if (formGroup[MODEL_INSTANCE]) {\r\n            let instanceContainer = defaultContainer.get(formGroup[MODEL_INSTANCE].constructor);\r\n            if (instanceContainer) {\r\n                this._messageExpression = instanceContainer.nonValidationDecorators.error.conditionalExpressions[keyName];\r\n                this._controlProp = instanceContainer.nonValidationDecorators.error.controlProp[this.keyName];\r\n                this._classNameExpression = instanceContainer.nonValidationDecorators.elementClass.conditionalExpressions[keyName];\r\n                this._classNameControlProp = instanceContainer.nonValidationDecorators.elementClass.controlProp[keyName];\r\n                if (this._classNameExpression)\r\n                    this.updateOnElementClass = true;\r\n            }\r\n        }\r\n    }\r\n    getSanitizedValue(value) {\r\n        if (this._sanitizers) {\r\n            for (let sanitizer of this._sanitizers) {\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    bindConditionalControls(decoratorType, refName) {\r\n        this._disableProvider = new DisableProvider(decoratorType, this.entityObject);\r\n        this[refName] = this._disableProvider.zeroArgumentProcess(this, this.keyName);\r\n        this._disableProvider.oneArgumentProcess(this, `${this.keyName}${RXCODE}1`).forEach(t => this[refName].push(t));\r\n    }\r\n    setControlErrorMessages() {\r\n        if ((!this._messageExpression && this.checkErrorMessageStrategy()) || this._isPassedExpression) {\r\n            this._errorMessages = [];\r\n            if (this.errors) {\r\n                Object.keys(this.errors).forEach(t => {\r\n                    if (this.parent) {\r\n                        this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                        if (!this._errorMessage) {\r\n                            let errorObject = ObjectMaker.toJson(t, undefined, [this.errors[t][t]]);\r\n                            this.parent[CONTROLS_ERROR][this.keyName] = this._errorMessage = this.getErrorMessage(errorObject, t);\r\n                        }\r\n                    }\r\n                    else\r\n                        this._errorMessage = this.getErrorMessage(this.errors, t);\r\n                    this._errorMessages.push(this._errorMessage);\r\n                });\r\n            }\r\n            else {\r\n                this._errorMessage = undefined;\r\n                if (this.parent) {\r\n                    this.parent[CONTROLS_ERROR][this.keyName] = undefined;\r\n                    delete this.parent[CONTROLS_ERROR][this.keyName];\r\n                }\r\n            }\r\n            let backEndErrors = Object.keys(this.backEndErrors);\r\n            if (backEndErrors.length > 0)\r\n                backEndErrors.forEach(t => { this._errorMessages.push(this._errorMessage = this.backEndErrors[t]); });\r\n        }\r\n        else {\r\n            this._errorMessages = [];\r\n            this._errorMessage = undefined;\r\n        }\r\n        this._language = this.getLanguage();\r\n    }\r\n    getLanguage() {\r\n        return (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.language) ? ReactiveFormConfig.i18n.language : undefined;\r\n    }\r\n    getErrorMessage(errorObject, keyName) {\r\n        if (errorObject[keyName][MESSAGE])\r\n            return errorObject[keyName][MESSAGE];\r\n        return;\r\n    }\r\n    processExpression(propName, operationType) {\r\n        if (this[propName])\r\n            for (var controlInfo of this[propName]) {\r\n                let control = controlInfo.isRoot ? ApplicationUtil.getControl(controlInfo.controlPath, ApplicationUtil.getRootFormGroup(this)) : ApplicationUtil.getFormControl(controlInfo.controlPath, this);\r\n                if (control) {\r\n                    if (operationType == \"disabled\") {\r\n                        let result = this.executeExpression(controlInfo.conditionalExpression, control);\r\n                        if (result)\r\n                            control.disable();\r\n                        else\r\n                            control.enable();\r\n                    }\r\n                    else if (operationType == \"bindError\")\r\n                        control.bindError();\r\n                    else if (operationType == \"bindClassName\")\r\n                        control.bindClassName();\r\n                }\r\n            }\r\n    }\r\n    executeExpression(expression, control) {\r\n        return expression.call(control.parent[MODEL_INSTANCE], control, ApplicationUtil.getParentModelInstanceValue(this), control.parent[MODEL_INSTANCE]);\r\n    }\r\n    getValue(value) {\r\n        return value !== undefined && value !== null && value !== \"\" ? value : \"\";\r\n    }\r\n}\n\nconst OBJECT = \"object\";\r\nconst BOOLEAN = \"boolean\";\r\nclass FormDataProvider {\r\n    convertToFormData(jObject, options) {\r\n        return this.convertFormData(jObject, undefined, undefined, options);\r\n    }\r\n    convertFormData(jObject, currentFormData, parentKey, options) {\r\n        let formData = currentFormData || new FormData();\r\n        let propName = '';\r\n        for (var columnName in jObject) {\r\n            propName = !parentKey ? columnName : `${parentKey}[${columnName}]`;\r\n            if (Array.isArray(jObject[columnName])) {\r\n                jObject[columnName].forEach((row, index) => {\r\n                    propName = `${columnName}[${index}]`;\r\n                    if (typeof row === OBJECT)\r\n                        this.convertFormData(row, formData, propName, options);\r\n                    else\r\n                        this.nonObjectValueBind(row, formData, propName, options);\r\n                });\r\n            }\r\n            else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {\r\n                this.convertFormData(jObject[columnName], formData, propName, options);\r\n            }\r\n            else {\r\n                this.nonObjectValueBind(jObject[columnName], formData, propName, options);\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n    nonObjectValueBind(value, formData, propName, options) {\r\n        if (typeof value === BOOLEAN) {\r\n            let formValue = value ? true : false;\r\n            formData.append(propName, formValue);\r\n        }\r\n        else if (value instanceof FileList) {\r\n            for (var i = 0; i < value.length; i++) {\r\n                formData.append(options && options.excludeImageIndex && value.length === 1 ? propName : `${propName}[${i}]`, value.item(i));\r\n            }\r\n        }\r\n        else {\r\n            if (RegexValidator.isNotBlank(value))\r\n                formData.append(propName, value);\r\n        }\r\n    }\r\n}\n\nfunction isResetControl(controlName, control, options) {\r\n    let isReset = true;\r\n    if (options) {\r\n        isReset = false;\r\n        if (options.resetType)\r\n            switch (options.resetType) {\r\n                case ResetFormType.ControlsOnly:\r\n                    isReset = control instanceof FormControl;\r\n                    break;\r\n                case ResetFormType.ControlsAndFormGroupsOnly:\r\n                    isReset = control instanceof FormControl || control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormGroupsOnly:\r\n                    isReset = control instanceof FormGroup;\r\n                    break;\r\n                case ResetFormType.FormArraysOnly:\r\n                    isReset = control instanceof FormArray;\r\n                    break;\r\n                case ResetFormType.DefinedPropsOnly:\r\n                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;\r\n                    break;\r\n                default:\r\n                    isReset = true;\r\n                    break;\r\n            }\r\n        if (!isReset && options.with)\r\n            isReset = options.with.filter(x => x.split('.')[0] == controlName.split('.')[0])[0] !== undefined;\r\n        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))\r\n            isReset = true;\r\n    }\r\n    return isReset;\r\n}\r\nfunction getNestedOptions(controlName, options) {\r\n    if (options) {\r\n        let jObjectOptions = {};\r\n        if (options.resetType)\r\n            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;\r\n        if (options.with) {\r\n            let nestedControls = options.with.filter(t => t.split('.')[0] == controlName);\r\n            let controlNames = nestedControls.map(x => {\r\n                let splitControls = x.split('.');\r\n                splitControls.splice(0, 1);\r\n                return splitControls.join('.');\r\n            });\r\n            jObjectOptions.with = controlNames;\r\n        }\r\n        if (options.value && options.value[controlName])\r\n            jObjectOptions.value = options.value[controlName];\r\n        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;\r\n        return jObjectOptions;\r\n    }\r\n    return undefined;\r\n}\n\nclass RxFormGroup extends FormGroup {\r\n    constructor(model, entityObject, controls, validatorOrOpts, asyncValidator) {\r\n        super(controls, validatorOrOpts, asyncValidator);\r\n        this.model = model;\r\n        this.entityObject = entityObject;\r\n        this._modified = {};\r\n        this._isModified = false;\r\n        this.changing = false;\r\n        this.baseObject = {};\r\n        for (var column in this.entityObject)\r\n            this.baseObject[column] = this.entityObject[column];\r\n        this.formDataProvider = new FormDataProvider();\r\n    }\r\n    bindPrimaryKey(modelInstance, jObject) {\r\n        let instanceContainer = defaultContainer.get(modelInstance.constructor);\r\n        if (instanceContainer) {\r\n            let primaryKeyProp = instanceContainer.properties.filter(x => x.isPrimaryKey)[0];\r\n            if (primaryKeyProp && this.modelInstance[primaryKeyProp.name])\r\n                jObject[primaryKeyProp.name] = this.modelInstance[primaryKeyProp.name];\r\n        }\r\n    }\r\n    get modifiedValue() {\r\n        let jObject = {};\r\n        if (Object.keys(this._modified).length > 0) {\r\n            this.bindPrimaryKey(this.modelInstance, jObject);\r\n            for (var columnName in this._modified) {\r\n                if (this.controls[columnName] instanceof RxFormGroup)\r\n                    jObject[columnName] = this.controls[columnName].modifiedValue;\r\n                else if (this.controls[columnName] instanceof FormArray) {\r\n                    let formArray = this.controls[columnName];\r\n                    jObject[columnName] = [];\r\n                    for (var i = 0; i < this._modified[columnName].length; i++) {\r\n                        let modifiedValue = formArray.controls[i].modifiedValue;\r\n                        if (Object.keys(modifiedValue).length > 0)\r\n                            jObject[columnName].push(modifiedValue);\r\n                    }\r\n                    if (jObject[columnName].length == 0)\r\n                        delete jObject[columnName];\r\n                }\r\n                else\r\n                    jObject[columnName] = this._modified[columnName];\r\n            }\r\n            return jObject;\r\n        }\r\n        return this._modified;\r\n    }\r\n    get isModified() {\r\n        return this._isModified;\r\n    }\r\n    patch(controlName) {\r\n        if (controlName) {\r\n            let control = this.controls[controlName];\r\n            this.processModified(controlName, control);\r\n        }\r\n        else {\r\n            this.nestedFormsModification();\r\n        }\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n        if (!this._isModified)\r\n            this.nestedArrayIsModified();\r\n        if (this.parent && this.parent.patch)\r\n            this.parent.patch();\r\n    }\r\n    isDirty() {\r\n        let isDirty = false;\r\n        for (let name in this.value) {\r\n            let currentValue = this.modelInstance[name];\r\n            if (!(this.controls[name] instanceof FormGroup || this.controls[name] instanceof FormArray)) {\r\n                isDirty = ApplicationUtil.notEqualTo(this.baseObject[name], currentValue);\r\n            }\r\n            else if (this.controls[name] instanceof RxFormGroup)\r\n                isDirty = this.controls[name].isDirty();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                for (let formGroup of this.controls[name].controls) {\r\n                    isDirty = formGroup.isDirty();\r\n                }\r\n            }\r\n            if (isDirty)\r\n                break;\r\n        }\r\n        return isDirty;\r\n    }\r\n    ;\r\n    resetForm(options) {\r\n        for (let name in this.controls) {\r\n            if (isResetControl(name, this.controls[name], options)) {\r\n                if (this.controls[name] instanceof FormGroup)\r\n                    this.controls[name].resetForm(getNestedOptions(name, options));\r\n                else if (this.controls[name] instanceof FormArray) {\r\n                    this.controls[name].resetForm(options && options.value ? options.value[name] : undefined);\r\n                }\r\n                else {\r\n                    if (options && options.value && RegexValidator.isNotBlank(options.value[name]))\r\n                        this.controls[name].reset(options.value[name]);\r\n                    else\r\n                        this.controls[name].reset();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    commit() {\r\n        for (let name in this.controls) {\r\n            if (this.controls[name] instanceof FormGroup)\r\n                this.controls[name].commit();\r\n            else if (this.controls[name] instanceof FormArray) {\r\n                this.controls[name].commit();\r\n            }\r\n            else {\r\n                this.controls[name].commit();\r\n            }\r\n        }\r\n    }\r\n    patchModelValue(value, options) {\r\n        if (value) {\r\n            for (let name in this.controls) {\r\n                if (this.controls[name] instanceof RxFormGroup && value[name])\r\n                    this.controls[name].patchModelValue(value[name], options);\r\n                else if (this.controls[name] instanceof FormArray && Array.isArray(value[name])) {\r\n                    let index = 0;\r\n                    for (let formGroup of this.controls[name].controls) {\r\n                        if (value[name][index])\r\n                            formGroup.patchModelValue(value[name][index], options);\r\n                        index = index + 1;\r\n                    }\r\n                }\r\n                else if (value[name] !== undefined)\r\n                    this.controls[name].patchValue(value[name], options);\r\n            }\r\n        }\r\n    }\r\n    getErrorSummary(onlyMessage) {\r\n        let jObject = {};\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormGroup) {\r\n                let error = this.controls[columnName].getErrorSummary(false);\r\n                if (Object.keys(error).length > 0)\r\n                    jObject[columnName] = error;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormArray) {\r\n                let index = 0;\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    let error = formGroup.getErrorSummary(false);\r\n                    if (Object.keys(error).length > 0) {\r\n                        error.index = index;\r\n                        if (!jObject[columnName])\r\n                            jObject[columnName] = [];\r\n                        jObject[columnName].push(error);\r\n                    }\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                if (this.controls[columnName].errors) {\r\n                    let error = this.controls[columnName].errors;\r\n                    if (onlyMessage)\r\n                        for (let validationName in error)\r\n                            jObject[columnName] = error[validationName].message;\r\n                    else\r\n                        jObject[columnName] = error;\r\n                }\r\n            }\r\n        });\r\n        return jObject;\r\n    }\r\n    valueChangedSync() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup) && !(this.entityObject[columnName] instanceof FormControl || this.entityObject[columnName] instanceof RxFormControl) && this.controls[columnName].getControlValue && ApplicationUtil.notEqualTo(this.controls[columnName].getControlValue(), this.entityObject[columnName])) {\r\n                this.controls[columnName].setValue(this.entityObject[columnName], { updateChanged: true });\r\n            }\r\n            else if ((this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray)) {\r\n                for (let formGroup of this.controls[columnName].controls) {\r\n                    formGroup.valueChangedSync();\r\n                }\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].valueChangedSync();\r\n            }\r\n        });\r\n    }\r\n    refreshDisable() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refresh();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].refreshDisable();\r\n            }\r\n        });\r\n    }\r\n    bindErrorMessages() {\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (!(this.controls[columnName] instanceof FormArray || this.controls[columnName] instanceof RxFormArray) && !(this.controls[columnName] instanceof FormGroup || this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindError();\r\n            }\r\n            else if ((this.controls[columnName] instanceof RxFormGroup)) {\r\n                this.controls[columnName].bindErrorMessages();\r\n            }\r\n        });\r\n    }\r\n    get submitted() {\r\n        return this._submitted;\r\n    }\r\n    set submitted(value) {\r\n        this._submitted = value;\r\n        Object.keys(this.controls).forEach(columnName => {\r\n            if (this.controls[columnName] instanceof FormArray) {\r\n                let formArray = this.controls[columnName];\r\n                for (let formGroup of formArray.controls)\r\n                    formGroup.submitted = value;\r\n            }\r\n            else if (this.controls[columnName] instanceof FormGroup) {\r\n                this.controls[columnName].submitted = value;\r\n            }\r\n            else\r\n                this.controls[columnName].bindError();\r\n        });\r\n    }\r\n    get modelInstanceValue() {\r\n        return clone(this.entityObject);\r\n    }\r\n    get modelInstance() {\r\n        return this.entityObject;\r\n    }\r\n    get controlsError() {\r\n        return this.getErrorSummary(true);\r\n    }\r\n    toFormData(options) {\r\n        return this.formDataProvider.convertToFormData(this.value, options);\r\n    }\r\n    processModified(controlName, control) {\r\n        if (control.isModified)\r\n            this._modified[controlName] = control.value;\r\n        else\r\n            delete this._modified[controlName];\r\n        this._isModified = Object.keys(this._modified).length > 0;\r\n    }\r\n    nestedArrayIsModified() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormArray)\r\n                this._isModified = this.controls[controlName].isModified;\r\n            if (this._isModified)\r\n                break;\r\n        }\r\n    }\r\n    setBackEndErrors(errors) {\r\n        Object.keys(errors).forEach(controlName => {\r\n            if (this.controls[controlName]) {\r\n                if (this.controls[controlName] instanceof FormGroup)\r\n                    this.controls[controlName].setBackEndErrors(errors[controlName]);\r\n                else\r\n                    this.controls[controlName].setBackEndErrors(errors[controlName]);\r\n            }\r\n        });\r\n    }\r\n    clearBackEndErrors(errors) {\r\n        let clearErrors = errors ? Object.keys(errors) : Object.keys(this.controls);\r\n        clearErrors.forEach(controlName => {\r\n            if (this.controls[controlName]) {\r\n                if (this.controls[controlName] instanceof FormGroup)\r\n                    errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();\r\n                else\r\n                    errors ? this.controls[controlName].clearBackEndErrors(errors[controlName]) : this.controls[controlName].clearBackEndErrors();\r\n            }\r\n        });\r\n    }\r\n    nestedFormsModification() {\r\n        for (var controlName in this.controls) {\r\n            if (this.controls[controlName] instanceof RxFormGroup)\r\n                this.processModified(controlName, this.controls[controlName]);\r\n            else if (this.controls[controlName] instanceof RxFormArray) {\r\n                if (this.controls[controlName].isModified) {\r\n                    let formGroups = this.controls[controlName].controls;\r\n                    this._modified[controlName] = [];\r\n                    for (var formGroup of formGroups) {\r\n                        if (formGroup.isModified) {\r\n                            if (!this._modified[controlName])\r\n                                this._modified[controlName] = [];\r\n                            this._modified[controlName].push(formGroup.modifiedValue);\r\n                        }\r\n                    }\r\n                    if (this._modified[controlName].length == 0)\r\n                        delete this._modified[controlName];\r\n                }\r\n                else if (this._modified[controlName])\r\n                    delete this._modified[controlName];\r\n            }\r\n        }\r\n    }\r\n}\n\nclass FormProvider {\r\n    static ProcessRule(control, config, isDynamicConfig = false) {\r\n        if (config && config.expressionProcessed)\r\n            return true;\r\n        const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n        const parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;\r\n        let modelInstance = undefined;\r\n        if (control.parent && control.parent instanceof RxFormGroup)\r\n            modelInstance = control.parent.modelInstance;\r\n        if (parentObject) {\r\n            this.updateFormControlValue(parentObject, control.parent.controls, control, config);\r\n            this.forDisableUpdate(parentObject, config);\r\n        }\r\n        else if (config.conditionalExpression)\r\n            return false;\r\n        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);\r\n    }\r\n    static updateFormControlValue(parentObject, controls, control, config) {\r\n        for (var controlName in parentObject) {\r\n            if (!(parentObject[controlName] instanceof Object))\r\n                if (controls[controlName] === control) {\r\n                    parentObject[controlName] = control.value;\r\n                    break;\r\n                }\r\n        }\r\n    }\r\n    static forDisableUpdate(parentObject, config) {\r\n        if (config.disableConfig)\r\n            Object.keys(config.disableConfig).forEach(column => {\r\n                parentObject[column] = config.disableConfig[column];\r\n            });\r\n    }\r\n}\n\nclass ValidatorValueChecker {\r\n    static pass(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return RegexValidator.isNotBlank(control.value);\r\n        else\r\n            return false;\r\n    }\r\n    static passArrayValue(control, config) {\r\n        if (FormProvider.ProcessRule(control, config))\r\n            return typeof control.value === \"string\" ? RegexValidator.isNotBlank(control.value) : control.value instanceof Array;\r\n        else\r\n            return false;\r\n    }\r\n}\n\nconst ARRAY_CONFIG = \"ArrayConfig\";\r\nconst FIELD_CONFIG = \"FieldConfig\";\r\nconst IP_CONFIG = \"IpConfig\";\r\nconst NUMBER_CONFIG = \"NumberConfig\";\r\nconst PASSWORD_CONFIG = \"PasswordConfig\";\r\nconst PATTERN_CONFIG = \"PatternConfig\";\r\nconst RANGE_CONFIG = \"RangeConfig\";\r\nconst RELATIONAL_OPERATOR_CONFIG = \"RelationalOperatorConfig\";\n\nconst CONFIG_REQUIRED_FIELDS = {\r\n    [ARRAY_CONFIG]: [\"matchValues\"],\r\n    [FIELD_CONFIG]: [\"fieldName\"],\r\n    [IP_CONFIG]: [\"version\"],\r\n    [PASSWORD_CONFIG]: [\"validation\"],\r\n    [NUMBER_CONFIG]: [\"value\"],\r\n    [PATTERN_CONFIG]: [\"expression\"],\r\n    [RANGE_CONFIG]: [\"minimumNumber\", \"maximumNumber\"],\r\n};\n\nfunction getConfigObject(config, control, configName = '') {\r\n    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};\r\n}\r\nfunction configProvider(control, config, configName) {\r\n    if (config.dynamicConfig) {\r\n        let currentConfig = FormProvider.ProcessRule(control, clone(config), true);\r\n        if (typeof currentConfig != \"boolean\") {\r\n            currentConfig.conditionalExpression = config.conditionalExpression;\r\n            currentConfig.dynamicConfig = config.dynamicConfig;\r\n            Object.keys(config).forEach(t => {\r\n                if ((t != \"conditionalExpression\" && t != \"dynamicConfig\") || currentConfig[t] === undefined) {\r\n                    currentConfig[t] = config[t];\r\n                }\r\n            });\r\n            return currentConfig;\r\n        }\r\n        else\r\n            return config;\r\n    }\r\n    return checkRequiredProps(config, configName);\r\n}\r\nfunction checkRequiredProps(config, configName) {\r\n    let props = CONFIG_REQUIRED_FIELDS[configName];\r\n    if (configName) {\r\n        props.forEach(prop => {\r\n            if (config[prop] === undefined)\r\n                throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);\r\n        });\r\n    }\r\n    return config;\r\n}\n\nconst alphabet = {\r\n    'danish': /^[A-ZÃÃÃ]+$/i,\r\n    'french': /^[A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸]+$/i,\r\n    'german': /^[A-ZÃÃÃÃ]+$/i,\r\n    'spanish': /^[a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼]+$/i,\r\n    'russian': /^[Ð-Ð¯Ð]+$/i,\r\n};\r\nconst alphaWithWhitespace = {\r\n    'danish': /^[A-ZÃÃÃ\\s]+$/i,\r\n    'french': /^[A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸\\s]+$/i,\r\n    'german': /^[A-ZÃÃÃÃ\\s]+$/i,\r\n    'spanish': /^[a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼\\s]+$/i,\r\n    'russian': /^[Ð-Ð¯Ð\\s]+$/i,\r\n};\r\nconst alphanumeric = {\r\n    'danish': /^[0-9A-ZÃÃÃ]+$/i,\r\n    'french': /^[0-9A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸]+$/i,\r\n    'german': /^[0-9A-ZÃÃÃÃ]+$/i,\r\n    'spanish': /^[0-9a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼]+$/i,\r\n    'russian': /^[0-9Ð-Ð¯Ð]+$/i,\r\n};\r\nconst alphanumericWithWitespace = {\r\n    'danish': /^[0-9A-ZÃÃÃ\\s]+$/i,\r\n    'french': /^[0-9A-ZÃÃÃÃÃÃÃÃÃÃÃÅÃÃÃÅ¸\\s]+$/i,\r\n    'german': /^[0-9A-ZÃÃÃÃ\\s]+$/i,\r\n    'spanish': /^[0-9a-zÃ±Ã¡Ã©Ã­Ã³ÃºÃ¼\\s]+$/i,\r\n    'russian': /^[0-9Ð-Ð¯Ð\\s]+$/i,\r\n};\n\nfunction alphaValidation(configModel, control, regExps, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        regExps = getRegex(key, regExps, config);\r\n        var isValid = (!config || !config.allowWhiteSpace) ?\r\n            RegexValidator.isValid(control.value, regExps[0]) :\r\n            RegexValidator.isValid(control.value, regExps[1]);\r\n        if (!isValid)\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction getRegex(key, regExps, config) {\r\n    if (config.allowCharacters)\r\n        if (config.allowWhiteSpace)\r\n            regExps[1] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);\r\n        else\r\n            regExps[0] = new RegExp(`^[0-9a-zA-Z @${config.allowCharacters}]+$`, ``);\r\n    switch (key) {\r\n        case \"alpha\":\r\n            var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : \"\";\r\n            return [\r\n                alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0],\r\n                alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]\r\n            ];\r\n            break;\r\n        case \"alphaNumeric\":\r\n            var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : \"\";\r\n            return [\r\n                alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0],\r\n                alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]\r\n            ];\r\n            break;\r\n    }\r\n}\n\nfunction alphaValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alpha, RegExRule.alphaWithSpace], AnnotationTypes.alpha);\r\n    };\r\n}\n\nfunction alphaNumericValidator(configModel) {\r\n    return (control) => {\r\n        return alphaValidation(configModel, control, [RegExRule.alphaNumeric, RegExRule.alphaNumericWithSpace], AnnotationTypes.alphaNumeric);\r\n    };\r\n}\n\nfunction compareValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        const compareControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n        const controlValue = control.value;\r\n        const compareControlValue = (compareControl) ? compareControl.value : '';\r\n        if (RegexValidator.isNotBlank(controlValue) || RegexValidator.isNotBlank(compareControlValue)) {\r\n            if (!(compareControl && compareControl.value === controlValue))\r\n                return ObjectMaker.toJson(AnnotationTypes.compare, config, [controlValue, compareControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction containsValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            const values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                failed = control.value.indexOf(value) == -1;\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.contains, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkLength(length, checks) {\r\n    let isPassed = false;\r\n    for (let check of checks) {\r\n        isPassed = (check == length);\r\n        if (isPassed)\r\n            break;\r\n    }\r\n    return isPassed;\r\n}\n\nfunction calculate(numbers) {\r\n    let numberSum = 0;\r\n    for (var i = 0; i < numbers.length; i++)\r\n        numberSum += parseInt(numbers.substring(i, i + 1));\r\n    let deltas = new Array(0, 1, 2, 3, 4, -4, -3, -2, -1, 0);\r\n    for (var i = numbers.length - 1; i >= 0; i -= 2) {\r\n        numberSum += deltas[parseInt(numbers.substring(i, i + 1))];\r\n    }\r\n    let mod = numberSum % 10;\r\n    mod = 10 - mod;\r\n    if (mod == 10)\r\n        mod = 0;\r\n    return mod;\r\n}\n\nfunction creditCardValidator(configModel) {\r\n    let cardDigits = {\r\n        AmericanExpress: [15],\r\n        DinersClub: [14, 16, 19],\r\n        Discover: [16, 19],\r\n        JCB: [16, 19],\r\n        Maestro: [12, 16, 19],\r\n        MasterCard: [16],\r\n        Visa: [13, 16, 19]\r\n    };\r\n    function validate(creditCardNumber) {\r\n        var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));\r\n        return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;\r\n    }\r\n    function getCardProviderName(cardNumber) {\r\n        var cardProviderName = \"\";\r\n        return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\\d+$/.test(cardNumber) ? cardProviderName = \"Maestro\" : /^5[1-5]/.test(cardNumber) ? cardProviderName = \"MasterCard\" : /^4/.test(cardNumber) ? cardProviderName = \"Visa\" : /^3[47]/.test(cardNumber) ? cardProviderName = \"AmericanExpress\" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = \"JCB\" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = \"DinersClub\" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = \"Discover\"), cardProviderName;\r\n    }\r\n    return (control) => {\r\n        const controlValue = control.value;\r\n        let config = getConfigObject(configModel, control);\r\n        const parentObject = (control.parent) ? control.parent.value : undefined;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(controlValue)) {\r\n                let isValid = false;\r\n                let cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;\r\n                let cardType = '';\r\n                for (let creditCardType of cardTypes) {\r\n                    isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);\r\n                    cardType = creditCardType;\r\n                    if (isValid)\r\n                        break;\r\n                }\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction regexValidation(configModel, control, regExp, key) {\r\n    let config = getConfigObject(configModel, control);\r\n    return validate(config, control, regExp, key);\r\n}\r\nfunction validate(config, control, regExp, key) {\r\n    if (ValidatorValueChecker.pass(control, config)) {\r\n        if (!RegexValidator.isValid(control.value, regExp))\r\n            return ObjectMaker.toJson(key, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction digitValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.onlyDigit, AnnotationTypes.digit);\r\n    };\r\n}\n\nfunction emailValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.basicEmail, AnnotationTypes.email);\r\n    };\r\n}\n\nfunction hexColorValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.strictHexColor, AnnotationTypes.hexColor);\r\n    };\r\n}\n\nfunction lowercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toLowerCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.lowerCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst OPERATORS = {\r\n    lessThan: \"<\",\r\n    greaterThan: \">\",\r\n    lessThanEqualTo: \"<=\",\r\n    greaterThanEqualTo: \">=\"\r\n};\n\nfunction runCondition$1(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction dateChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            let checkDate = dateProvider.getCompareDate(config, control);\r\n            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {\r\n                let currentControlValue = dateProvider.getDate(control.value);\r\n                let isValid = operationType == AnnotationTypes.minDate ? runCondition$1(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition$1(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateDate(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    var dateProvider = new DateProvider();\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction maxDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.maxDate);\r\n    };\r\n}\n\nfunction maxLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value.length <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maxNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) <= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.maxNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minDateValidator(configModel) {\r\n    return (control) => {\r\n        return dateChecker(control, configModel, AnnotationTypes.minDate);\r\n    };\r\n}\n\nfunction minLengthValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(String(control.value).length >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minLength, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction minNumberValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, NUMBER_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(parseFloat(control.value) >= config.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.minNumber, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction passwordValidator(configModel) {\r\n    function getMessageObject(jObject, keyName) {\r\n        if (!jObject.message && !jObject.messageKey) {\r\n            let message = ObjectMaker.getPasswordMessage();\r\n            jObject.message = message && typeof message == \"string\" ? message : ApplicationUtil.isObject(message) ? message[keyName] : \"\";\r\n            if (!jObject.message)\r\n                jObject.message = message[\"password\"];\r\n            jObject.messageKey = \"\";\r\n        }\r\n        return jObject;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PASSWORD_CONFIG);\r\n        let controlValue = control.value;\r\n        if (RegexValidator.isNotBlank(controlValue)) {\r\n            let validation = RegexValidator.isValidPassword(config.validation, controlValue);\r\n            let jObject = {};\r\n            jObject.message = (config.message && config.message[validation.keyName]) ? config.message[validation.keyName] : typeof config.message == \"string\" ? config.message : '';\r\n            jObject.messageKey = (config.messageKey && config.messageKey[validation.keyName]) ? config.messageKey[validation.keyName] : typeof config.messageKey == \"string\" ? config.messageKey : \"\";\r\n            jObject = getMessageObject(jObject, validation.keyName);\r\n            if (!validation.isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction rangeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, RANGE_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!((control.value || control.value === 0) && parseFloat(control.value) >= config.minimumNumber && parseFloat(control.value) <= config.maximumNumber))\r\n                return ObjectMaker.toJson(AnnotationTypes.range, config, [control.value, config.minimumNumber, config.maximumNumber]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uppercaseValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value === control.value.toUpperCase()))\r\n                return ObjectMaker.toJson(AnnotationTypes.upperCase, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction requiredValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.required, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction patternValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, PATTERN_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            for (var pattern in config.expression)\r\n                if (!(RegexValidator.isValid(control.value, config.expression[pattern])))\r\n                    return ObjectMaker.toJson(pattern, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction timeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.time, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction urlValidation(configModel, control) {\r\n    var regex = RegExRule.url;\r\n    let config = getConfigObject(configModel, control);\r\n    if (config && config.urlValidationType) {\r\n        switch (config.urlValidationType) {\r\n            case 1:\r\n                regex = RegExRule.url;\r\n                break;\r\n            case 2:\r\n                regex = RegExRule.localhostUrl;\r\n                break;\r\n            case 3:\r\n                regex = RegExRule.interanetUrl;\r\n                break;\r\n        }\r\n    }\r\n    return validate(config, control, regex, AnnotationTypes.url);\r\n}\r\nfunction urlValidator(configModel) {\r\n    return (control) => {\r\n        return urlValidation(configModel, control);\r\n    };\r\n}\n\nfunction jsonValidator(configModel) {\r\n    function process(value) {\r\n        var result = false;\r\n        try {\r\n            var json = JSON.parse(value);\r\n            result = !!json && typeof json === 'object';\r\n        }\r\n        catch (ex) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!process(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.json, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst operatorOpposite = {\r\n    [AnnotationTypes.greaterThan]: AnnotationTypes.lessThan,\r\n    [AnnotationTypes.lessThan]: AnnotationTypes.greaterThan,\r\n    [AnnotationTypes.greaterThanEqualTo]: AnnotationTypes.lessThanEqualTo,\r\n    [AnnotationTypes.lessThanEqualTo]: AnnotationTypes.greaterThanEqualTo,\r\n};\r\nfunction relationalCheck(control, config, relationalOperatorName) {\r\n    config = getConfigObject(config, control);\r\n    const matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n    const matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (config.isArrayControl)\r\n            return arrayControlValidation(control, config, relationalOperatorName);\r\n        if (isValid$1(control, matchControlValue, relationalOperatorName) === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction isValid$1(control, matchControlValue, relationalOperatorName) {\r\n    if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {\r\n        let isValid = false;\r\n        switch (relationalOperatorName) {\r\n            case AnnotationTypes.greaterThan:\r\n                isValid = parseFloat(control.value) > parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThan:\r\n                isValid = parseFloat(control.value) < parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.greaterThanEqualTo:\r\n                isValid = parseFloat(control.value) >= parseFloat(matchControlValue);\r\n                break;\r\n            case AnnotationTypes.lessThanEqualTo:\r\n                isValid = parseFloat(control.value) <= parseFloat(matchControlValue);\r\n                break;\r\n        }\r\n        return isValid;\r\n    }\r\n    return null;\r\n}\r\nfunction setTimeFunc(invalidateControls) {\r\n    let timeOut = setTimeout(() => {\r\n        invalidateControls.forEach(t => {\r\n            t.updateValueAndValidity();\r\n        });\r\n        clearTimeout(timeOut);\r\n    }, 200);\r\n}\r\nfunction arrayControlValidation(control, config, relationalOperatorName) {\r\n    let formArray = ApplicationUtil.getParentFormArray(control);\r\n    let parentFormGroup = control.parent ? control.parent : undefined;\r\n    let oppositeOperator = operatorOpposite[relationalOperatorName];\r\n    let updateValidityControls = [];\r\n    if (formArray && parentFormGroup && formArray.controls.length > 1) {\r\n        let indexOf = formArray.controls.indexOf(parentFormGroup);\r\n        let fieldName = ApplicationUtil.getFormControlName(control);\r\n        let valid = true;\r\n        if (indexOf > 0)\r\n            valid = validateControl(formArray, control, indexOf - 1, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls);\r\n        if (valid && formArray.controls.length > indexOf + 1)\r\n            valid = validateControl(formArray, control, indexOf + 1, fieldName, relationalOperatorName, relationalOperatorName, updateValidityControls);\r\n        if (updateValidityControls.length > 0)\r\n            setTimeFunc(updateValidityControls);\r\n        if (valid === false)\r\n            return ObjectMaker.toJson(relationalOperatorName, config, [control.value]);\r\n    }\r\n    return ObjectMaker.null();\r\n}\r\nfunction validateControl(formArray, control, indexOf, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls) {\r\n    let valid = false;\r\n    let formGroup = formArray.controls[indexOf];\r\n    if (formGroup && formGroup.controls) {\r\n        let formControl = formGroup.controls[fieldName];\r\n        valid = isValid$1(control, formControl.value, oppositeOperator);\r\n        if (valid && formControl.errors && formControl.errors[relationalOperatorName])\r\n            updateValidityControls.push(formControl);\r\n    }\r\n    return valid;\r\n}\n\nfunction greaterThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThan);\r\n    };\r\n}\n\nfunction greaterThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.greaterThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanEqualToValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThanEqualTo);\r\n    };\r\n}\n\nfunction lessThanValidator(configModel) {\r\n    return (control) => {\r\n        return relationalCheck(control, configModel, AnnotationTypes.lessThan);\r\n    };\r\n}\n\nfunction choiceValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value instanceof Array) {\r\n                config.minLength = (config.minLength == undefined) ? 0 : config.minLength;\r\n                config.maxLength = (config.maxLength == undefined) ? 0 : config.maxLength;\r\n                if ((((control.value.length) < config.minLength) || (config.maxLength !== 0 && control.value.length > config.maxLength)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.choice, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction differentValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, FIELD_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            const differentControl = ApplicationUtil.getFormControl(config.fieldName, control);\r\n            const differentControlValue = (differentControl) ? differentControl.value : '';\r\n            if (!(differentControl && differentControl.value != control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.different, config, [control.value, differentControlValue]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction numericValidator(configModel) {\r\n    return (control) => {\r\n        if (configModel && (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.numeric]))\r\n            ApplicationUtil.configureControl(control, configModel, AnnotationTypes.numeric);\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!RegexValidator.isValid(control.value, ApplicationUtil.numericValidation(config.allowDecimal, config.acceptValue)))\r\n                return ObjectMaker.toJson(AnnotationTypes.numeric, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction evenValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(control.value % 2 == 0))\r\n                return ObjectMaker.toJson(AnnotationTypes.even, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oddValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(!(control.value % 2 == 0)) || !ApplicationUtil.isNumeric(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.odd, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction factorValidator(configModel) {\r\n    function positiveFactors(dividend, value) {\r\n        let isPositive = false;\r\n        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {\r\n            if (dividend % index === 0) {\r\n                if (index == value)\r\n                    isPositive = true;\r\n                if (dividend / index !== index)\r\n                    if ((dividend / index) == value)\r\n                        isPositive = true;\r\n                if (isPositive)\r\n                    break;\r\n            }\r\n        }\r\n        return isPositive;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        const dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n        const dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {\r\n                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))\r\n                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction leapYearValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var isValid = (control.value % 100 === 0) ? (control.value % 400 === 0) : (control.value % 4 === 0);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.leapYear, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction allOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                testResult = control.value.some((y) => y == value);\r\n                if (!testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.allOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction oneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (ValidatorValueChecker.passArrayValue(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\r\n                testResult = Array.isArray(control.value) ? control.value.some((y) => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (!testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.oneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction noneOfValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, ARRAY_CONFIG);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            var testResult = false;\r\n            for (let value of config.matchValues) {\r\n                let matchValue = ApplicationUtil.lowerCaseWithTrim(value);\r\n                testResult = Array.isArray(control.value) ? control.value.some((y) => ApplicationUtil.lowerCaseWithTrim(y) === matchValue) : ApplicationUtil.lowerCaseWithTrim(control.value) === matchValue;\r\n                if (testResult)\r\n                    break;\r\n            }\r\n            if (testResult)\r\n                return ObjectMaker.toJson(AnnotationTypes.noneOf, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction macValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.macId, AnnotationTypes.mac);\r\n    };\r\n}\n\nfunction asciiValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.ascii, AnnotationTypes.ascii);\r\n    };\r\n}\n\nfunction dataUriValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.dataUri, AnnotationTypes.dataUri);\r\n    };\r\n}\n\nfunction portValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let isValid = RegexValidator.isValid(control.value, RegExRule.onlyDigit) && (control.value >= 0 && control.value <= 65535);\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.port, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latLongValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let splitText = control.value.split(',');\r\n            if (!(splitText.length > 1 && RegexValidator.isValid(splitText[0], RegExRule.lat) && RegexValidator.isValid(splitText[1], RegExRule.long)))\r\n                return ObjectMaker.toJson(AnnotationTypes.latLong, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction extensionValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.extension])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.extension);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let testResult = true;\r\n                let extension = '';\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    let splitText = file.name.split(\".\");\r\n                    extension = splitText[splitText.length - 1];\r\n                    let result = config.extensions.filter(t => { return extension.toLowerCase() == t.toLowerCase(); })[0];\r\n                    if (!result && !configModel.isExcludeExtensions) {\r\n                        testResult = false;\r\n                        break;\r\n                    }\r\n                    else {\r\n                        if (result && configModel.isExcludeExtensions) {\r\n                            testResult = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (!testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.extension, config, [extension, config.extensions.join(\",\")]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileSizeValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.fileSize])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.fileSize);\r\n        if (files && FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let minFileSize = config.minSize ? config.minSize : 0;\r\n                let testResult = false;\r\n                let fileSize = 0;\r\n                for (var i = 0; i < files.length; i++) {\r\n                    let file = files.item(i);\r\n                    fileSize = file.size;\r\n                    testResult = (!(fileSize >= minFileSize && fileSize <= config.maxSize));\r\n                    if (testResult)\r\n                        break;\r\n                }\r\n                if (testResult)\r\n                    return ObjectMaker.toJson(AnnotationTypes.fileSize, config, [fileSize, minFileSize, config.maxSize]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction endsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            let values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                var endString = String(control.value).substr(control.value.length - value.length, value.length);\r\n                failed = (endString != value);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.endsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction startsWithValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let failed = false;\r\n            let values = config.values ? config.values : [config.value];\r\n            for (let value of values) {\r\n                let startString = String(control.value).substr(0, value.length);\r\n                failed = (config.isRestrict && String(startString).toLowerCase() == String(value).toLowerCase()) || (!config.isRestrict && startString != value);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.startsWith, config, [control.value, config.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction primeNumberValidator(configModel) {\r\n    function isPrime(value) {\r\n        let isPrimeNumber = value != 1;\r\n        for (var i = 2; i < value; i++) {\r\n            if (value % i == 0) {\r\n                isPrimeNumber = false;\r\n                break;\r\n            }\r\n        }\r\n        return isPrimeNumber;\r\n    }\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!ApplicationUtil.isNumeric(control.value) || !isPrime(control.value))\r\n                return ObjectMaker.toJson(AnnotationTypes.primeNumber, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction latitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.lat, AnnotationTypes.latitude);\r\n    };\r\n}\n\nfunction longitudeValidator(configModel) {\r\n    return (control) => {\r\n        return regexValidation(configModel, control, RegExRule.long, AnnotationTypes.longitude);\r\n    };\r\n}\n\nfunction composeValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (config.validators) {\r\n                let result = undefined;\r\n                for (let validator of config.validators) {\r\n                    result = validator(control);\r\n                    if (result)\r\n                        break;\r\n                }\r\n                if (result)\r\n                    return (config.messageKey || config.message) ? ObjectMaker.toJson(config.messageKey || AnnotationTypes.compose, config, [control.value]) : result;\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction ruleValidator(configModel, entity) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(entity);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction fileValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.file])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.file);\r\n        if (files) {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let minFiles = config.minFiles ? config.minFiles : 0;\r\n                    let maxFiles = config.maxFiles ? config.maxFiles : files.length;\r\n                    if (!(files.length > 0 && files[0] instanceof File && files.length >= minFiles && files.length <= maxFiles))\r\n                        return ObjectMaker.toJson(AnnotationTypes.file, config, [files.length, minFiles, maxFiles]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction customValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            const formGroupValue = ApplicationUtil.getParentObjectValue(control);\r\n            const parentObject = (control.parent) ? control.parent.value : undefined;\r\n            let result = null;\r\n            for (let rule of config.customRules) {\r\n                result = rule(formGroupValue, parentObject, config.additionalValue);\r\n                if (result)\r\n                    break;\r\n            }\r\n            if (result)\r\n                return result;\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction uniqueValidator(configModel) {\r\n    var setTimeoutFunc = (invalidateControls, controlValues) => {\r\n        let timeOut = setTimeout(() => {\r\n            invalidateControls.forEach(t => {\r\n                let isMatched = controlValues.filter(x => x == t.value)[0];\r\n                if (!isMatched)\r\n                    t.updateValueAndValidity();\r\n            });\r\n            clearTimeout(timeOut);\r\n        }, 200);\r\n    };\r\n    var additionalValidation = (config, fieldName, formGroup, formArray, currentValue) => {\r\n        let indexOf = formArray.controls.indexOf(formGroup);\r\n        let formArrayValue = [];\r\n        if (indexOf != -1) {\r\n            formArray.value.forEach((t, i) => {\r\n                if (indexOf != i)\r\n                    formArrayValue.push(t);\r\n            });\r\n            return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);\r\n        }\r\n        return false;\r\n    };\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (RegexValidator.isNotBlank(control.value)) {\r\n                let formArray = ApplicationUtil.getParentFormArray(control);\r\n                let parentFormGroup = control.parent ? control.parent : undefined;\r\n                let invalidateControls = [];\r\n                let controlValues = [];\r\n                if (formArray && parentFormGroup) {\r\n                    let currentValue = control.value;\r\n                    let fieldName = ApplicationUtil.getFormControlName(control);\r\n                    let isMatched = false;\r\n                    for (let formGroup of formArray.controls) {\r\n                        if (formGroup != parentFormGroup) {\r\n                            isMatched = (ApplicationUtil.toLower(formGroup.controls[fieldName].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]));\r\n                            if (formGroup.controls[fieldName].errors && formGroup.controls[fieldName].errors[AnnotationTypes.unique]) {\r\n                                var matchedControl = formArray.controls.filter(t => t.controls[fieldName] != formGroup.controls[fieldName] && ApplicationUtil.toLower(t.controls[fieldName].value) == ApplicationUtil.toLower(formGroup.controls[fieldName].value))[0];\r\n                                if (!matchedControl)\r\n                                    invalidateControls.push(formGroup.controls[fieldName]);\r\n                            }\r\n                            else\r\n                                controlValues.push(formGroup.controls[fieldName].value);\r\n                        }\r\n                        if (isMatched)\r\n                            break;\r\n                    }\r\n                    if (invalidateControls.length > 0)\r\n                        setTimeoutFunc(invalidateControls, controlValues);\r\n                    let validation = false;\r\n                    if (config.additionalValidation) {\r\n                        validation = additionalValidation(config, fieldName, parentFormGroup, formArray, currentValue);\r\n                    }\r\n                    if (isMatched && !validation)\r\n                        return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);\r\n                }\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction imageValidator(configModel) {\r\n    return (control, files) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.image])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.image);\r\n        if (!files)\r\n            return ObjectMaker.null();\r\n        return new Promise((resolve, reject) => {\r\n            if (FormProvider.ProcessRule(control, config)) {\r\n                if (RegexValidator.isNotBlank(control.value)) {\r\n                    let testResult = false;\r\n                    for (var i = 0; i < files.length; i++) {\r\n                        let file = files.item(i);\r\n                        let type = file.type ? file.type.split('/') : [];\r\n                        testResult = type.length > 1 && type[0] == \"image\";\r\n                        if (!testResult)\r\n                            break;\r\n                        let image = new Image();\r\n                        config.minWidth = config.minWidth ? config.minWidth : 0;\r\n                        config.minHeight = config.minHeight ? config.minHeight : 0;\r\n                        image.onload = () => {\r\n                            testResult = (image.width >= config.minWidth && image.height >= config.minHeight) && (image.width <= config.maxWidth && image.height <= config.maxHeight);\r\n                            if (!testResult)\r\n                                resolve(ObjectMaker.toJson(AnnotationTypes.image, config, [image.width, image.height]));\r\n                            else\r\n                                resolve(ObjectMaker.null());\r\n                        };\r\n                        image.onerror = () => {\r\n                            resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                        };\r\n                        image.src = URL.createObjectURL(file);\r\n                    }\r\n                    if (!testResult)\r\n                        resolve(ObjectMaker.toJson(AnnotationTypes.image, config, []));\r\n                }\r\n            }\r\n            return ObjectMaker.null();\r\n        });\r\n    };\r\n}\n\nfunction notEmptyValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (!RegexValidator.isNotBlank(control.value, true)) {\r\n                return ObjectMaker.toJson(AnnotationTypes.notEmpty, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction checkIpV4(value) {\r\n    let isValid = RegexValidator.isValid(value, RegExRule.ipV4);\r\n    if (isValid) {\r\n        const splitDots = value.split('.');\r\n        for (let ipNum of splitDots) {\r\n            isValid = ipNum <= 255;\r\n            if (!isValid)\r\n                break;\r\n        }\r\n    }\r\n    return isValid;\r\n}\r\nfunction checkIpV6(value) {\r\n    return RegexValidator.isValid(value, RegExRule.ipV6);\r\n}\n\nfunction ipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control, IP_CONFIG);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let values = config.isCidr ? control.value.split('/') : [control.value];\r\n            var isValid = (config.version == IpVersion.V4) ?\r\n                checkIpV4(values[0]) :\r\n                (config.version == IpVersion.V6) ?\r\n                    checkIpV6(values[0]) :\r\n                    (checkIpV4(values[0]) || checkIpV6(values[0]));\r\n            if (config.isCidr && isValid) {\r\n                isValid = (values.length > 1) ?\r\n                    config.version == IpVersion.V4 ?\r\n                        RegexValidator.isValid(values[1], RegExRule.cidrV4) :\r\n                        config.version == IpVersion.V6 ?\r\n                            RegexValidator.isValid(values[1], RegExRule.cidrV6) :\r\n                            (RegexValidator.isValid(values[1], RegExRule.cidrV4) || RegexValidator.isValid(values[1], RegExRule.cidrV6)) :\r\n                    false;\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.ip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction cusipValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            var controlValue = control.value.toUpperCase();\r\n            let isValid = RegexValidator.isValid(controlValue, RegExRule.cusip);\r\n            if (isValid) {\r\n                let numericValues = controlValue.split(\"\").map((value) => {\r\n                    var charCode = value.charCodeAt(0);\r\n                    return charCode >= \"A\".charCodeAt(0) && charCode <= \"Z\".charCodeAt(0) ? charCode - \"A\".charCodeAt(0) + 10 : value;\r\n                });\r\n                let totalCount = 0;\r\n                for (var i = 0; i < numericValues.length - 1; i++) {\r\n                    var numericValue = parseInt(numericValues[i], 10);\r\n                    if (i % 2 !== 0) {\r\n                        numericValue *= 2;\r\n                    }\r\n                    if (numericValue > 9) {\r\n                        numericValue -= 9;\r\n                    }\r\n                    totalCount += numericValue;\r\n                }\r\n                totalCount = (10 - (totalCount % 10)) % 10;\r\n                isValid = totalCount == numericValues[numericValues.length - 1];\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.cusip, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction gridValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let controlValue = control.value.toUpperCase();\r\n            var isValid = RegexValidator.isValid(controlValue, RegExRule.grid);\r\n            if (isValid) {\r\n                controlValue = controlValue.replace(/\\s/g, '').replace(/-/g, '');\r\n                if ('GRID:' === controlValue.substr(0, 5)) {\r\n                    controlValue = controlValue.substr(5);\r\n                }\r\n                let alphaNums = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n                var alphaNumLength = alphaNums.length, length = controlValue.length, check = Math.floor(alphaNumLength / 2);\r\n                for (var i = 0; i < length; i++) {\r\n                    check = (((check || alphaNumLength) * 2) % (alphaNumLength + 1) + alphaNums.indexOf(controlValue.charAt(i))) % alphaNumLength;\r\n                }\r\n                isValid = (check === 1);\r\n            }\r\n            if (!isValid)\r\n                return ObjectMaker.toJson(AnnotationTypes.grid, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction dateValidator(configModel) {\r\n    return (control) => {\r\n        return validateDate(control, configModel, AnnotationTypes.date);\r\n    };\r\n}\n\nfunction runCondition(leftValue, rightValue, operator) {\r\n    let result = false;\r\n    switch (operator) {\r\n        case OPERATORS.lessThan:\r\n        case OPERATORS.greaterThan:\r\n            result = leftValue > rightValue;\r\n            break;\r\n        case OPERATORS.lessThanEqualTo:\r\n        case OPERATORS.greaterThanEqualTo:\r\n            result = leftValue >= rightValue;\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nfunction isValid(control, config) {\r\n    return config.allowSeconds ? RegexValidator.isValid(control.value, RegExRule.timeWithSeconds) : RegexValidator.isValid(control.value, RegExRule.time);\r\n}\r\nfunction getTime(value) {\r\n    let splitTime = (value) ? value.split(':') : [];\r\n    return new Date(1970, 0, 1, splitTime[0] ? splitTime[0] : 0, splitTime[1] ? splitTime[1] : 0, splitTime[2] ? splitTime[2] : 0).getTime();\r\n}\r\nfunction timeChecker(control, config, operationType) {\r\n    config = getConfigObject(config, control);\r\n    if (FormProvider.ProcessRule(control, config)) {\r\n        if (RegexValidator.isNotBlank(control.value)) {\r\n            if (isValid(control, config)) {\r\n                let crossFormControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;\r\n                let crossControlValue = crossFormControl ? getTime(crossFormControl.value) : getTime(config.value);\r\n                let currentControlValue = getTime(control.value);\r\n                let isValid = operationType == AnnotationTypes.minTime ? runCondition(currentControlValue, crossControlValue, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(crossControlValue, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);\r\n                if (!isValid)\r\n                    return ObjectMaker.toJson(operationType, config, [control.value]);\r\n            }\r\n            else\r\n                return ObjectMaker.toJson(operationType, config, [control.value]);\r\n        }\r\n    }\r\n    return ObjectMaker.null();\r\n}\n\nfunction minTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.minTime);\r\n    };\r\n}\n\nfunction maxTimeValidator(configModel) {\r\n    return (control) => {\r\n        return timeChecker(control, configModel, AnnotationTypes.maxTime);\r\n    };\r\n}\n\nfunction requiredTrueValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (FormProvider.ProcessRule(control, config)) {\r\n            if (control.value !== true) {\r\n                return ObjectMaker.toJson(AnnotationTypes.requiredTrue, config, []);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction maskValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (!control[VALIDATOR_CONFIG$2] || !control[VALIDATOR_CONFIG$2][AnnotationTypes.mask])\r\n            ApplicationUtil.configureControl(control, config, AnnotationTypes.mask);\r\n        return null;\r\n    };\r\n}\n\nconst IBAN_COUNTRY_CODE_REGEX = {\r\n    AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\r\n    AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\r\n    AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\r\n    AT: /^(AT[0-9]{2})\\d{16}$/,\r\n    AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    BA: /^(BA[0-9]{2})\\d{16}$/,\r\n    BE: /^(BE[0-9]{2})\\d{12}$/,\r\n    BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\r\n    BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\r\n    BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\r\n    BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\r\n    CR: /^(CR[0-9]{2})\\d{18}$/,\r\n    CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\r\n    CZ: /^(CZ[0-9]{2})\\d{20}$/,\r\n    DE: /^(DE[0-9]{2})\\d{18}$/,\r\n    DK: /^(DK[0-9]{2})\\d{14}$/,\r\n    DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\r\n    EE: /^(EE[0-9]{2})\\d{16}$/,\r\n    EG: /^(EG[0-9]{2})\\d{25}$/,\r\n    ES: /^(ES[0-9]{2})\\d{20}$/,\r\n    FI: /^(FI[0-9]{2})\\d{14}$/,\r\n    FO: /^(FO[0-9]{2})\\d{14}$/,\r\n    FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\r\n    GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\r\n    GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\r\n    GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\r\n    GL: /^(GL[0-9]{2})\\d{14}$/,\r\n    GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\r\n    GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\r\n    HR: /^(HR[0-9]{2})\\d{17}$/,\r\n    HU: /^(HU[0-9]{2})\\d{24}$/,\r\n    IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\r\n    IL: /^(IL[0-9]{2})\\d{19}$/,\r\n    IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\r\n    IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\r\n    IS: /^(IS[0-9]{2})\\d{22}$/,\r\n    IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\r\n    JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\r\n    KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\r\n    KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\r\n    LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\r\n    LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\r\n    LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\r\n    LT: /^(LT[0-9]{2})\\d{16}$/,\r\n    LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\r\n    LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\r\n    MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\r\n    MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\r\n    ME: /^(ME[0-9]{2})\\d{18}$/,\r\n    MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\r\n    MR: /^(MR[0-9]{2})\\d{23}$/,\r\n    MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\r\n    MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\r\n    NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\r\n    NO: /^(NO[0-9]{2})\\d{11}$/,\r\n    PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\r\n    PL: /^(PL[0-9]{2})\\d{24}$/,\r\n    PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\r\n    PT: /^(PT[0-9]{2})\\d{21}$/,\r\n    QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\r\n    RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\r\n    RS: /^(RS[0-9]{2})\\d{18}$/,\r\n    SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\r\n    SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\r\n    SE: /^(SE[0-9]{2})\\d{20}$/,\r\n    SI: /^(SI[0-9]{2})\\d{15}$/,\r\n    SK: /^(SK[0-9]{2})\\d{20}$/,\r\n    SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\r\n    SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\r\n    TL: /^(TL[0-9]{2})\\d{19}$/,\r\n    TN: /^(TN[0-9]{2})\\d{20}$/,\r\n    TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\r\n    UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\r\n    VA: /^(VA[0-9]{2})\\d{18}$/,\r\n    VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\r\n    XK: /^(XK[0-9]{2})\\d{16}$/,\r\n};\n\nfunction hasValidIbanFormat(value, countryCode) {\r\n    const strippedStr = value.replace(/[\\s\\-]+/gi, '').toUpperCase();\r\n    const isoCountryCode = countryCode || strippedStr.slice(0, 2).toUpperCase();\r\n    return (isoCountryCode in IBAN_COUNTRY_CODE_REGEX) &&\r\n        IBAN_COUNTRY_CODE_REGEX[isoCountryCode].test(strippedStr);\r\n}\r\nfunction hasValidIbanChecksum(str) {\r\n    const strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\r\n    const rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\r\n    const alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, char => char.charCodeAt(0) - 55);\r\n    const remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g)\r\n        .reduce((acc, value) => Number(acc + value) % 97, '');\r\n    return remainder === 1;\r\n}\r\nfunction ibanValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            if (!(hasValidIbanFormat(control.value, config.countryCode) && hasValidIbanChecksum(control.value)))\r\n                return ObjectMaker.toJson(AnnotationTypes.iban, config, [control.value, config.countryCode]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst APP_VALIDATORS = {\r\n    \"alphaNumeric\": alphaNumericValidator,\r\n    \"alpha\": alphaValidator,\r\n    \"compare\": compareValidator,\r\n    \"email\": emailValidator,\r\n    \"hexColor\": hexColorValidator,\r\n    \"lowerCase\": lowercaseValidator,\r\n    \"maxDate\": maxDateValidator,\r\n    \"maxNumber\": maxNumberValidator,\r\n    \"minDate\": minDateValidator,\r\n    \"minNumber\": minNumberValidator,\r\n    \"contains\": containsValidator,\r\n    \"upperCase\": uppercaseValidator,\r\n    \"maxLength\": maxLengthValidator,\r\n    \"minLength\": minLengthValidator,\r\n    \"password\": passwordValidator,\r\n    \"range\": rangeValidator,\r\n    \"required\": requiredValidator,\r\n    \"creditCard\": creditCardValidator,\r\n    \"digit\": digitValidator,\r\n    \"pattern\": patternValidator,\r\n    \"time\": timeValidator,\r\n    \"url\": urlValidator,\r\n    \"json\": jsonValidator,\r\n    \"greaterThan\": greaterThanValidator,\r\n    \"greaterThanEqualTo\": greaterThanEqualToValidator,\r\n    \"lessThan\": lessThanValidator,\r\n    \"lessThanEqualTo\": lessThanEqualToValidator,\r\n    \"choice\": choiceValidator,\r\n    \"different\": differentValidator,\r\n    \"numeric\": numericValidator,\r\n    \"even\": evenValidator,\r\n    \"odd\": oddValidator,\r\n    \"factor\": factorValidator,\r\n    \"leapYear\": leapYearValidator,\r\n    \"allOf\": allOfValidator,\r\n    \"oneOf\": oneOfValidator,\r\n    \"noneOf\": noneOfValidator,\r\n    \"mac\": macValidator,\r\n    \"ascii\": asciiValidator,\r\n    \"dataUri\": dataUriValidator,\r\n    \"port\": portValidator,\r\n    \"latLong\": latLongValidator,\r\n    \"extension\": extensionValidator,\r\n    \"fileSize\": fileSizeValidator,\r\n    \"endsWith\": endsWithValidator,\r\n    \"startsWith\": startsWithValidator,\r\n    \"primeNumber\": primeNumberValidator,\r\n    \"latitude\": latitudeValidator,\r\n    \"longitude\": longitudeValidator,\r\n    \"compose\": composeValidator,\r\n    \"rule\": ruleValidator,\r\n    \"file\": fileValidator,\r\n    \"unique\": uniqueValidator,\r\n    \"image\": imageValidator,\r\n    \"notEmpty\": notEmptyValidator,\r\n    \"ip\": ipValidator,\r\n    \"cusip\": cusipValidator,\r\n    \"grid\": gridValidator,\r\n    \"date\": dateValidator,\r\n    \"minTime\": minTimeValidator,\r\n    \"maxTime\": maxTimeValidator,\r\n    \"requiredTrue\": requiredTrueValidator,\r\n    \"mask\": maskValidator,\r\n    \"iban\": ibanValidator\r\n};\n\nfunction baseAsyncValidator(configModel, validatorName) {\r\n    return (control) => {\r\n        configModel = configModel || {};\r\n        if (configModel.validatorConfig) {\r\n            if (FormProvider.ProcessRule(control, configModel)) {\r\n                return configModel.validatorConfig.pipe(map(resolveConfig(configModel, validatorName, control)));\r\n            }\r\n            return of(null);\r\n        }\r\n        else\r\n            return of(resolveConfig(configModel, validatorName, control)(configModel));\r\n    };\r\n}\r\nfunction resolveConfig(configModel, validatorName, control) {\r\n    return config => {\r\n        let configClone = Object.assign(Object.assign(Object.assign({}, configModel), config), { expressionProcessed: true });\r\n        return APP_VALIDATORS[validatorName](configClone)(control);\r\n    };\r\n}\n\nfunction alpha(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alpha, config);\r\n}\r\nfunction alphaAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alpha, [baseAsyncValidator(config, AnnotationTypes.alpha)], true);\r\n}\n\nfunction alphaNumeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, config);\r\n}\r\nfunction alphaNumericAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.alphaNumeric, [baseAsyncValidator(config, AnnotationTypes.alphaNumeric)], true);\r\n}\n\nfunction compare(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compare, config);\r\n}\n\nfunction contains(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.contains, config);\r\n}\r\nfunction containsAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.contains, [baseAsyncValidator(config, AnnotationTypes.contains)], true);\r\n}\n\nfunction creditCard(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.creditCard, config);\r\n}\r\nfunction creditCardAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.creditCard, [baseAsyncValidator(config, AnnotationTypes.creditCard)], true);\r\n}\n\nfunction digit(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.digit, config);\r\n}\n\nfunction email(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.email, config);\r\n}\n\nfunction hexColor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.hexColor, config);\r\n}\n\nfunction lowerCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lowerCase, config);\r\n}\n\nfunction maxDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxDate, config);\r\n}\r\nfunction maxDateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxDate, [baseAsyncValidator(config, AnnotationTypes.maxDate)], true);\r\n}\n\nfunction maxLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxLength, config);\r\n}\r\nfunction maxLengthAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxLength, [baseAsyncValidator(config, AnnotationTypes.maxLength)], true);\r\n}\n\nfunction minDate(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minDate, config);\r\n}\r\nfunction minDateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minDate, [baseAsyncValidator(config, AnnotationTypes.minDate)], true);\r\n}\n\nfunction maxNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxNumber, config);\r\n}\r\nfunction maxNumberAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxNumber, [baseAsyncValidator(config, AnnotationTypes.maxNumber)], true);\r\n}\n\nfunction minLength(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minLength, config);\r\n}\r\nfunction minLengthAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minLength, [baseAsyncValidator(config, AnnotationTypes.minLength)], true);\r\n}\n\nfunction minNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minNumber, config);\r\n}\r\nfunction minNumberAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minNumber, [baseAsyncValidator(config, AnnotationTypes.minNumber)], true);\r\n}\n\nfunction password(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.password, config);\r\n}\r\nfunction passwordAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.password, [baseAsyncValidator(config, AnnotationTypes.password)], true);\r\n}\n\nfunction pattern(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.pattern, config);\r\n}\r\nfunction patternAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.pattern, [baseAsyncValidator(config, AnnotationTypes.pattern)], true);\r\n}\n\nfunction propArray(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: ARRAY_PROPERTY,\r\n            entity: entity,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            entityProvider: config ? config.entityProvider : undefined,\r\n            arrayConfig: config ? {\r\n                allowMaxIndex: config.allowMaxIndex, messageKey: config.messageKey, createBlank: config.createBlank\r\n            } : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction propObject(entity, config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.initPropertyObject(propertyKey, OBJECT_PROPERTY, entity, target, config);\r\n    };\r\n}\n\nfunction prop(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        var propertyInfo = {\r\n            name: propertyKey,\r\n            propertyType: PROPERTY,\r\n            dataPropertyName: config ? config.name : undefined,\r\n            defaultValue: config ? config.defaultValue : undefined,\r\n            ignore: config ? config.ignore : undefined,\r\n            isPrimaryKey: config ? config.isPrimaryKey : undefined,\r\n            messageNexus: config ? config.messageNexus : undefined\r\n        };\r\n        defaultContainer.addProperty(target.constructor, propertyInfo);\r\n    };\r\n}\n\nfunction range(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.range, config);\r\n}\r\nfunction rangeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.range, [baseAsyncValidator(config, AnnotationTypes.range)], true);\r\n}\n\nfunction required(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.required, config);\r\n}\n\nfunction upperCase(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.upperCase, config);\r\n}\n\nfunction time(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.time, config);\r\n}\r\nfunction timeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.time, [baseAsyncValidator(config, AnnotationTypes.time)], true);\r\n}\n\nfunction url(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.url, config);\r\n}\r\nfunction urlAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.url, [baseAsyncValidator(config, AnnotationTypes.url)], true);\r\n}\n\nfunction json(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.json, config);\r\n}\n\nfunction greaterThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThan, config);\r\n}\r\nfunction greaterThanAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThan, [baseAsyncValidator(config, AnnotationTypes.greaterThan)], true);\r\n}\n\nfunction greaterThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, config);\r\n}\r\nfunction greaterThanEqualToAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.greaterThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo)], true);\r\n}\n\nfunction lessThanEqualTo(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, config);\r\n}\r\nfunction lessThanEqualToAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThanEqualTo, [baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo)], true);\r\n}\n\nfunction lessThan(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThan, config);\r\n}\r\nfunction lessThanAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.lessThan, [baseAsyncValidator(config, AnnotationTypes.lessThan)], true);\r\n}\n\nfunction choice(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.choice, config);\r\n}\r\nfunction choiceAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.choice, [baseAsyncValidator(config, AnnotationTypes.choice)], true);\r\n}\n\nfunction different(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.different, config);\r\n}\n\nfunction numeric(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.numeric, config);\r\n}\r\nfunction numericAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.numeric, [baseAsyncValidator(config, AnnotationTypes.numeric)], true);\r\n}\n\nfunction even(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.even, config);\r\n}\n\nfunction odd(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.odd, config);\r\n}\n\nfunction factor(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.factor, config);\r\n}\r\nfunction factorAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.factor, [baseAsyncValidator(config, AnnotationTypes.factor)], true);\r\n}\n\nfunction leapYear(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.leapYear, config);\r\n}\n\nfunction allOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.allOf, config);\r\n}\r\nfunction allOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.allOf, [baseAsyncValidator(config, AnnotationTypes.allOf)], true);\r\n}\n\nfunction oneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.oneOf, config);\r\n}\r\nfunction oneOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.oneOf, [baseAsyncValidator(config, AnnotationTypes.oneOf)], true);\r\n}\n\nfunction noneOf(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.noneOf, config);\r\n}\r\nfunction noneOfAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.noneOf, [baseAsyncValidator(config, AnnotationTypes.noneOf)], true);\r\n}\n\nfunction mac(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mac, config);\r\n}\n\nfunction ascii(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.ascii, config);\r\n}\n\nfunction dataUri(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.dataUri, config);\r\n}\n\nfunction port(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.port, config);\r\n}\n\nfunction latLong(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latLong, config);\r\n}\n\nfunction extension(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.extension, config);\r\n}\r\nfunction extensionAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.extension, [baseAsyncValidator(config, AnnotationTypes.extension)], true);\r\n}\n\nfunction fileSize(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.fileSize, config);\r\n}\r\nfunction fileSizeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.fileSize, [baseAsyncValidator(config, AnnotationTypes.fileSize)], true);\r\n}\n\nfunction endsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.endsWith, config);\r\n}\r\nfunction endsWithAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.endsWith, [baseAsyncValidator(config, AnnotationTypes.endsWith)], true);\r\n}\n\nfunction startsWith(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.startsWith, config);\r\n}\r\nfunction startsWithAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.startsWith, [baseAsyncValidator(config, AnnotationTypes.startsWith)], true);\r\n}\n\nfunction primeNumber(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.primeNumber, config);\r\n}\n\nfunction latitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.latitude, config);\r\n}\n\nfunction longitude(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.longitude, config);\r\n}\n\nfunction rule(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.rule, config);\r\n}\n\nfunction file(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.file, config);\r\n}\r\nfunction fileAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.file, [baseAsyncValidator(config, AnnotationTypes.file)], true);\r\n}\n\nfunction custom(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.custom, config);\r\n}\r\nfunction customAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.custom, [baseAsyncValidator(config, AnnotationTypes.custom)], true);\r\n}\n\nfunction unique(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.unique, config);\r\n}\n\nfunction image(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.image, config);\r\n}\r\nfunction imageAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.image, [baseAsyncValidator(config, AnnotationTypes.image)], true);\r\n}\n\nfunction notEmpty(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.notEmpty, config);\r\n}\n\nfunction async(validators) {\r\n    return baseDecoratorFunction(AnnotationTypes.async, validators, true);\r\n}\n\nfunction cusip(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.cusip, config);\r\n}\n\nfunction grid(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.grid, config);\r\n}\n\nfunction date(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.date, config);\r\n}\r\nfunction dateAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.date, [baseAsyncValidator(config, AnnotationTypes.date)], true);\r\n}\n\nfunction disable(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.disabled);\r\n    };\r\n}\n\nfunction error(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.error);\r\n    };\r\n}\n\nfunction and(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.and, config);\r\n}\n\nfunction or(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.or, config);\r\n}\n\nfunction not(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.not, config);\r\n}\n\nfunction trim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.trim);\r\n    };\r\n}\n\nfunction ltrim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.ltrim);\r\n    };\r\n}\n\nfunction rtrim() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.rtrim);\r\n    };\r\n}\n\nfunction blacklist(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.blacklist, chars);\r\n    };\r\n}\n\nfunction stripLow(keepNewLines) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.stripLow, keepNewLines);\r\n    };\r\n}\n\nfunction toBoolean(strict) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toBoolean, strict);\r\n    };\r\n}\n\nfunction toDouble() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDouble);\r\n    };\r\n}\n\nfunction toFloat() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toFloat);\r\n    };\r\n}\n\nfunction toInt(radix) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toInt, radix);\r\n    };\r\n}\n\nfunction toString() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.string);\r\n    };\r\n}\n\nfunction whitelist(chars) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.whitelist, chars);\r\n    };\r\n}\n\nfunction toDate(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.toDate, config);\r\n    };\r\n}\n\nfunction escape() {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.escape);\r\n    };\r\n}\n\nfunction prefix(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.prefix, text);\r\n    };\r\n}\n\nfunction suffix(text) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.suffix, text);\r\n    };\r\n}\n\nfunction model(config) {\r\n    return function (target) {\r\n        defaultContainer.addPropsConfig(target, config);\r\n    };\r\n}\n\nfunction sanitize(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addSanitizer(target, parameterIndex, propertyKey, DECORATORS.sanitize, config);\r\n    };\r\n}\n\nfunction elementClass(config) {\r\n    return function (target, propertyKey, parameterIndex) {\r\n        defaultContainer.addDecoratorConfig(target, parameterIndex, propertyKey, config, DECORATORS.elementClass);\r\n    };\r\n}\n\nfunction minTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minTime, config);\r\n}\r\nfunction minTimeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.minTime, [baseAsyncValidator(config, AnnotationTypes.minTime)], true);\r\n}\n\nfunction maxTime(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxTime, config);\r\n}\r\nfunction maxTimeAsync(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.maxTime, [baseAsyncValidator(config, AnnotationTypes.maxTime)], true);\r\n}\n\nfunction compose(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.compose, config);\r\n}\n\nfunction requiredTrue(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.requiredTrue, config);\r\n}\n\nfunction mask(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.mask, config);\r\n}\n\nfunction updateOn(config) {\r\n    return baseDecoratorFunction(AnnotationTypes.updateOn, config);\r\n}\n\nclass HtmlControlTemplateDirective {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n    ;\r\n}\r\nHtmlControlTemplateDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HtmlControlTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ÉµÉµFactoryTarget.Directive });\r\nHtmlControlTemplateDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: HtmlControlTemplateDirective, selector: \"[htmlControlTemplate]\", inputs: { type: [\"htmlControlTemplate\", \"type\"] }, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: HtmlControlTemplateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[htmlControlTemplate]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { type: [{\r\n                type: Input,\r\n                args: ['htmlControlTemplate']\r\n            }] } });\n\nclass BaseDirective {\r\n    applyValidations(controls, model = null) {\r\n        if (this.model) {\r\n            let modelConfig = defaultContainer.get(model || this.model.constructor);\r\n            if (modelConfig) {\r\n                modelConfig.properties.forEach(property => {\r\n                    if (controls[property.name]) {\r\n                        switch (property.propertyType) {\r\n                            case PROPERTY:\r\n                                this.setValidatorConfig(controls[property.name], modelConfig, property);\r\n                                break;\r\n                            case OBJECT_PROPERTY:\r\n                                this.applyValidations(controls[property.name].controls, property.entity);\r\n                                break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    setValidatorConfig(control, modelConfig, property) {\r\n        let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);\r\n        annotations.forEach(annotation => {\r\n            if (!control[TEMPLATE_VALIDATION_CONFIG])\r\n                control[TEMPLATE_VALIDATION_CONFIG] = {};\r\n            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : \"\", annotation.annotationType);\r\n        });\r\n    }\r\n}\r\nBaseDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: BaseDirective, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\r\nBaseDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: BaseDirective, inputs: { model: \"model\" }, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: BaseDirective, decorators: [{\r\n            type: Directive\r\n        }], propDecorators: { model: [{\r\n                type: Input\r\n            }] } });\n\nconst DISABLED_EXPRESSION = \"disableExpression\";\r\nfunction conditionalChangeValidator(conditionalValidationProps) {\r\n    var timeOuts = [];\r\n    var oldValue = undefined;\r\n    var setTimeOut = (control, config) => {\r\n        if (control[DISABLED_EXPRESSION])\r\n            runDisabledExpression(control, config);\r\n        var timeOut = setTimeout(t => {\r\n            clearTimeout(timeOut);\r\n            control.updateValueAndValidity({ emitEvent: false });\r\n        }, 100);\r\n    };\r\n    return (control) => {\r\n        let value = control.value;\r\n        if (control.parent && oldValue != value) {\r\n            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);\r\n            const parentFormGroup = control.parent;\r\n            oldValue = value;\r\n            timeOuts = [];\r\n            let controlName = ApplicationUtil.getFormControlName(control);\r\n            let disabledConfig = { [controlName]: value };\r\n            conditionalValidationProps.forEach(t => {\r\n                let a = control;\r\n                if (t.indexOf(\"[]\") != -1) {\r\n                    var splitText = t.split(\"[]\");\r\n                    var formArray = rootFormGroup.get([splitText[0]]);\r\n                    if (formArray)\r\n                        formArray.controls.forEach(formGroup => {\r\n                            var abstractControl = formGroup.get(splitText[1]);\r\n                            if (abstractControl) {\r\n                                setTimeOut(abstractControl, disabledConfig);\r\n                            }\r\n                        });\r\n                }\r\n                else {\r\n                    let splitText = t.split('.');\r\n                    if (splitText.length > 1) {\r\n                        var control = null;\r\n                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });\r\n                    }\r\n                    else {\r\n                        control = parentFormGroup.controls[t];\r\n                    }\r\n                    if (control) {\r\n                        setTimeOut(control, disabledConfig);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\r\nfunction runDisabledExpression(control, config) {\r\n    let isDisabled = FormProvider.ProcessRule(control, { conditionalExpression: control[DISABLED_EXPRESSION], disableConfig: config });\r\n    if (isDisabled && !control.disabled)\r\n        control.disable();\r\n    else if (control.disabled)\r\n        control.enable();\r\n}\n\nclass RxwebFormDirective extends BaseDirective {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.clearTimeoutNumber = 0;\r\n        this.validationRule = {};\r\n    }\r\n    ngAfterContentInit() {\r\n        if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent == null) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.formGroup && !this.formGroup[MODEL] && this.formGroup.parent instanceof FormArray) {\r\n            this.expressionProcessor(this.formGroup.controls);\r\n            this.setConditionalValidator(this.formGroup.controls);\r\n        }\r\n        else if (this.ngForm) {\r\n            this.configureModelValidations();\r\n        }\r\n    }\r\n    configureModelValidations() {\r\n        this.clearTimeoutNumber = setTimeout(() => {\r\n            clearTimeout(this.clearTimeoutNumber);\r\n            this.applyValidations(this.ngForm.form.controls);\r\n            this.expressionProcessor(this.ngForm.form.controls);\r\n            this.setConditionalValidator(this.ngForm.form.controls);\r\n            this.updateValueAndValidity(this.ngForm.form.controls);\r\n        }, 500);\r\n    }\r\n    updateValueAndValidity(controls) {\r\n        Object.keys(controls).forEach(key => {\r\n            if (controls[key] instanceof FormGroup)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else if (controls[key] instanceof FormArray)\r\n                this.updateValueAndValidity(controls[key].controls);\r\n            else\r\n                controls[key].updateValueAndValidity();\r\n        });\r\n    }\r\n    expressionProcessor(controls, rootFieldName = \"\") {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            let formControl = controls[fieldName];\r\n            if (formControl.validatorConfig) {\r\n                Object.keys(AnnotationTypes).forEach(validatorName => {\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].disableExpression) {\r\n                        formControl[\"disableExpression\"] = formControl.validatorConfig[validatorName].disableExpression;\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].disableExpression);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(formControl.validatorConfig[validatorName].conditionalExpression);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && formControl.validatorConfig[validatorName].dynamicConfig) {\r\n                        let columns = Linq.dynamicConfigParser(formControl.validatorConfig[validatorName].dynamicConfig, fieldName);\r\n                        columns.forEach(t => {\r\n                            defaultContainer.setConditionalValueProp(this.validationRule, rootFieldName + t.propName, fieldName);\r\n                        });\r\n                    }\r\n                    if (formControl.validatorConfig[validatorName] && (validatorName == AnnotationTypes.and || validatorName == AnnotationTypes.or || validatorName == AnnotationTypes.not)) {\r\n                        Object.keys(formControl.validatorConfig[validatorName].validation).forEach(t => {\r\n                            if (typeof formControl.validatorConfig[validatorName].validation[t] !== \"boolean\")\r\n                                defaultContainer.setLogicalConditional(this.validationRule, t, formControl.validatorConfig[validatorName].validation[t].fieldName, fieldName);\r\n                        });\r\n                    }\r\n                    else if (formControl.validatorConfig[validatorName] && ((validatorName == AnnotationTypes.compare || validatorName == AnnotationTypes.greaterThan || validatorName == AnnotationTypes.greaterThanEqualTo || validatorName == AnnotationTypes.lessThan || validatorName == AnnotationTypes.lessThanEqualTo || validatorName == AnnotationTypes.different || validatorName == AnnotationTypes.factor || validatorName == AnnotationTypes.minTime || validatorName == AnnotationTypes.maxTime) || (validatorName == AnnotationTypes.creditCard && formControl.validatorConfig[validatorName].fieldName) || ((validatorName == AnnotationTypes.minDate || validatorName == AnnotationTypes.maxDate) && formControl.validatorConfig[validatorName].fieldName))) {\r\n                        defaultContainer.setConditionalValueProp(this.validationRule, formControl.validatorConfig[validatorName].fieldName, fieldName);\r\n                    }\r\n                });\r\n            }\r\n            else if (formControl instanceof FormGroup) {\r\n                this.expressionProcessor(formControl.controls, `${fieldName}.`);\r\n            }\r\n            else if (formControl instanceof FormArray) {\r\n                if (formControl.controls)\r\n                    formControl.controls.forEach((t, i) => {\r\n                        if (t.controls)\r\n                            this.expressionProcessor(t.controls, `${fieldName}[]`);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n    setConditionalValidator(controls) {\r\n        Object.keys(controls).forEach(fieldName => {\r\n            if (this.validationRule.conditionalValidationProps && this.validationRule.conditionalValidationProps[fieldName]) {\r\n                controls[fieldName][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(this.validationRule.conditionalValidationProps[fieldName]);\r\n            }\r\n            else if (controls[fieldName] instanceof FormGroup && this.validationRule.conditionalObjectProps) {\r\n                var fields = this.validationRule.conditionalObjectProps.filter(t => t.objectPropName == fieldName);\r\n                let nestedFormGroup = controls[fieldName];\r\n                let propWiseConditionalControls = {};\r\n                fields.forEach(x => {\r\n                    if (!propWiseConditionalControls[x.propName])\r\n                        propWiseConditionalControls[x.propName] = [];\r\n                    propWiseConditionalControls[x.propName].push(x.referencePropName);\r\n                });\r\n                Object.keys(propWiseConditionalControls).forEach(key => {\r\n                    nestedFormGroup.controls[key][CONDITIONAL_VALIDATOR] = conditionalChangeValidator(propWiseConditionalControls[key]);\r\n                });\r\n            }\r\n            else if (controls[fieldName] instanceof FormArray) {\r\n                //fix https://github.com/rxweb/rxweb/issues/274\r\n                controls[fieldName].controls.forEach((t, i) => {\r\n                    if (t.controls == undefined)\r\n                        this.setConditionalValidator({ [i]: t });\r\n                    else\r\n                        this.setConditionalValidator(t.controls);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n    }\r\n}\r\nRxwebFormDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxwebFormDirective, deps: null, target: i0.ÉµÉµFactoryTarget.Directive });\r\nRxwebFormDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: RxwebFormDirective, selector: \"[formGroup],[rxwebForm]\", inputs: { formGroup: \"formGroup\", ngForm: [\"rxwebForm\", \"ngForm\"] }, usesInheritance: true, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxwebFormDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[formGroup],[rxwebForm]',\r\n                }]\r\n        }], propDecorators: { formGroup: [{\r\n                type: Input\r\n            }], ngForm: [{\r\n                type: Input,\r\n                args: ['rxwebForm']\r\n            }] } });\n\nclass AsyncValidationDirective {\r\n    validate(control) {\r\n        if (this.async)\r\n            return this.async(control);\r\n        return of(null);\r\n    }\r\n}\r\nAsyncValidationDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: AsyncValidationDirective, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\r\nAsyncValidationDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: AsyncValidationDirective, selector: \"[ngModel],[formControlName],[formControl]\", inputs: { async: \"async\" }, providers: [{\r\n            provide: NG_ASYNC_VALIDATORS,\r\n            useExisting: forwardRef(() => AsyncValidationDirective),\r\n            multi: true\r\n        }], ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: AsyncValidationDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngModel],[formControlName],[formControl]',\r\n                    providers: [{\r\n                            provide: NG_ASYNC_VALIDATORS,\r\n                            useExisting: forwardRef(() => AsyncValidationDirective),\r\n                            multi: true\r\n                        }]\r\n                }]\r\n        }], propDecorators: { async: [{\r\n                type: Input\r\n            }] } });\n\nconst VALIDATOR_CONFIG$1 = \"validatorConfig\";\r\nconst FILE_VALIDATOR_NAMES = [\"extension\", \"fileSize\", \"file\"];\r\nclass FileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.validators = [];\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    onChangeCall(element) {\r\n        let files = element.files;\r\n        if (this.writeFile)\r\n            this.onChange(files);\r\n        else {\r\n            if (files.length > 0)\r\n                this.onChange(element.value);\r\n            else\r\n                this.onChange(undefined);\r\n        }\r\n    }\r\n    writeValue(value) { }\r\n    registerOnChange(invocation) { this.onChange = invocation; }\r\n    registerOnTouched(invocation) { this.onTouched = invocation; }\r\n    set extension(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);\r\n    }\r\n    set fileSize(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);\r\n    }\r\n    set file(config) {\r\n        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);\r\n    }\r\n    setConfig(control) {\r\n        FILE_VALIDATOR_NAMES.forEach(t => {\r\n            if (!this[t] && control[VALIDATOR_CONFIG$1] && control[VALIDATOR_CONFIG$1][t])\r\n                this[t] = control[VALIDATOR_CONFIG$1][t];\r\n        });\r\n        this.isProcessed = true;\r\n    }\r\n    pushValidator(validatorName, config) {\r\n        if (config)\r\n            this.validators.push(APP_VALIDATORS[validatorName](config));\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        var result = null;\r\n        for (var validator of this.validators) {\r\n            result = validator(control, this.element.files);\r\n            if (result)\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nFileControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: FileControlDirective, deps: [{ token: i0.ElementRef }], target: i0.ÉµÉµFactoryTarget.Directive });\r\nFileControlDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: FileControlDirective, selector: \"input[type=file]\", inputs: { writeFile: \"writeFile\", extension: \"extension\", fileSize: \"fileSize\", file: \"file\" }, host: { listeners: { \"change\": \"onChangeCall($event.target)\", \"blur\": \"onTouched()\" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective, multi: true }, {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => FileControlDirective),\r\n            multi: true\r\n        }], ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: FileControlDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"input[type=file]\",\r\n                    host: {\r\n                        \"(change)\": \"onChangeCall($event.target)\",\r\n                        \"(blur)\": \"onTouched()\"\r\n                    },\r\n                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective, multi: true }, {\r\n                            provide: NG_VALIDATORS,\r\n                            useExisting: forwardRef(() => FileControlDirective),\r\n                            multi: true\r\n                        }]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { writeFile: [{\r\n                type: Input\r\n            }], extension: [{\r\n                type: Input\r\n            }], fileSize: [{\r\n                type: Input\r\n            }], file: [{\r\n                type: Input\r\n            }] } });\n\nconst VALIDATOR_CONFIG = \"validatorConfig\";\r\nclass ImageFileControlDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.isProcessed = false;\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n    set image(config) {\r\n        this.imageValidation = APP_VALIDATORS.image(config);\r\n    }\r\n    setConfig(control) {\r\n        let image = \"image\";\r\n        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])\r\n            this[image] = control[VALIDATOR_CONFIG][image];\r\n        this.isProcessed = true;\r\n    }\r\n    validate(control) {\r\n        if (!this.isProcessed)\r\n            this.setConfig(control);\r\n        if (this.imageValidation) {\r\n            return this.imageValidation(control, this.element.files);\r\n        }\r\n        return of(null);\r\n    }\r\n}\r\nImageFileControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ImageFileControlDirective, deps: [{ token: i0.ElementRef }], target: i0.ÉµÉµFactoryTarget.Directive });\r\nImageFileControlDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: ImageFileControlDirective, selector: \"input[type=file]\", inputs: { image: \"image\" }, providers: [{\r\n            provide: NG_ASYNC_VALIDATORS,\r\n            useExisting: forwardRef(() => ImageFileControlDirective),\r\n            multi: true\r\n        }], ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ImageFileControlDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"input[type=file]\",\r\n                    providers: [{\r\n                            provide: NG_ASYNC_VALIDATORS,\r\n                            useExisting: forwardRef(() => ImageFileControlDirective),\r\n                            multi: true\r\n                        }]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { image: [{\r\n                type: Input\r\n            }] } });\n\nclass ControlExpressionProcess {\r\n    constructor() {\r\n        this.controlConfig = {};\r\n        this.isProcessed = false;\r\n    }\r\n    setModelConfig(control) {\r\n        this.isProcessed = true;\r\n        if (this.controlConfig && this.controlConfig.validatorConfig) {\r\n            control[VALIDATOR_CONFIG$2] = this.controlConfig.validatorConfig;\r\n            this.controlConfig = undefined;\r\n        }\r\n    }\r\n}\r\nControlExpressionProcess.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ControlExpressionProcess, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\r\nControlExpressionProcess.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: ControlExpressionProcess, inputs: { name: \"name\", formControlName: \"formControlName\" }, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ControlExpressionProcess, decorators: [{\r\n            type: Directive\r\n        }], propDecorators: { name: [{\r\n                type: Input\r\n            }], formControlName: [{\r\n                type: Input\r\n            }] } });\n\nclass BaseValidator extends ControlExpressionProcess {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.validators = [];\r\n    }\r\n    validation(control) {\r\n        let result = null;\r\n        for (let validator of this.validators) {\r\n            result = validator(control);\r\n            if (result)\r\n                break;\r\n        }\r\n        if (!result && this.maskProvider)\r\n            result = this.maskProvider.validate();\r\n        return result;\r\n    }\r\n    setEventName() {\r\n        var eventName = '';\r\n        switch (this.element.tagName) {\r\n            case INPUT:\r\n            case TEXTAREA:\r\n                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;\r\n                break;\r\n            case SELECT:\r\n                eventName = CHANGE;\r\n                break;\r\n        }\r\n        this.eventName = eventName.toLowerCase();\r\n    }\r\n}\r\nBaseValidator.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: BaseValidator, deps: null, target: i0.ÉµÉµFactoryTarget.Directive });\r\nBaseValidator.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: BaseValidator, inputs: { formControl: \"formControl\" }, usesInheritance: true, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: BaseValidator, decorators: [{\r\n            type: Directive\r\n        }], propDecorators: { formControl: [{\r\n                type: Input\r\n            }] } });\n\nconst SIMPLE_EMAIL_VALIDATION = \"simple-email-validation\";\r\nconst ADVANCED_EMAIL_VALIDATION = \"advanced-email-validation\";\n\nclass MaskProvider {\r\n    constructor(input, mask, renderer, formControl, config) {\r\n        this.input = input;\r\n        this.mask = mask;\r\n        this.renderer = renderer;\r\n        this.formControl = formControl;\r\n        this.config = config;\r\n        this.eventListeners = [];\r\n        this.oldValue = '';\r\n        this.type = 'text';\r\n        this.slotChar = '_';\r\n        this.autoClear = false;\r\n        this.isInvalid = false;\r\n        this.internalProcess = false;\r\n        this.bind();\r\n    }\r\n    bind() {\r\n        if (RegexValidator.isNotBlank(this.formControl.value))\r\n            this.input.value = this.formControl.value;\r\n        this.tests = [];\r\n        this.partialPosition = this.mask.length;\r\n        this.len = this.mask.length;\r\n        this.firstNonMaskPos = null;\r\n        this.defs = {\r\n            '9': '[0-9]',\r\n            'a': '[A-Za-z]',\r\n            '*': '[A-Za-z0-9]'\r\n        };\r\n        this.androidChrome = false;\r\n        let maskTokens = this.mask.split('');\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c == '?') {\r\n                this.len--;\r\n                this.partialPosition = i;\r\n            }\r\n            else if (this.defs[c]) {\r\n                this.tests.push(new RegExp(this.defs[c]));\r\n                if (this.firstNonMaskPos === null) {\r\n                    this.firstNonMaskPos = this.tests.length - 1;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    this.lastRequiredNonMaskPos = this.tests.length - 1;\r\n                }\r\n            }\r\n            else {\r\n                this.tests.push(null);\r\n            }\r\n        }\r\n        this.minLength = this.config.minLength ? this.lastRequiredNonMaskPos - (this.lastRequiredNonMaskPos - this.config.minLength) : this.lastRequiredNonMaskPos;\r\n        this.buffer = [];\r\n        for (let i = 0; i < maskTokens.length; i++) {\r\n            let c = maskTokens[i];\r\n            if (c != '?') {\r\n                if (this.defs[c])\r\n                    this.buffer.push(this.getPlaceholder(i));\r\n                else\r\n                    this.buffer.push(c);\r\n            }\r\n        }\r\n        this.defaultBuffer = this.buffer.join('');\r\n        this.focusText = this.input.value;\r\n        this.bindEvents();\r\n        this.checkVal();\r\n    }\r\n    bindEvents() {\r\n        this.eventListeners.push(this.renderer.listen(this.input, FOCUS, this.onFocus.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, BLUR, this.onBlur.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_DOWN, this.onKeyDown.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, KEY_PRESS, this.onKeyPress.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, \"input\", this.onInput.bind(this)));\r\n        this.eventListeners.push(this.renderer.listen(this.input, PASTE, this.handleInputChange.bind(this)));\r\n    }\r\n    validate() {\r\n        if ((this.input.value && this.oldValue != this.input.value)) {\r\n            this.checkVal(true);\r\n            this.isCompleted(null, true);\r\n            this.oldValue = this.input.value;\r\n        }\r\n        let config = getConfigObject(this.config, this.formControl);\r\n        if (RegexValidator.isNotBlank(this.getUnmaskedValue()) && FormProvider.ProcessRule(this.formControl, config)) {\r\n            if (this.isInvalid) {\r\n                return ObjectMaker.toJson(AnnotationTypes.mask, config, [this.formControl.value]);\r\n            }\r\n        }\r\n        return ObjectMaker.null();\r\n    }\r\n    writeValue(value) {\r\n        this.value = value;\r\n        if (this.input) {\r\n            if (this.value == undefined || this.value == null) {\r\n                this.input.value = '';\r\n            }\r\n            this.checkVal();\r\n        }\r\n        this.updateFilledState();\r\n    }\r\n    caret(first, last) {\r\n        let range, begin, end;\r\n        if (!this.input.offsetParent || this.input !== document.activeElement) {\r\n            return;\r\n        }\r\n        if (typeof first == 'number') {\r\n            begin = first;\r\n            end = (typeof last === 'number') ? last : begin;\r\n            if (this.input.setSelectionRange) {\r\n                this.input.setSelectionRange(begin, end);\r\n            }\r\n            else if (this.input['createTextRange']) {\r\n                range = this.input['createTextRange']();\r\n                range.collapse(true);\r\n                range.moveEnd('character', end);\r\n                range.moveStart('character', begin);\r\n                range.select();\r\n            }\r\n        }\r\n        else {\r\n            if (this.input.setSelectionRange) {\r\n                begin = this.input.selectionStart;\r\n                end = this.input.selectionEnd;\r\n            }\r\n            else if (document['selection'] && document['selection'].createRange) {\r\n                range = document['selection'].createRange();\r\n                begin = 0 - range.duplicate().moveStart('character', -100000);\r\n                end = begin + range.text.length;\r\n            }\r\n            return { begin: begin, end: end };\r\n        }\r\n    }\r\n    isCompleted(lastRequiredNonMaskPos, isNotRunValidator) {\r\n        let completed;\r\n        lastRequiredNonMaskPos = lastRequiredNonMaskPos || this.lastRequiredNonMaskPos;\r\n        for (let i = this.firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {\r\n            if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        this.isInvalid = false;\r\n        if (!isNotRunValidator)\r\n            this.formControl.updateValueAndValidity();\r\n        return true;\r\n    }\r\n    getPlaceholder(i) {\r\n        if (i < this.slotChar.length) {\r\n            return this.slotChar.charAt(i);\r\n        }\r\n        return this.slotChar.charAt(0);\r\n    }\r\n    seekNext(pos) {\r\n        while (++pos < this.len && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    seekPrev(pos) {\r\n        while (--pos >= 0 && !this.tests[pos])\r\n            ;\r\n        return pos;\r\n    }\r\n    shiftL(begin, end) {\r\n        let i, j;\r\n        if (begin < 0) {\r\n            return;\r\n        }\r\n        for (i = begin, j = this.seekNext(end); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                if (j < this.len && this.tests[i].test(this.buffer[j])) {\r\n                    this.buffer[i] = this.buffer[j];\r\n                    this.buffer[j] = this.getPlaceholder(j);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                j = this.seekNext(j);\r\n            }\r\n        }\r\n        this.writeBuffer();\r\n        this.caret(Math.max(this.firstNonMaskPos, begin));\r\n    }\r\n    shiftR(pos) {\r\n        let i, c, j, t;\r\n        for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                j = this.seekNext(i);\r\n                t = this.buffer[i];\r\n                this.buffer[i] = c;\r\n                if (j < this.len && this.tests[j].test(t)) {\r\n                    c = t;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleAndroidInput(e) {\r\n        var curVal = this.input.value;\r\n        var pos = this.caret();\r\n        if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\r\n            this.checkVal(true);\r\n            while (pos.begin > 0 && !this.tests[pos.begin - 1])\r\n                pos.begin--;\r\n            if (pos.begin === 0) {\r\n                while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin])\r\n                    pos.begin++;\r\n            }\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        else {\r\n            var pos2 = this.checkVal(true);\r\n            while (pos.begin < this.len && !this.tests[pos.begin])\r\n                pos.begin++;\r\n            this.caret(pos.begin, pos.begin);\r\n        }\r\n        if (this.isCompleted()) {\r\n            this.isInvalid = false;\r\n        }\r\n        else {\r\n            this.isInvalid = true;\r\n            this.formControl.updateValueAndValidity();\r\n        }\r\n    }\r\n    onBlur(e) {\r\n        this.focus = false;\r\n        this.checkVal();\r\n        this.updateModel(e);\r\n        this.updateFilledState();\r\n        if (this.input.value != this.focusText) {\r\n            let event = document.createEvent('HTMLEvents');\r\n            event.initEvent('change', true, false);\r\n            this.input.dispatchEvent(event);\r\n            let maskedValue = this.input.value;\r\n            this.formControl.setValue(this.config.valueWithMask ? maskedValue : this.getUnmaskedValue());\r\n            this.input.value = maskedValue;\r\n        }\r\n    }\r\n    onKeyDown(e) {\r\n        let k = e.which || e.keyCode, pos, begin, end;\r\n        let iPhone = false;\r\n        this.oldVal = this.input.value;\r\n        let controlValid = this.config.minLength ? this.isCompleted(this.minLength + 1) : false;\r\n        if (k === 8 || k === 46 || (iPhone && k === 127)) {\r\n            pos = this.caret();\r\n            begin = pos.begin;\r\n            end = pos.end;\r\n            if (end - begin === 0) {\r\n                begin = k !== 46 ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\r\n                end = k === 46 ? this.seekNext(end) : end;\r\n            }\r\n            this.clearBuffer(begin, end);\r\n            this.shiftL(begin, end - 1);\r\n            this.setControlValue(e, false, controlValid);\r\n            this.updateModel(e);\r\n            e.preventDefault();\r\n        }\r\n        else if (k === 13) {\r\n            this.onBlur(e);\r\n            this.setControlValue(e, false, controlValid);\r\n            this.updateModel(e);\r\n        }\r\n        else if (k === 27) {\r\n            this.input.value = this.focusText;\r\n            this.caret(0, this.checkVal());\r\n            this.updateModel(e);\r\n            this.setControlValue(e, false, controlValid);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    onKeyPress(e) {\r\n        var k = e.which || e.keyCode, pos = this.caret(), p, c, next, completed;\r\n        if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {\r\n            return;\r\n        }\r\n        else if (k && k !== 13) {\r\n            if (pos.end - pos.begin !== 0) {\r\n                this.clearBuffer(pos.begin, pos.end);\r\n                this.shiftL(pos.begin, pos.end - 1);\r\n            }\r\n            p = this.seekNext(pos.begin - 1);\r\n            if (p < this.len) {\r\n                c = String.fromCharCode(k);\r\n                if (this.tests[p].test(c)) {\r\n                    this.shiftR(p);\r\n                    this.buffer[p] = c;\r\n                    this.writeBuffer();\r\n                    next = this.seekNext(p);\r\n                    this.caret(next);\r\n                    if (pos.begin <= this.lastRequiredNonMaskPos) {\r\n                        completed = this.isCompleted();\r\n                    }\r\n                }\r\n            }\r\n            e.preventDefault();\r\n        }\r\n        this.updateModel(e);\r\n        if (completed === undefined)\r\n            completed = this.isCompleted();\r\n        this.setControlValue(e, completed, this.config.minLength ? this.isCompleted(this.minLength) : false);\r\n    }\r\n    clearBuffer(start, end) {\r\n        let i;\r\n        for (i = start; i < end && i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n            }\r\n        }\r\n    }\r\n    writeBuffer() {\r\n        this.input.value = this.buffer.join('');\r\n    }\r\n    checkVal(allow) {\r\n        let test = this.input.value, lastMatch = -1, i, c, pos;\r\n        for (i = 0, pos = 0; i < this.len; i++) {\r\n            if (this.tests[i]) {\r\n                this.buffer[i] = this.getPlaceholder(i);\r\n                while (pos++ < test.length) {\r\n                    c = test.charAt(pos - 1);\r\n                    if (this.tests[i].test(c)) {\r\n                        this.buffer[i] = c;\r\n                        lastMatch = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pos > test.length) {\r\n                    this.clearBuffer(i + 1, this.len);\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (this.buffer[i] === test.charAt(pos)) {\r\n                    pos++;\r\n                }\r\n                if (i < this.partialPosition) {\r\n                    lastMatch = i;\r\n                }\r\n            }\r\n        }\r\n        if (allow) {\r\n            this.writeBuffer();\r\n        }\r\n        else if ((lastMatch + 1 < this.partialPosition) && (!this.config.minLength || !(lastMatch >= this.minLength))) {\r\n            if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\r\n                this.isInvalid = true;\r\n            }\r\n            else {\r\n                this.isInvalid = true;\r\n                this.writeBuffer();\r\n            }\r\n        }\r\n        else {\r\n            this.writeBuffer();\r\n            this.input.value = this.input.value.substring(0, lastMatch + 1);\r\n        }\r\n        return (this.partialPosition ? i : this.firstNonMaskPos);\r\n    }\r\n    onFocus(event) {\r\n        this.focus = true;\r\n        clearTimeout(this.caretTimeoutId);\r\n        let pos;\r\n        this.focusText = this.input.value;\r\n        pos = this.checkVal();\r\n        this.caretTimeoutId = setTimeout(() => {\r\n            if (this.input !== document.activeElement) {\r\n                return;\r\n            }\r\n            this.writeBuffer();\r\n            if (pos == this.mask.replace(\"?\", \"\").length) {\r\n                this.caret(0, pos);\r\n            }\r\n            else {\r\n                this.caret(pos);\r\n            }\r\n            this.updateFilledState();\r\n        }, 10);\r\n    }\r\n    onInput(event) {\r\n        if (this.androidChrome)\r\n            this.handleAndroidInput(event);\r\n        else\r\n            this.handleInputChange(event);\r\n    }\r\n    setControlValue(e, isValid, isValidControl) {\r\n        this.isInvalid = isValidControl ? !isValidControl : !isValid;\r\n        let value = this.input.value;\r\n        let controlValue = '';\r\n        if (!this.isInvalid)\r\n            controlValue = this.config.valueWithMask ? value : this.getUnmaskedValue();\r\n        this.formControl.setValue(controlValue);\r\n        this.oldValue = this.input.value = value;\r\n        if (!isValid)\r\n            this.onFocus(e);\r\n    }\r\n    handleInputChange(event) {\r\n        setTimeout(() => {\r\n            var pos = this.checkVal(true);\r\n            this.caret(pos);\r\n            this.updateModel(event);\r\n            this.setControlValue(event, this.isCompleted());\r\n        }, 0);\r\n    }\r\n    getUnmaskedValue() {\r\n        let unmaskedBuffer = [];\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            let c = this.buffer[i];\r\n            if (this.tests[i] && c != this.getPlaceholder(i)) {\r\n                unmaskedBuffer.push(c);\r\n            }\r\n        }\r\n        return unmaskedBuffer.join('');\r\n    }\r\n    updateModel(e) {\r\n    }\r\n    updateFilledState() {\r\n        this.filled = this.input && this.input.value != '';\r\n    }\r\n    onDestroy() {\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n    }\r\n}\n\nclass DecimalProvider {\r\n    constructor(decimalPipe, localeId) {\r\n        this.decimalPipe = decimalPipe;\r\n        this.localeId = localeId;\r\n        this.decimalSeperator = \".\";\r\n        this.groupSeperator = \",\";\r\n        this.isSetConfig = false;\r\n        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);\r\n        ;\r\n        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);\r\n        this.setSymbolInConfig();\r\n    }\r\n    replacer(value) {\r\n        value = String(value);\r\n        if (!this.isSetConfig)\r\n            this.bindConfig();\r\n        value = value.split(this.groupSeperator).join(BLANK);\r\n        if (this.allowDecimalSymbol)\r\n            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);\r\n        var splitValue = value.split(this.decimalSeperator);\r\n        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;\r\n        return value;\r\n    }\r\n    transFormDecimal(value, digitsInfo, persistZero) {\r\n        value = String(value);\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        let transformedValue = this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, \"\").replace(this.decimalSeperator, \".\"), digitsInfo, this.localeId);\r\n        if (persistZero && value.indexOf(this.decimalSeperator)) {\r\n            let splitTransformed = transformedValue.split(\".\");\r\n            let splitDigitsInfo = digitsInfo ? digitsInfo.split(\"-\") : [];\r\n            let digits = splitDigitsInfo.length > 1 ? parseInt(splitDigitsInfo[splitDigitsInfo.length - 1]) : 0;\r\n            if (splitTransformed.length > 1 && splitDigitsInfo.length > 0 && digits !== 0 && splitTransformed[1].length !== digits) {\r\n                let diff = digits - splitTransformed[1].length;\r\n                for (let i = 0; i < diff; i++) {\r\n                    transformedValue += \"0\";\r\n                }\r\n            }\r\n        }\r\n        return transformedValue;\r\n    }\r\n    setSymbolInConfig() {\r\n        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };\r\n    }\r\n    bindConfig() {\r\n        if (ReactiveFormConfig.json) {\r\n            if (ReactiveFormConfig.json.localeId)\r\n                this.localeId = ReactiveFormConfig.json.localeId;\r\n            if (ReactiveFormConfig.json.allowDecimalSymbol)\r\n                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;\r\n        }\r\n        this.isSetConfig = true;\r\n    }\r\n}\r\nDecimalProvider.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: DecimalProvider, deps: [{ token: i1.DecimalPipe }, { token: LOCALE_ID }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nDecimalProvider.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: DecimalProvider });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: DecimalProvider, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.DecimalPipe }, { type: undefined, decorators: [{\r\n                        type: Inject,\r\n                        args: [LOCALE_ID]\r\n                    }] }];\r\n    } });\n\nconst NGMODEL_BINDING = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => RxFormControlDirective),\r\n    multi: true\r\n};\r\nconst ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];\r\nconst NUMERIC = \"numeric\";\r\nconst IS_FORMAT = \"isFormat\";\r\nconst DIGITS_INFO = \"digitsInfo\";\r\nclass RxFormControlDirective extends BaseValidator {\r\n    constructor(elementRef, renderer, decimalProvider) {\r\n        super();\r\n        this.elementRef = elementRef;\r\n        this.renderer = renderer;\r\n        this.decimalProvider = decimalProvider;\r\n        this.eventListeners = [];\r\n        this.isNumericSubscribed = false;\r\n        this.isFocusCalled = false;\r\n        this.isMasked = false;\r\n        this.element = elementRef.nativeElement;\r\n        this.setEventName();\r\n    }\r\n    set validationControls(value) {\r\n        this.controls = value;\r\n    }\r\n    get validationControls() {\r\n        return this.controls;\r\n    }\r\n    ngOnInit() {\r\n        let validators = [];\r\n        Object.keys(APP_VALIDATORS).forEach(validatorName => {\r\n            if ((this[`rx${validatorName}`]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[`rx${validatorName}`] == BLANK)) {\r\n                validators.push(APP_VALIDATORS[validatorName](this[`rx${validatorName}`]));\r\n                if (this.name && !(this.formControlName && this.formControl)) {\r\n                    ApplicationUtil.configureControl(this.controlConfig, this[`rx${validatorName}`], validatorName);\r\n                }\r\n            }\r\n        });\r\n        if (validators.length > 0)\r\n            this.validators = validators;\r\n        if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {\r\n            this.bindNumericElementEvent();\r\n        }\r\n    }\r\n    blurEvent() {\r\n        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {\r\n            if (this.formControl.value !== null && this.formControl.value !== undefined) {\r\n                let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo, this.rxnumeric.persistZero);\r\n                value = (!this.rxnumeric.isFormat) ? this.decimalProvider.replacer(value) : value;\r\n                this.setValueOnElement(value);\r\n            }\r\n            this.isFocusCalled = false;\r\n        }\r\n    }\r\n    bindNumericElementEvent(config) {\r\n        if (config)\r\n            this.rxnumeric = config;\r\n        let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));\r\n        this.eventListeners.push(listener);\r\n        listener = this.renderer.listen(this.element, FOCUS, (event) => {\r\n            this.isFocusCalled = true;\r\n            if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {\r\n                let value = this.decimalProvider.replacer(this.element.value);\r\n                this.setValueOnElement(value);\r\n            }\r\n        });\r\n        this.eventListeners.push(listener);\r\n    }\r\n    bindValueChangeEvent() {\r\n        if (this.eventName != BLANK) {\r\n            let listener = this.renderer.listen(this.element, this.eventName, () => {\r\n                Object.keys(this.validationControls).forEach(fieldName => {\r\n                    this.validationControls[fieldName].updateValueAndValidity();\r\n                });\r\n            });\r\n            this.eventListeners.push(listener);\r\n        }\r\n    }\r\n    subscribeNumericFormatter() {\r\n        if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][NUMERIC] && (this.formControl[VALIDATOR_CONFIG$2][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG$2][NUMERIC][DIGITS_INFO])) {\r\n            if (!this.isNumericSubscribed) {\r\n                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG$2][NUMERIC]);\r\n                this.isNumericSubscribed = true;\r\n            }\r\n            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {\r\n                this.blurEvent();\r\n            }\r\n        }\r\n    }\r\n    subscribeMaskValidator() {\r\n        if (this.formControl[VALIDATOR_CONFIG$2] && this.formControl[VALIDATOR_CONFIG$2][\"mask\"] && !this.isMasked) {\r\n            let config = this.formControl[VALIDATOR_CONFIG$2][\"mask\"];\r\n            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);\r\n            this.isMasked = true;\r\n        }\r\n    }\r\n    setValueOnElement(value) {\r\n        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);\r\n    }\r\n    setTemplateValidators(control) {\r\n        for (let validatorName in control[VALIDATOR_CONFIG$2]) {\r\n            this[validatorName] = control[VALIDATOR_CONFIG$2][validatorName];\r\n        }\r\n        delete control[TEMPLATE_VALIDATION_CONFIG];\r\n        delete control[VALIDATOR_CONFIG$2];\r\n        this.ngOnInit();\r\n    }\r\n    updateOnElementClass(element) {\r\n        var previousClassName = '';\r\n        return function (className) {\r\n            if (previousClassName)\r\n                element.classList.remove(previousClassName);\r\n            if (className)\r\n                element.classList.add(className);\r\n            previousClassName = className;\r\n        };\r\n    }\r\n    setValidatorConfig(control) {\r\n        if (!this.formControl) {\r\n            this.formControl = control;\r\n            let rxFormControl = this.formControl;\r\n            if (rxFormControl.updateOnElementClass)\r\n                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);\r\n        }\r\n        this.subscribeMaskValidator();\r\n        this.subscribeNumericFormatter();\r\n        if (control[TEMPLATE_VALIDATION_CONFIG])\r\n            this.setTemplateValidators(control);\r\n        if (control[CONDITIONAL_VALIDATOR]) {\r\n            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];\r\n            delete control[CONDITIONAL_VALIDATOR];\r\n        }\r\n    }\r\n    validate(control) {\r\n        this.setValidatorConfig(control);\r\n        if (this.conditionalValidator)\r\n            this.conditionalValidator(control);\r\n        if (!this.isProcessed)\r\n            this.setModelConfig(control);\r\n        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;\r\n    }\r\n    ngOnDestroy() {\r\n        this.controls = undefined;\r\n        let eventCount = this.eventListeners.length;\r\n        for (var i = 0; i < eventCount; i++) {\r\n            this.eventListeners[0]();\r\n            this.eventListeners.splice(0, 1);\r\n        }\r\n        this.eventListeners = [];\r\n        if (this.maskProvider)\r\n            this.maskProvider.onDestroy();\r\n    }\r\n}\r\nRxFormControlDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxFormControlDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DecimalProvider }], target: i0.ÉµÉµFactoryTarget.Directive });\r\nRxFormControlDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: RxFormControlDirective, selector: \"[ngModel],[formControlName],[formControl]\", inputs: { rxalpha: \"rxalpha\", rxalphaNumeric: \"rxalphaNumeric\", rxascii: \"rxascii\", rxcompare: \"rxcompare\", rxcompose: \"rxcompose\", rxcontains: \"rxcontains\", rxcreditCard: \"rxcreditCard\", rxdataUri: \"rxdataUri\", rxdifferent: \"rxdifferent\", rxdigit: \"rxdigit\", rxemail: \"rxemail\", rxendsWith: \"rxendsWith\", rxeven: \"rxeven\", rxextension: \"rxextension\", rxfactor: \"rxfactor\", rxfileSize: \"rxfileSize\", rxgreaterThanEqualTo: \"rxgreaterThanEqualTo\", rxgreaterThan: \"rxgreaterThan\", rxhexColor: \"rxhexColor\", rxjson: \"rxjson\", rxlatitude: \"rxlatitude\", rxlatLong: \"rxlatLong\", rxleapYear: \"rxleapYear\", rxlessThan: \"rxlessThan\", rxlessThanEqualTo: \"rxlessThanEqualTo\", rxlongitude: \"rxlongitude\", rxlowerCase: \"rxlowerCase\", rxmac: \"rxmac\", rxmaxDate: \"rxmaxDate\", rxmaxLength: \"rxmaxLength\", rxmaxNumber: \"rxmaxNumber\", rxminDate: \"rxminDate\", rxminLength: \"rxminLength\", rxminNumber: \"rxminNumber\", rxnumeric: \"rxnumeric\", rxodd: \"rxodd\", rxpassword: \"rxpassword\", rxport: \"rxport\", rxprimeNumber: \"rxprimeNumber\", rxrequired: \"rxrequired\", rxrange: \"rxrange\", rxrule: \"rxrule\", rxstartsWith: \"rxstartsWith\", rxtime: \"rxtime\", rxupperCase: \"rxupperCase\", rxurl: \"rxurl\", rxunique: \"rxunique\", rxnotEmpty: \"rxnotEmpty\", rxcusip: \"rxcusip\", rxgrid: \"rxgrid\", rxdate: \"rxdate\" }, providers: [NGMODEL_BINDING], usesInheritance: true, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxFormControlDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngModel],[formControlName],[formControl]',\r\n                    providers: [NGMODEL_BINDING],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: DecimalProvider }]; }, propDecorators: { rxalpha: [{\r\n                type: Input\r\n            }], rxalphaNumeric: [{\r\n                type: Input\r\n            }], rxascii: [{\r\n                type: Input\r\n            }], rxcompare: [{\r\n                type: Input\r\n            }], rxcompose: [{\r\n                type: Input\r\n            }], rxcontains: [{\r\n                type: Input\r\n            }], rxcreditCard: [{\r\n                type: Input\r\n            }], rxdataUri: [{\r\n                type: Input\r\n            }], rxdifferent: [{\r\n                type: Input\r\n            }], rxdigit: [{\r\n                type: Input\r\n            }], rxemail: [{\r\n                type: Input\r\n            }], rxendsWith: [{\r\n                type: Input\r\n            }], rxeven: [{\r\n                type: Input\r\n            }], rxextension: [{\r\n                type: Input\r\n            }], rxfactor: [{\r\n                type: Input\r\n            }], rxfileSize: [{\r\n                type: Input\r\n            }], rxgreaterThanEqualTo: [{\r\n                type: Input\r\n            }], rxgreaterThan: [{\r\n                type: Input\r\n            }], rxhexColor: [{\r\n                type: Input\r\n            }], rxjson: [{\r\n                type: Input\r\n            }], rxlatitude: [{\r\n                type: Input\r\n            }], rxlatLong: [{\r\n                type: Input\r\n            }], rxleapYear: [{\r\n                type: Input\r\n            }], rxlessThan: [{\r\n                type: Input\r\n            }], rxlessThanEqualTo: [{\r\n                type: Input\r\n            }], rxlongitude: [{\r\n                type: Input\r\n            }], rxlowerCase: [{\r\n                type: Input\r\n            }], rxmac: [{\r\n                type: Input\r\n            }], rxmaxDate: [{\r\n                type: Input\r\n            }], rxmaxLength: [{\r\n                type: Input\r\n            }], rxmaxNumber: [{\r\n                type: Input\r\n            }], rxminDate: [{\r\n                type: Input\r\n            }], rxminLength: [{\r\n                type: Input\r\n            }], rxminNumber: [{\r\n                type: Input\r\n            }], rxnumeric: [{\r\n                type: Input\r\n            }], rxodd: [{\r\n                type: Input\r\n            }], rxpassword: [{\r\n                type: Input\r\n            }], rxport: [{\r\n                type: Input\r\n            }], rxprimeNumber: [{\r\n                type: Input\r\n            }], rxrequired: [{\r\n                type: Input\r\n            }], rxrange: [{\r\n                type: Input\r\n            }], rxrule: [{\r\n                type: Input\r\n            }], rxstartsWith: [{\r\n                type: Input\r\n            }], rxtime: [{\r\n                type: Input\r\n            }], rxupperCase: [{\r\n                type: Input\r\n            }], rxurl: [{\r\n                type: Input\r\n            }], rxunique: [{\r\n                type: Input\r\n            }], rxnotEmpty: [{\r\n                type: Input\r\n            }], rxcusip: [{\r\n                type: Input\r\n            }], rxgrid: [{\r\n                type: Input\r\n            }], rxdate: [{\r\n                type: Input\r\n            }] } });\n\nvar UrlValidationType;\r\n(function (UrlValidationType) {\r\n    UrlValidationType[UrlValidationType[\"FQDN\"] = 1] = \"FQDN\";\r\n    UrlValidationType[UrlValidationType[\"LocalHost\"] = 2] = \"LocalHost\";\r\n    UrlValidationType[UrlValidationType[\"IntranetServer\"] = 3] = \"IntranetServer\";\r\n})(UrlValidationType || (UrlValidationType = {}));\n\nclass FormBuilderConfiguration {\r\n    constructor(formBuilderConfiguration) {\r\n        if (formBuilderConfiguration)\r\n            for (var column in formBuilderConfiguration)\r\n                this[column] = formBuilderConfiguration[column];\r\n    }\r\n}\n\nclass IAbstractControl extends AbstractControl {\r\n}\n\nclass ControlHostDirective {\r\n    constructor(viewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    set portal(context) {\r\n        if (context.templateRef) {\r\n            if (this.view) {\r\n                this.view.destroy();\r\n                this.view = undefined;\r\n            }\r\n            this.view = this.viewContainerRef.createEmbeddedView(context.templateRef, context);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.view)\r\n            this.view.destroy();\r\n        if (this.viewContainerRef)\r\n            this.viewContainerRef.clear();\r\n    }\r\n}\r\nControlHostDirective.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ControlHostDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ÉµÉµFactoryTarget.Directive });\r\nControlHostDirective.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.2.12\", type: ControlHostDirective, selector: \"[controlHost]\", inputs: { portal: [\"controlHost\", \"portal\"] }, ngImport: i0 });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ControlHostDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[controlHost]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { portal: [{\r\n                type: Input,\r\n                args: ['controlHost']\r\n            }] } });\n\nclass BaseFormBuilder {\r\n    constructor() {\r\n    }\r\n    createInstance() {\r\n        let instance = {};\r\n        defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;\r\n        let modelName = `RxWebModel${defaultContainer.modelIncrementCount}`;\r\n        instance.constructor = Function(`\"use strict\";return(function ${modelName}(){ })`)();\r\n        return instance;\r\n    }\r\n    createClassObject(model, formBuilderConfiguration, classInstance) {\r\n        let instanceContainer = defaultContainer.get(model);\r\n        let autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;\r\n        if (!autoInstanceConfig) {\r\n            return classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, []);\r\n        }\r\n        else {\r\n            classInstance = classInstance && typeof classInstance != \"function\" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);\r\n            if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.objectPropInstanceConfig.forEach(t => {\r\n                    let objectProperty = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY)[0];\r\n                    if (objectProperty) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);\r\n                        if (data)\r\n                            this.setObjectValue(data, classInstance[t.propertyName]);\r\n                    }\r\n                });\r\n            }\r\n            if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {\r\n                autoInstanceConfig.arrayPropInstanceConfig.forEach(t => {\r\n                    let property = instanceContainer.properties.filter(property => property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY)[0];\r\n                    if (property) {\r\n                        let data = classInstance[t.propertyName];\r\n                        classInstance[t.propertyName] = [];\r\n                        for (var i = 0; i < t.rowItems; i++) {\r\n                            let instance = getInstance(property.entity, t.arguments || []);\r\n                            if (data && data[i])\r\n                                this.setObjectValue(data[i], instance);\r\n                            classInstance[t.propertyName].push(instance);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return classInstance;\r\n        }\r\n    }\r\n    updateObject(model, entityObject, formBuilderConfiguration) {\r\n        let instanceContainer = instanceProvider(model);\r\n        let classInstance = getInstance(model, []);\r\n        if (instanceContainer) {\r\n            instanceContainer.properties.forEach(t => {\r\n                let entity = ((t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity) ? t.entity : (formBuilderConfiguration && formBuilderConfiguration.genericEntities) ? formBuilderConfiguration.genericEntities[t.name] : undefined;\r\n                if (!entity && t.entityProvider)\r\n                    entity = t.entityProvider.call(entityObject);\r\n                switch (t.propertyType) {\r\n                    case PROPERTY:\r\n                        classInstance[t.name] = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (objectValue)\r\n                            classInstance[t.name] = this.updateObject(entity, objectValue, formBuilderConfiguration);\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = this.getValue(entityObject, t, formBuilderConfiguration);\r\n                        if (arrayObjectValue && Array.isArray(arrayObjectValue)) {\r\n                            classInstance[t.name] = [];\r\n                            for (let row of arrayObjectValue) {\r\n                                let instanceObject = this.updateObject(entity, row, formBuilderConfiguration);\r\n                                classInstance[t.name].push(instanceObject);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return classInstance;\r\n    }\r\n    instaceProvider(instanceFunc, entityObject) {\r\n        return instanceProvider(instanceFunc, entityObject);\r\n    }\r\n    getDefaultValue(propertyInfo, value, formBuilderConfiguration) {\r\n        let defaultValue = (formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value)) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : (propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value)) ?\r\n            propertyInfo.defaultValue :\r\n            value;\r\n        return defaultValue;\r\n    }\r\n    sanitizeValue(instanceContainer, propertyName, value, entityObject, baseObject) {\r\n        if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {\r\n            for (let sanitizer of instanceContainer.sanitizers[propertyName])\r\n                value = SANITIZERS[sanitizer.name](value, sanitizer.config);\r\n        }\r\n        if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value)\r\n            entityObject[propertyName] = value;\r\n        if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value)\r\n            baseObject[propertyName] = value;\r\n        return value;\r\n    }\r\n    getValue(entityObject, propertyInfo, formBuilderConfiguration) {\r\n        let propValue = (propertyInfo.dataPropertyName) ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];\r\n        return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);\r\n    }\r\n    setObjectValue(entityObject, classInstance) {\r\n        for (var column in entityObject) {\r\n            classInstance[column] = entityObject[column];\r\n        }\r\n    }\r\n}\n\nfunction andValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.and, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction orValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.or, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nfunction notValidator(configModel) {\r\n    return (control) => {\r\n        let config = getConfigObject(configModel, control);\r\n        if (ValidatorValueChecker.pass(control, config)) {\r\n            let validatorNames = Object.keys(config.validation);\r\n            let failed = false;\r\n            for (var validatorName of validatorNames) {\r\n                failed = typeof config.validation[validatorName] == \"boolean\" ? APP_VALIDATORS[validatorName]()(control) : APP_VALIDATORS[validatorName](config.validation[validatorName])(control);\r\n                if (!failed)\r\n                    break;\r\n            }\r\n            if (!failed)\r\n                return ObjectMaker.toJson(AnnotationTypes.not, config, [control.value]);\r\n        }\r\n        return ObjectMaker.null();\r\n    };\r\n}\n\nconst LOGICAL_VALIDATORS = { and: andValidator, or: orValidator, not: notValidator };\r\nconst ASYNC = \"async\";\r\nconst ENTITY_OBJECT = \"entityObject\";\r\nclass RxFormBuilder extends BaseFormBuilder {\r\n    constructor() {\r\n        super();\r\n        this.conditionalObjectProps = [];\r\n        this.conditionalValidationInstance = {};\r\n        this.builderConfigurationConditionalObjectProps = [];\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = {};\r\n        this.isNested = false;\r\n        this.isGroupCalled = false;\r\n        this.isNestedBinding = false;\r\n    }\r\n    getInstanceContainer(instanceFunc, entityObject) {\r\n        return this.instaceProvider(instanceFunc, entityObject);\r\n    }\r\n    setValue(formGroup, object) {\r\n        for (var col in object) {\r\n            var control = formGroup.get([col]);\r\n            control.setValue(object[col]);\r\n            control.updateValueAndValidity();\r\n        }\r\n    }\r\n    extractExpressions(fomrBuilderConfiguration) {\r\n        if (fomrBuilderConfiguration && fomrBuilderConfiguration.dynamicValidation) {\r\n            for (var property in fomrBuilderConfiguration.dynamicValidation) {\r\n                for (var decorator in fomrBuilderConfiguration.dynamicValidation[property]) {\r\n                    if (fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression) {\r\n                        let columns = Linq.expressionColumns(fomrBuilderConfiguration.dynamicValidation[property][decorator].conditionalExpression);\r\n                        defaultContainer.addChangeValidation(this.conditionalValidationInstance, property, columns);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    addAsyncValidation(property, propertyValidators, propValidationConfig) {\r\n        let asyncValidators = [];\r\n        if (propertyValidators) {\r\n            for (let propertyValidator of propertyValidators) {\r\n                if (propertyValidator.isAsync)\r\n                    propertyValidator.config.forEach(t => { asyncValidators.push(t); });\r\n            }\r\n        }\r\n        if (propValidationConfig && propValidationConfig[ASYNC]) {\r\n            propValidationConfig[ASYNC].forEach(t => { asyncValidators.push(t); });\r\n        }\r\n        return asyncValidators;\r\n    }\r\n    addFormControl(property, propertyValidators, propValidationConfig, instance, entity) {\r\n        let validators = [];\r\n        let columns = [];\r\n        if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]) || (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])) {\r\n            let props = [];\r\n            if ((instance.conditionalValidationProps && instance.conditionalValidationProps[property.name]))\r\n                instance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            if (this.conditionalValidationInstance.conditionalValidationProps && this.conditionalValidationInstance.conditionalValidationProps[property.name])\r\n                this.conditionalValidationInstance.conditionalValidationProps[property.name].forEach(t => props.push(t));\r\n            validators.push(conditionalChangeValidator(props));\r\n        }\r\n        if (this.conditionalObjectProps.length > 0 || this.builderConfigurationConditionalObjectProps.length > 0) {\r\n            let propConditions = [];\r\n            if (this.conditionalObjectProps)\r\n                propConditions = this.conditionalObjectProps.filter(t => t.propName == property.name);\r\n            if (this.builderConfigurationConditionalObjectProps)\r\n                this.builderConfigurationConditionalObjectProps.filter(t => t.propName == property.name).forEach(t => propConditions.push(t));\r\n            propConditions.forEach(t => {\r\n                if (t.referencePropName && columns.indexOf(t.referencePropName) == -1)\r\n                    columns.push(t.referencePropName);\r\n            });\r\n            if (columns.length > 0)\r\n                validators.push(conditionalChangeValidator(columns));\r\n        }\r\n        for (let propertyValidator of propertyValidators) {\r\n            if (!propertyValidator.isAsync) {\r\n                let config = propertyValidator.config;\r\n                if (property.messageNexus)\r\n                    config = config ? Object.assign({ messageNexus: property.messageNexus }, config) : { messageNexus: property.messageNexus };\r\n                switch (propertyValidator.annotationType) {\r\n                    case AnnotationTypes.rule:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](config, entity));\r\n                        break;\r\n                    case AnnotationTypes.and:\r\n                    case AnnotationTypes.or:\r\n                    case AnnotationTypes.not:\r\n                        validators.push(LOGICAL_VALIDATORS[propertyValidator.annotationType](config));\r\n                        break;\r\n                    default:\r\n                        validators.push(APP_VALIDATORS[propertyValidator.annotationType](config));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (propValidationConfig)\r\n            this.additionalValidation(validators, propValidationConfig);\r\n        if (this.currentFormGroupPropOtherValidator[property.name])\r\n            this.currentFormGroupPropOtherValidator[property.name].forEach(t => { validators.push(t); });\r\n        return validators;\r\n    }\r\n    additionalValidation(validations, propValidationConfig) {\r\n        for (var col in AnnotationTypes) {\r\n            if (propValidationConfig[AnnotationTypes[col]] && col != \"custom\") {\r\n                validations.push(APP_VALIDATORS[AnnotationTypes[col]](propValidationConfig[AnnotationTypes[col]]));\r\n            }\r\n            else if (col == AnnotationTypes.custom && propValidationConfig[AnnotationTypes[col]])\r\n                validations.push(propValidationConfig[col]);\r\n        }\r\n    }\r\n    getEntity(object, formBuilderConfiguration, propertyName, isSameObjectConstructor = false) {\r\n        if (formBuilderConfiguration && formBuilderConfiguration.genericEntities && formBuilderConfiguration.genericEntities[propertyName])\r\n            return formBuilderConfiguration.genericEntities[propertyName];\r\n        return isSameObjectConstructor ? object.constructor : undefined;\r\n    }\r\n    getObjectPropertyInstance(object, propertyInfo, formBuilderConfiguration) {\r\n        if (propertyInfo.propertyType == OBJECT_PROPERTY && object[propertyInfo.name])\r\n            return object[propertyInfo.name].constructor;\r\n        else if (propertyInfo.propertyType == ARRAY_PROPERTY && object[propertyInfo.name] && object[propertyInfo.name].length > 0)\r\n            return object[propertyInfo.name][0].constructor;\r\n        return this.getEntity(object, formBuilderConfiguration, propertyInfo.name);\r\n    }\r\n    checkObjectPropAdditionalValidation(instanceContainer, object, formBuilderConfiguration) {\r\n        var props = instanceContainer.properties.filter(t => t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY);\r\n        props.forEach(t => {\r\n            let entity = t.entity;\r\n            if (!t.entity)\r\n                entity = this.getObjectPropertyInstance(object, t, formBuilderConfiguration);\r\n            if (entity) {\r\n                let instance = this.getInstanceContainer(entity, null);\r\n                if (instance && instance.conditionalValidationProps) {\r\n                    for (var key in instance.conditionalValidationProps) {\r\n                        var prop = instanceContainer.properties.filter(t => t.name == key)[0];\r\n                        if (prop) {\r\n                            if (!instanceContainer.conditionalValidationProps)\r\n                                instanceContainer.conditionalValidationProps = {};\r\n                            if (!instanceContainer.conditionalValidationProps[key])\r\n                                instanceContainer.conditionalValidationProps[key] = [];\r\n                            instance.conditionalValidationProps[key].forEach(x => {\r\n                                if (t.propertyType != ARRAY_PROPERTY)\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('.'));\r\n                                else\r\n                                    instanceContainer.conditionalValidationProps[key].push([t.name, x].join('[]'));\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getObject(model, entityObject, formBuilderConfiguration) {\r\n        let json = {};\r\n        if (typeof model == FUNCTION_STRING)\r\n            json.model = model;\r\n        if (typeof model == FUNCTION_STRING && (entityObject instanceof FormBuilderConfiguration)) {\r\n            json.entityObject = this.createClassObject(json.model, entityObject);\r\n        }\r\n        if (entityObject && !(entityObject instanceof FormBuilderConfiguration))\r\n            json.entityObject = entityObject;\r\n        if (entityObject instanceof FormBuilderConfiguration && !formBuilderConfiguration)\r\n            json.formBuilderConfiguration = entityObject;\r\n        else if (!(entityObject instanceof FormBuilderConfiguration) && formBuilderConfiguration) {\r\n            json.formBuilderConfiguration = formBuilderConfiguration;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, json.entityObject);\r\n        }\r\n        if (!entityObject) {\r\n            if (typeof model == OBJECT_STRING)\r\n                json.model = model.constructor;\r\n            json.entityObject = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        else if (model && (entityObject instanceof FormBuilderConfiguration) && (typeof model == OBJECT_STRING)) {\r\n            json[MODEL] = model.constructor;\r\n            json[ENTITY_OBJECT] = this.createClassObject(json.model, json.formBuilderConfiguration, model);\r\n        }\r\n        return json;\r\n    }\r\n    control(value, validators, asyncValidators) {\r\n        return new RxFormControl(value, validators, asyncValidators, {}, {}, '', []);\r\n    }\r\n    array(values, validatorConfig) {\r\n        let formArray = this.group({ temp: values }, validatorConfig).get(\"temp\");\r\n        var formBuilder = new FormBuilder();\r\n        return formBuilder.array(formArray.controls);\r\n    }\r\n    group(groupObject, validatorConfig) {\r\n        let modelInstance = super.createInstance();\r\n        let entityObject = {};\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig);\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.isGroupCalled = true;\r\n        let formGroup = this.formGroup(modelInstance.constructor, entityObject, validatorConfig);\r\n        this.isGroupCalled = false;\r\n        this.formGroupPropOtherValidator = {};\r\n        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator;\r\n        this.formGroupPropOtherValidator = {};\r\n        return formGroup;\r\n    }\r\n    applyAllPropValidator(propName, validatorConfig, modelInstance) {\r\n        if (validatorConfig && validatorConfig.applyAllProps) {\r\n            if (!(validatorConfig.excludeProps && validatorConfig.excludeProps.length > 0 && validatorConfig.excludeProps.indexOf(propName) == -1)) {\r\n                validatorConfig.applyAllProps.forEach((t) => {\r\n                    if (t.name == RX_WEB_VALIDATOR) {\r\n                        t(propName, modelInstance);\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(t);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    dynamicValidationPropCheck(propName, validatorConfig) {\r\n        return (validatorConfig == undefined) ? true : (!validatorConfig.dynamicValidationConfigurationPropertyName) ? true : validatorConfig.dynamicValidationConfigurationPropertyName == propName ? false : true;\r\n    }\r\n    isNotObject(value) {\r\n        return value instanceof Date || value === null || typeof value != OBJECT_STRING;\r\n    }\r\n    createValidatorFormGroup(groupObject, entityObject, modelInstance, validatorConfig) {\r\n        for (var propName in groupObject) {\r\n            var prop = groupObject[propName];\r\n            if (prop instanceof Array && prop.length > 0 && this.isNotObject(prop[0])) {\r\n                let propValidators = (prop.length > 1 && prop[1] instanceof Array) ? prop[1] : (prop.length == 2) ? [prop[1]] : [];\r\n                let propertyAdded = false;\r\n                for (var i = 0; i < propValidators.length; i++) {\r\n                    if (propValidators[i].name == RX_WEB_VALIDATOR) {\r\n                        propValidators[i](propName, modelInstance);\r\n                        propertyAdded = true;\r\n                    }\r\n                    else {\r\n                        if (!this.currentFormGroupPropOtherValidator[propName])\r\n                            this.currentFormGroupPropOtherValidator[propName] = [];\r\n                        this.currentFormGroupPropOtherValidator[propName].push(propValidators[i]);\r\n                    }\r\n                }\r\n                if (!propertyAdded)\r\n                    defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop === null || prop === undefined || typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, typeof modelInstance == OBJECT_STRING ? modelInstance : { constructor: modelInstance });\r\n                this.applyAllPropValidator(propName, validatorConfig, modelInstance);\r\n            }\r\n            else if (prop instanceof Array) {\r\n                if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                }\r\n                else {\r\n                    let propModelInstance = super.createInstance();\r\n                    if (typeof modelInstance == \"function\")\r\n                        modelInstance.constructor = modelInstance;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, propModelInstance.constructor, modelInstance);\r\n                    entityObject[propName] = [];\r\n                    for (let row of prop) {\r\n                        let jObject = {};\r\n                        entityObject[propName].push(jObject);\r\n                        this.createValidatorFormGroup(row, jObject, propModelInstance.constructor, validatorConfig);\r\n                    }\r\n                }\r\n            }\r\n            else if (typeof prop == OBJECT_STRING && !(prop instanceof FormControl || prop instanceof RxFormControl)) {\r\n                let formGroup = (prop instanceof FormArray) ? prop.controls[0] : prop;\r\n                if (!formGroup.model && (prop instanceof FormGroup || prop instanceof RxFormGroup)) {\r\n                    formGroup = this.group(formGroup.controls);\r\n                }\r\n                if (prop instanceof FormGroup || prop instanceof RxFormGroup) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else if (prop instanceof FormArray) {\r\n                    entityObject[propName] = prop;\r\n                    defaultContainer.initPropertyObject(propName, ARRAY_PROPERTY, formGroup.model, modelInstance);\r\n                }\r\n                else {\r\n                    if (this.dynamicValidationPropCheck(propName, validatorConfig)) {\r\n                        this.formGroupPropOtherValidator[propName] = {};\r\n                        this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[propName];\r\n                        let propModelInstance = super.createInstance();\r\n                        entityObject[propName] = {};\r\n                        entityObject[propName].constructor = propModelInstance.constructor;\r\n                        defaultContainer.initPropertyObject(propName, OBJECT_PROPERTY, entityObject[propName].constructor, modelInstance.constructor == Function ? { constructor: modelInstance } : modelInstance);\r\n                        let objectValidationConfig = this.getValidatorConfig(validatorConfig, groupObject, propName + \".\");\r\n                        this.createValidatorFormGroup(groupObject[propName], entityObject[propName], entityObject[propName].constructor, objectValidationConfig);\r\n                    }\r\n                    else\r\n                        entityObject[propName] = groupObject[propName];\r\n                }\r\n            }\r\n            if (typeof prop == STRING || typeof prop == NUMBER || typeof prop == BOOLEAN$1 || prop instanceof Date) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if ((prop && prop.length > 0 && this.isNotObject(prop[0]) && !(prop instanceof FormControl || prop instanceof RxFormControl) && !(prop instanceof FormArray))) {\r\n                entityObject[propName] = prop[0];\r\n            }\r\n            else if (prop instanceof FormArray) {\r\n                entityObject[propName] = prop;\r\n            }\r\n            else if (prop instanceof FormControl || prop instanceof RxFormControl) {\r\n                entityObject[propName] = prop;\r\n                defaultContainer.initPropertyObject(propName, PROPERTY, undefined, modelInstance.constructor ? modelInstance : { constructor: modelInstance });\r\n            }\r\n        }\r\n    }\r\n    getValidatorConfig(validatorConfig, entityObject, rootPropertyName, arrayPropertyName) {\r\n        let excludeProps = [];\r\n        let includeProps = [];\r\n        let ignoreUndefinedProps = [];\r\n        if (!validatorConfig)\r\n            return {};\r\n        const validationProps = this.getObjectForProperty(validatorConfig.dynamicValidation, rootPropertyName, arrayPropertyName);\r\n        const abstractControlOptions = this.getObjectForProperty(validatorConfig.abstractControlOptions, rootPropertyName, arrayPropertyName);\r\n        if (validatorConfig.excludeProps)\r\n            excludeProps = this.getProps(validatorConfig.excludeProps, rootPropertyName);\r\n        if (validatorConfig.includeProps)\r\n            includeProps = this.getProps(validatorConfig.includeProps, rootPropertyName);\r\n        if (validatorConfig.ignoreUndefinedProps)\r\n            ignoreUndefinedProps = this.getProps(validatorConfig.ignoreUndefinedProps, rootPropertyName, true);\r\n        if (!Object.keys(abstractControlOptions).length && rootPropertyName.endsWith('.') && validatorConfig.abstractControlOptions && validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)])\r\n            abstractControlOptions['global'] = validatorConfig.abstractControlOptions[rootPropertyName.substring(0, rootPropertyName.length - 1)];\r\n        const dynamicValidation = (validatorConfig.dynamicValidationConfigurationPropertyName && entityObject[validatorConfig.dynamicValidationConfigurationPropertyName]) ? entityObject[validatorConfig.dynamicValidationConfigurationPropertyName] : validationProps;\r\n        return { ignoreUndefinedProps: ignoreUndefinedProps, includeProps: includeProps, dynamicValidation: dynamicValidation, excludeProps: excludeProps, abstractControlOptions: abstractControlOptions };\r\n    }\r\n    getObjectForProperty(rootObject, rootPropertyName, arrayPropertyName) {\r\n        const result = {};\r\n        for (let propName in rootObject) {\r\n            if (!propName.startsWith(rootPropertyName) && (!arrayPropertyName || !propName.startsWith(arrayPropertyName)))\r\n                continue;\r\n            let splitProp = propName.split(\".\", 2)[1];\r\n            if (!splitProp)\r\n                continue;\r\n            result[splitProp] = rootObject[propName];\r\n        }\r\n        return result;\r\n    }\r\n    getProps(properties, rootPropertyName, isIgnoreProp = false) {\r\n        let props = [];\r\n        for (let prop of properties) {\r\n            if (prop.indexOf(rootPropertyName) != -1) {\r\n                let splitProps = prop.split(\".\");\r\n                if (splitProps.length == 2) {\r\n                    props.push(splitProps[1]);\r\n                }\r\n                else if (splitProps.length > 2) {\r\n                    splitProps.splice(0, 1);\r\n                    props.push(splitProps.join(\".\"));\r\n                }\r\n            }\r\n        }\r\n        if (isIgnoreProp && properties.filter(x => x == rootPropertyName.replace('.', '')).length == 1)\r\n            props.push(':self:');\r\n        return props;\r\n    }\r\n    formGroup(model, entityObject, formBuilderConfiguration) {\r\n        let json = this.getObject(model, entityObject, formBuilderConfiguration);\r\n        model = json.model;\r\n        entityObject = json.entityObject;\r\n        if (entityObject.constructor != model && !this.isGroupCalled) {\r\n            entityObject = json.entityObject = this.updateObject(model, json.entityObject, formBuilderConfiguration);\r\n        }\r\n        formBuilderConfiguration = json.formBuilderConfiguration;\r\n        if (formBuilderConfiguration)\r\n            this.extractExpressions(formBuilderConfiguration);\r\n        let instanceContainer = this.getInstanceContainer(model, entityObject);\r\n        this.checkObjectPropAdditionalValidation(instanceContainer, entityObject, formBuilderConfiguration);\r\n        let formGroupObject = {};\r\n        let extendedProperties = {};\r\n        let formChildGroup = undefined;\r\n        let formArrayGroup = undefined;\r\n        var additionalValidations = {};\r\n        instanceContainer.properties.forEach(property => {\r\n            let isIncludeProp = true;\r\n            if (formBuilderConfiguration) {\r\n                if (formBuilderConfiguration.excludeProps && formBuilderConfiguration.excludeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.excludeProps.indexOf(property.name) == -1;\r\n                if (formBuilderConfiguration.dynamicValidation)\r\n                    additionalValidations = formBuilderConfiguration.dynamicValidation;\r\n                if (formBuilderConfiguration.includeProps && formBuilderConfiguration.includeProps.length > 0)\r\n                    isIncludeProp = formBuilderConfiguration.includeProps.indexOf(property.name) != -1;\r\n                if (formBuilderConfiguration.ignoreUndefinedProps && formBuilderConfiguration.ignoreUndefinedProps.length > 0) {\r\n                    isIncludeProp = !(property.propertyType == PROPERTY && !RegexValidator.isNotBlank(json.entityObject[property.name]) && (formBuilderConfiguration.ignoreUndefinedProps.indexOf(property.name) !== -1 || formBuilderConfiguration.ignoreUndefinedProps.indexOf(\":self:\") !== -1));\r\n                }\r\n            }\r\n            if (property.ignore)\r\n                isIncludeProp = !property.ignore.call(json.entityObject, json.entityObject);\r\n            if (isIncludeProp) {\r\n                switch (property.propertyType) {\r\n                    case PROPERTY:\r\n                        if (!(entityObject[property.name] instanceof FormControl || entityObject[property.name] instanceof RxFormControl)) {\r\n                            let propertyValidators = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && t.isValidator);\r\n                            let updateOn = instanceContainer.propertyAnnotations.filter(t => t.propertyName == property.name && !t.isValidator && t.annotationType === \"updateOn\")[0];\r\n                            let sanitizeValue = super.sanitizeValue(instanceContainer, property.name, super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration), json.entityObject, Object.assign({}, json.entityObject));\r\n                            if (entityObject[property.name] === undefined && sanitizeValue)\r\n                                entityObject[property.name] = sanitizeValue;\r\n                            let validators = this.addFormControl(property, propertyValidators, additionalValidations[property.name], instanceContainer, entityObject);\r\n                            let abstractControlOptions = { validators: validators, asyncValidators: this.addAsyncValidation(property, propertyValidators, additionalValidations[property.name]) };\r\n                            abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, abstractControlOptions);\r\n                            if (updateOn && !abstractControlOptions.updateOn)\r\n                                abstractControlOptions.updateOn = updateOn.config.runOn;\r\n                            formGroupObject[property.name] = new RxFormControl(sanitizeValue, abstractControlOptions, [], json.entityObject, Object.assign({}, json.entityObject), property.name, instanceContainer.sanitizers[property.name]);\r\n                            this.isNested = false;\r\n                        }\r\n                        else\r\n                            formGroupObject[property.name] = super.getDefaultValue(property, entityObject[property.name], formBuilderConfiguration);\r\n                        extendedProperties[property.name] = true;\r\n                        break;\r\n                    case OBJECT_PROPERTY:\r\n                        let objectValue = entityObject[property.name];\r\n                        objectValue = !objectValue && property.defaultValue ? property.defaultValue : objectValue;\r\n                        if (!objectValue && property.objectConfig && property.objectConfig.autoCreate)\r\n                            objectValue = this.createClassObject(property.entity, {});\r\n                        if (objectValue && objectValue instanceof Object && !(objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name);\r\n                            if (this.formGroupPropOtherValidator[property.name])\r\n                                this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                            let objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, objectValue, `${property.name}.`);\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            formGroupObject[property.name] = this.formGroup(entity || property.entity || this.getEntity(objectValue, formBuilderConfiguration, property.name, true), objectValue, objectValidationConfig);\r\n                            this.conditionalObjectProps = [];\r\n                            this.builderConfigurationConditionalObjectProps = [];\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (objectValue instanceof FormGroup || objectValue instanceof RxFormGroup)\r\n                            formGroupObject[property.name] = objectValue;\r\n                        break;\r\n                    case ARRAY_PROPERTY:\r\n                        let arrayObjectValue = entityObject[property.name];\r\n                        if (arrayObjectValue && arrayObjectValue instanceof Array && !(arrayObjectValue instanceof FormArray)) {\r\n                            this.isNestedBinding = this.isNested = true;\r\n                            var formArrayGroup = [];\r\n                            let index = 0;\r\n                            let entity = property.entityProvider ? property.entityProvider.call(entityObject) : undefined;\r\n                            let objectValidationConfig = null;\r\n                            for (let subObject of arrayObjectValue) {\r\n                                if (instanceContainer && instanceContainer.conditionalObjectProps)\r\n                                    this.conditionalObjectProps = instanceContainer.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.conditionalValidationInstance && this.conditionalValidationInstance.conditionalObjectProps)\r\n                                    this.builderConfigurationConditionalObjectProps = this.conditionalValidationInstance.conditionalObjectProps.filter(t => t.objectPropName == property.name && t.arrayIndex == index);\r\n                                if (this.formGroupPropOtherValidator[property.name])\r\n                                    this.currentFormGroupPropOtherValidator = this.formGroupPropOtherValidator[property.name];\r\n                                objectValidationConfig = this.getValidatorConfig(formBuilderConfiguration, subObject, `${property.name}.`, `${property.name}[${index}].`);\r\n                                formArrayGroup.push(this.formGroup(entity || property.entity || this.getEntity(subObject, formBuilderConfiguration, property.name, true), subObject, objectValidationConfig));\r\n                                index++;\r\n                                this.conditionalObjectProps = [];\r\n                                this.builderConfigurationConditionalObjectProps = [];\r\n                            }\r\n                            let abstractControlOptions = this.getAbstractControlOptions(property.name, formBuilderConfiguration, {});\r\n                            formGroupObject[property.name] = new RxFormArray(arrayObjectValue, formArrayGroup, abstractControlOptions, null, property.arrayConfig);\r\n                            if (ReactiveFormConfig.autoInstancePush) {\r\n                                arrayObjectValue.push = (instance) => { let formGroup = this.formGroup(instance.constructor, instance, objectValidationConfig); formGroupObject[property.name].push(formGroup, { isAddedInstance: true }); return 0; };\r\n                                arrayObjectValue.splice = (start, deleteCount) => {\r\n                                    let end = (start + deleteCount) - 1;\r\n                                    for (var i = start; i <= end; i++) {\r\n                                        formGroupObject[property.name].removeAt(i, { isRemovedInstance: true });\r\n                                    }\r\n                                    return [];\r\n                                };\r\n                            }\r\n                            this.isNestedBinding = this.isNested = false;\r\n                        }\r\n                        else if (arrayObjectValue instanceof FormArray)\r\n                            formGroupObject[property.name] = arrayObjectValue;\r\n                        else if (property.arrayConfig && property.arrayConfig.createBlank)\r\n                            formGroupObject[property.name] = new RxFormArray([], [], null, null, property.arrayConfig);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        if (!this.isNested) {\r\n            this.conditionalValidationInstance = {};\r\n            this.builderConfigurationConditionalObjectProps = [];\r\n        }\r\n        let abstractControlOptions = {\r\n            validators: [],\r\n            asyncValidators: [],\r\n            updateOn: formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions['global']\r\n                ? formBuilderConfiguration.abstractControlOptions['global']\r\n                : undefined\r\n        };\r\n        abstractControlOptions = this.getAbstractControlOptions(\"global\", formBuilderConfiguration, abstractControlOptions);\r\n        let formGroup = new RxFormGroup(json.model, json.entityObject, formGroupObject, abstractControlOptions);\r\n        if (defaultContainer.isExperimental) {\r\n            json.entityObject[\"formGroup\"] = formGroup;\r\n            this.overrideProperties(formGroup, json.entityObject, extendedProperties);\r\n        }\r\n        if (!this.isNestedBinding && !this.isGroupCalled)\r\n            formGroup.refreshDisable();\r\n        return formGroup;\r\n    }\r\n    overrideProperties(formGroup, entityObject, properties) {\r\n        Object.keys(properties).forEach(t => {\r\n            this.overrideProp(entityObject, t, formGroup);\r\n        });\r\n    }\r\n    getAbstractControlOptions(name, formBuilderConfiguration, abstractControlOptions) {\r\n        if (formBuilderConfiguration && formBuilderConfiguration.abstractControlOptions && formBuilderConfiguration.abstractControlOptions[name])\r\n            abstractControlOptions.updateOn = formBuilderConfiguration.abstractControlOptions[name];\r\n        const controlOptions = formBuilderConfiguration ? formBuilderConfiguration.baseAbstractControlOptions : null;\r\n        if (controlOptions && controlOptions[name]) {\r\n            if (controlOptions[name].updateOn)\r\n                abstractControlOptions.updateOn = controlOptions[name].updateOn;\r\n            if (controlOptions[name].validators) {\r\n                if (Array.isArray(controlOptions[name].validators))\r\n                    controlOptions[name].validators.forEach(validator => abstractControlOptions.validators.push(validator));\r\n                else\r\n                    abstractControlOptions.validators.push(controlOptions[name].validators);\r\n            }\r\n            if (controlOptions[name].asyncValidators) {\r\n                if (Array.isArray(controlOptions[name].asyncValidators))\r\n                    controlOptions[name].asyncValidators.forEach(validator => abstractControlOptions.asyncValidators.push(validator));\r\n                else\r\n                    abstractControlOptions.asyncValidators.push(controlOptions[name].validators);\r\n            }\r\n        }\r\n        return abstractControlOptions;\r\n    }\r\n    overrideProp(entityObject, propName, formGroup) {\r\n        let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(entityObject), propName);\r\n        let value = entityObject[propName];\r\n        let oldValue = null;\r\n        Object.defineProperty(entityObject, propName, {\r\n            get: () => { return descriptor ? descriptor.get.call(entityObject) : value; },\r\n            set: (v) => {\r\n                value = v;\r\n                if (oldValue != v) {\r\n                    if (descriptor)\r\n                        descriptor.set.call(entityObject, v);\r\n                    if (!formGroup.changing && formGroup.controls[propName]) {\r\n                        formGroup.controls[propName].setValue(v);\r\n                    }\r\n                }\r\n                oldValue = v;\r\n            }\r\n        });\r\n    }\r\n}\r\nRxFormBuilder.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxFormBuilder, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nRxFormBuilder.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxFormBuilder });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxFormBuilder, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return []; } });\n\nclass TypedFormBuilder {\r\n    constructor() {\r\n        this.formBuilder = new FormBuilder();\r\n        this.rxFormBuilder = new RxFormBuilder();\r\n    }\r\n    group(controlsConfig, options) {\r\n        let paramOptions = options || {};\r\n        if (typeof controlsConfig == FUNCTION_STRING)\r\n            return !(paramOptions && paramOptions.isInstance) ? this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config) : this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config).modelInstance;\r\n        return this.formBuilder.group(controlsConfig, options);\r\n    }\r\n}\r\nTypedFormBuilder.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: TypedFormBuilder, deps: [], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nTypedFormBuilder.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: TypedFormBuilder });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: TypedFormBuilder, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return []; } });\n\nclass RxReactiveFormsModule {\r\n    static forRoot() { return { ngModule: RxReactiveFormsModule, providers: [] }; }\r\n}\r\nRxReactiveFormsModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxReactiveFormsModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\r\nRxReactiveFormsModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: RxReactiveFormsModule, declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective], imports: [CommonModule, FormsModule, ReactiveFormsModule], exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective] });\r\nRxReactiveFormsModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxReactiveFormsModule, providers: [RxFormBuilder, DecimalProvider, DecimalPipe], imports: [CommonModule, FormsModule, ReactiveFormsModule] });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: RxReactiveFormsModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],\r\n                    imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n                    providers: [RxFormBuilder, DecimalProvider, DecimalPipe],\r\n                    exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]\r\n                }]\r\n        }] });\r\n// Experimental\r\nclass ReactiveTypedFormsModule {\r\n    constructor() {\r\n        defaultContainer.isExperimental = true;\r\n        ReactiveFormConfig.autoInstancePush = true;\r\n    }\r\n    static forRoot() { return { ngModule: ReactiveTypedFormsModule, providers: [] }; }\r\n}\r\nReactiveTypedFormsModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ReactiveTypedFormsModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\r\nReactiveTypedFormsModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.12\", ngImport: i0, type: ReactiveTypedFormsModule, imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule], exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule] });\r\nReactiveTypedFormsModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ReactiveTypedFormsModule, providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder], imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot(), ReactiveFormsModule, FormsModule, ReactiveFormsModule] });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.12\", ngImport: i0, type: ReactiveTypedFormsModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [],\r\n                    imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],\r\n                    providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder],\r\n                    exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nfunction baseValidator(config, type, validator) {\r\n    var rxwebValidator = (control, target) => {\r\n        if (typeof control == STRING)\r\n            defaultContainer.init(target, 0, control, type, config, false);\r\n        else {\r\n            if (config && (!control.validatorConfig || !control.validatorConfig[type]))\r\n                ApplicationUtil.configureControl(control, config, type);\r\n            return validator(control);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(rxwebValidator, \"name\", { value: RX_WEB_VALIDATOR });\r\n    return rxwebValidator;\r\n}\r\nfunction baseAsyncValidatorExtension(config, type, validator) {\r\n    var rxwebValidator = (control, target) => {\r\n        if (typeof control == STRING)\r\n            defaultContainer.init(target, 0, control, type, config, true);\r\n        else {\r\n            if (config && (!control.validatorConfig || !control.validatorConfig[type]))\r\n                ApplicationUtil.configureControl(control, config, type);\r\n            return validator(control);\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(rxwebValidator, \"name\", { value: RX_WEB_VALIDATOR });\r\n    return rxwebValidator;\r\n}\n\nfunction alphaValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alpha, alphaValidator(config));\r\n}\r\nfunction alphaAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.alpha, baseAsyncValidator(config, AnnotationTypes.alpha));\r\n}\n\nfunction allOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.allOf, allOfValidator(config));\r\n}\r\nfunction allOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.allOf, baseAsyncValidator(config, AnnotationTypes.allOf));\r\n}\n\nfunction alphaNumericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.alphaNumeric, alphaNumericValidator(config));\r\n}\r\nfunction alphaNumericAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.alphaNumeric, baseAsyncValidator(config, AnnotationTypes.alphaNumeric));\r\n}\n\nfunction choiceValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.choice, choiceValidator(config));\r\n}\r\nfunction choiceAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.choice, baseAsyncValidator(config, AnnotationTypes.choice));\r\n}\n\nfunction compareValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compare, compareValidator(config));\r\n}\n\nfunction containsValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.contains, containsValidator(config));\r\n}\r\nfunction containsAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.contains, baseAsyncValidator(config, AnnotationTypes.contains));\r\n}\n\nfunction creditCardValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.creditCard, creditCardValidator(config));\r\n}\r\nfunction creditCardAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.creditCard, baseAsyncValidator(config, AnnotationTypes.creditCard));\r\n}\n\nfunction differentValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.different, differentValidator(config));\r\n}\n\nfunction digitValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.digit, digitValidator(config));\r\n}\n\nfunction emailValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.email, emailValidator(config));\r\n}\n\nfunction evenValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.even, evenValidator(config));\r\n}\n\nfunction factorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.factor, factorValidator(config));\r\n}\r\nfunction factorAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.factor, baseAsyncValidator(config, AnnotationTypes.factor));\r\n}\n\nfunction greaterThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThanEqualTo, greaterThanEqualToValidator(config));\r\n}\r\nfunction greaterThanEqualToAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThanEqualTo, baseAsyncValidator(config, AnnotationTypes.greaterThanEqualTo));\r\n}\n\nfunction greaterThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.greaterThan, greaterThanValidator(config));\r\n}\r\nfunction greaterThanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.greaterThan, baseAsyncValidator(config, AnnotationTypes.greaterThan));\r\n}\n\nfunction hexColorValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.hexColor, hexColorValidator(config));\r\n}\n\nfunction jsonValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.json, jsonValidator(config));\r\n}\n\nfunction leapYearValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.leapYear, leapYearValidator(config));\r\n}\n\nfunction lessThanEqualToValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThanEqualTo, lessThanEqualToValidator(config));\r\n}\r\nfunction lessThanEqualToAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.lessThanEqualTo, baseAsyncValidator(config, AnnotationTypes.lessThanEqualTo));\r\n}\n\nfunction lessThanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lessThan, lessThanValidator(config));\r\n}\r\nfunction lessThanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.lessThan, baseAsyncValidator(config, AnnotationTypes.lessThan));\r\n}\n\nfunction lowerCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.lowerCase, lowercaseValidator(config));\r\n}\n\nfunction macValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mac, macValidator(config));\r\n}\n\nfunction maxDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxDate, maxDateValidator(config));\r\n}\r\nfunction maxDateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxDate, baseAsyncValidator(config, AnnotationTypes.maxDate));\r\n}\n\nfunction maxLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxLength, maxLengthValidator(config));\r\n}\r\nfunction maxLengthAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxLength, baseAsyncValidator(config, AnnotationTypes.maxLength));\r\n}\n\nfunction maxNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxNumber, maxNumberValidator(config));\r\n}\r\nfunction maxNumberAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxNumber, baseAsyncValidator(config, AnnotationTypes.maxNumber));\r\n}\n\nfunction minDateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minDate, minDateValidator(config));\r\n}\r\nfunction minDateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minDate, baseAsyncValidator(config, AnnotationTypes.minDate));\r\n}\n\nfunction minLengthValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minLength, minLengthValidator(config));\r\n}\r\nfunction minLengthAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minLength, baseAsyncValidator(config, AnnotationTypes.minLength));\r\n}\n\nfunction minNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minNumber, minNumberValidator(config));\r\n}\r\nfunction minNumberAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minNumber, baseAsyncValidator(config, AnnotationTypes.minNumber));\r\n}\n\nfunction noneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.noneOf, noneOfValidator(config));\r\n}\r\nfunction noneOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.noneOf, baseAsyncValidator(config, AnnotationTypes.noneOf));\r\n}\n\nfunction numericValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.numeric, numericValidator(config));\r\n}\r\nfunction numericAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.numeric, baseAsyncValidator(config, AnnotationTypes.numeric));\r\n}\n\nfunction oddValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.odd, oddValidator(config));\r\n}\n\nfunction oneOfValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.oneOf, oneOfValidator(config));\r\n}\r\nfunction oneOfAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.oneOf, baseAsyncValidator(config, AnnotationTypes.oneOf));\r\n}\n\nfunction passwordcValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.password, passwordValidator(config));\r\n}\r\nfunction passwordAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.password, baseAsyncValidator(config, AnnotationTypes.password));\r\n}\n\nfunction patternValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.pattern, patternValidator(config));\r\n}\r\nfunction patternAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.pattern, baseAsyncValidator(config, AnnotationTypes.pattern));\r\n}\n\nfunction rangeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.range, rangeValidator(config));\r\n}\r\nfunction rangeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.range, baseAsyncValidator(config, AnnotationTypes.range));\r\n}\n\nfunction requiredValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.required, requiredValidator(config));\r\n}\n\nfunction timeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.time, timeValidator(config));\r\n}\r\nfunction timeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.time, baseAsyncValidator(config, AnnotationTypes.time));\r\n}\n\nfunction upperCaseValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.upperCase, uppercaseValidator(config));\r\n}\n\nfunction urlValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.url, urlValidator(config));\r\n}\r\nfunction urlAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.url, baseAsyncValidator(config, AnnotationTypes.url));\r\n}\n\nfunction asciiValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ascii, asciiValidator(config));\r\n}\n\nfunction dataUriValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.dataUri, dataUriValidator(config));\r\n}\n\nfunction portValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.port, portValidator(config));\r\n}\n\nfunction latLongValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latLong, latLongValidator(config));\r\n}\n\nfunction extensionValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.extension, (control) => { return null; });\r\n}\r\nfunction extensionAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.extension, baseAsyncValidator(config, AnnotationTypes.extension));\r\n}\n\nfunction fileSizeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.fileSize, (control) => { return null; });\r\n}\r\nfunction fileSizeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.fileSize, baseAsyncValidator(config, AnnotationTypes.fileSize));\r\n}\n\nfunction endsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.endsWith, endsWithValidator(config));\r\n}\r\nfunction endsWithAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.endsWith, baseAsyncValidator(config, AnnotationTypes.endsWith));\r\n}\n\nfunction startsWithValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.startsWithWith, startsWithValidator(config));\r\n}\r\nfunction startsWithAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.startsWithWith, baseAsyncValidator(config, AnnotationTypes.startsWith));\r\n}\n\nfunction primeNumberValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.primeNumber, primeNumberValidator(config));\r\n}\n\nfunction latitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.latitude, latitudeValidator(config));\r\n}\n\nfunction longitudeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.longitude, longitudeValidator(config));\r\n}\n\nfunction composeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.compose, composeValidator(config));\r\n}\n\nfunction fileValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.file, (control) => { return null; });\r\n}\r\nfunction fileAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.file, baseAsyncValidator(config, AnnotationTypes.file));\r\n}\n\nfunction customValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.custom, customValidator(config));\r\n}\r\nfunction customAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.custom, baseAsyncValidator(config, AnnotationTypes.custom));\r\n}\n\nfunction uniqueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.unique, uniqueValidator(config));\r\n}\n\nfunction imageValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.image, (control) => { return null; });\r\n}\r\nfunction imageAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.image, baseAsyncValidator(config, AnnotationTypes.image));\r\n}\n\nfunction notEmptyValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.notEmpty, notEmptyValidator(config));\r\n}\n\nfunction ipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.ip, ipValidator(config));\r\n}\r\nfunction ipAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.ip, baseAsyncValidator(config, AnnotationTypes.ip));\r\n}\n\nfunction cusipValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.cusip, cusipValidator(config));\r\n}\n\nfunction gridValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.grid, gridValidator(config));\r\n}\n\nfunction dateValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.date, dateValidator(config));\r\n}\r\nfunction dateAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.date, baseAsyncValidator(config, AnnotationTypes.date));\r\n}\n\nfunction andValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.and, andValidator(config));\r\n}\n\nfunction orValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.or, orValidator(config));\r\n}\n\nfunction notValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.not, notValidator(config));\r\n}\n\nfunction minTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.minTime, minTimeValidator(config));\r\n}\r\nfunction minTimeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.minTime, baseAsyncValidator(config, AnnotationTypes.minTime));\r\n}\n\nfunction maxTimeValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.maxTime, maxTimeValidator(config));\r\n}\r\nfunction maxTimeAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.maxTime, baseAsyncValidator(config, AnnotationTypes.maxTime));\r\n}\n\nfunction requiredTrueValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.requiredTrue, requiredTrueValidator(config));\r\n}\n\nfunction maskValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.mask, maskValidator(config));\r\n}\n\nfunction ibanValidatorExtension(config) {\r\n    return baseValidator(config, AnnotationTypes.iban, ibanValidator(config));\r\n}\r\nfunction ibanAsyncValidatorExtension(config) {\r\n    return baseAsyncValidatorExtension(config, AnnotationTypes.iban, baseAsyncValidator(config, AnnotationTypes.iban));\r\n}\n\nclass RxwebValidators {\r\n}\r\nRxwebValidators.alpha = alphaValidatorExtension;\r\nRxwebValidators.allOf = allOfValidatorExtension;\r\nRxwebValidators.alphaNumeric = alphaNumericValidatorExtension;\r\nRxwebValidators.choice = choiceValidatorExtension;\r\nRxwebValidators.compare = compareValidatorExtension;\r\nRxwebValidators.contains = containsValidatorExtension;\r\nRxwebValidators.creditCard = creditCardValidatorExtension;\r\nRxwebValidators.different = differentValidatorExtension;\r\nRxwebValidators.digit = digitValidatorExtension;\r\nRxwebValidators.email = emailValidatorExtension;\r\nRxwebValidators.even = evenValidatorExtension;\r\nRxwebValidators.factor = factorValidatorExtension;\r\nRxwebValidators.greaterThanEqualTo = greaterThanEqualToValidatorExtension;\r\nRxwebValidators.greaterThan = greaterThanValidatorExtension;\r\nRxwebValidators.hexColor = hexColorValidatorExtension;\r\nRxwebValidators.json = jsonValidatorExtension;\r\nRxwebValidators.leapYear = leapYearValidatorExtension;\r\nRxwebValidators.lessThanEqualTo = lessThanEqualToValidatorExtension;\r\nRxwebValidators.lessThan = lessThanValidatorExtension;\r\nRxwebValidators.lowerCase = lowerCaseValidatorExtension;\r\nRxwebValidators.mac = macValidatorExtension;\r\nRxwebValidators.maxDate = maxDateValidatorExtension;\r\nRxwebValidators.maxLength = maxLengthValidatorExtension;\r\nRxwebValidators.maxNumber = maxNumberValidatorExtension;\r\nRxwebValidators.minDate = minDateValidatorExtension;\r\nRxwebValidators.minLength = minLengthValidatorExtension;\r\nRxwebValidators.minNumber = minNumberValidatorExtension;\r\nRxwebValidators.noneOf = noneOfValidatorExtension;\r\nRxwebValidators.numeric = numericValidatorExtension;\r\nRxwebValidators.odd = oddValidatorExtension;\r\nRxwebValidators.oneOf = oneOfValidatorExtension;\r\nRxwebValidators.password = passwordcValidatorExtension;\r\nRxwebValidators.pattern = patternValidatorExtension;\r\nRxwebValidators.range = rangeValidatorExtension;\r\nRxwebValidators.required = requiredValidatorExtension;\r\nRxwebValidators.time = timeValidatorExtension;\r\nRxwebValidators.upperCase = upperCaseValidatorExtension;\r\nRxwebValidators.url = urlValidatorExtension;\r\nRxwebValidators.ascii = asciiValidatorExtension;\r\nRxwebValidators.dataUri = dataUriValidatorExtension;\r\nRxwebValidators.port = portValidatorExtension;\r\nRxwebValidators.latLong = latLongValidatorExtension;\r\nRxwebValidators.extension = extensionValidatorExtension;\r\nRxwebValidators.fileSize = fileSizeValidatorExtension;\r\nRxwebValidators.endsWith = endsWithValidatorExtension;\r\nRxwebValidators.startsWith = startsWithValidatorExtension;\r\nRxwebValidators.primeNumber = primeNumberValidatorExtension;\r\nRxwebValidators.latitude = latitudeValidatorExtension;\r\nRxwebValidators.longitude = longitudeValidatorExtension;\r\nRxwebValidators.compose = composeValidatorExtension;\r\nRxwebValidators.file = fileValidatorExtension;\r\nRxwebValidators.custom = customValidatorExtension;\r\nRxwebValidators.unique = uniqueValidatorExtension;\r\nRxwebValidators.image = imageValidatorExtension;\r\nRxwebValidators.notEmpty = notEmptyValidatorExtension;\r\nRxwebValidators.ip = ipValidatorExtension;\r\nRxwebValidators.cusip = cusipValidatorExtension;\r\nRxwebValidators.grid = gridValidatorExtension;\r\nRxwebValidators.date = dateValidatorExtension;\r\nRxwebValidators.and = andValidatorExtension;\r\nRxwebValidators.or = orValidatorExtension;\r\nRxwebValidators.not = notValidatorExtension;\r\nRxwebValidators.minTime = minTimeValidatorExtension;\r\nRxwebValidators.maxTime = maxTimeValidatorExtension;\r\nRxwebValidators.requiredTrue = requiredTrueValidatorExtension;\r\nRxwebValidators.mask = maskValidatorExtension;\r\nRxwebValidators.iban = ibanValidatorExtension;\r\nRxwebValidators.alphaAsync = alphaAsyncValidatorExtension;\r\nRxwebValidators.alphaNumericAsync = alphaNumericAsyncValidatorExtension;\r\nRxwebValidators.allOfAsync = allOfAsyncValidatorExtension;\r\nRxwebValidators.choiceAsync = choiceAsyncValidatorExtension;\r\nRxwebValidators.containsAsync = containsAsyncValidatorExtension;\r\nRxwebValidators.creditCardAsync = creditCardAsyncValidatorExtension;\r\nRxwebValidators.customAsync = customAsyncValidatorExtension;\r\nRxwebValidators.dateAsync = dateAsyncValidatorExtension;\r\nRxwebValidators.endsWithAsync = endsWithAsyncValidatorExtension;\r\nRxwebValidators.extensionAsync = extensionAsyncValidatorExtension;\r\nRxwebValidators.factorAsync = factorAsyncValidatorExtension;\r\nRxwebValidators.fileSizeAsync = fileSizeAsyncValidatorExtension;\r\nRxwebValidators.fileAsync = fileAsyncValidatorExtension;\r\nRxwebValidators.greaterThanEqualToAsync = greaterThanEqualToAsyncValidatorExtension;\r\nRxwebValidators.greaterThanAsync = greaterThanAsyncValidatorExtension;\r\nRxwebValidators.imageAsync = imageAsyncValidatorExtension;\r\nRxwebValidators.ipAsync = ipAsyncValidatorExtension;\r\nRxwebValidators.lessThanEqualToAsync = lessThanEqualToAsyncValidatorExtension;\r\nRxwebValidators.lessThanAsync = lessThanAsyncValidatorExtension;\r\nRxwebValidators.maxDateAsync = maxDateAsyncValidatorExtension;\r\nRxwebValidators.maxLengthAsync = maxLengthAsyncValidatorExtension;\r\nRxwebValidators.maxNumberAsync = maxNumberAsyncValidatorExtension;\r\nRxwebValidators.maxTimeAsync = maxTimeAsyncValidatorExtension;\r\nRxwebValidators.minDateAsync = minDateAsyncValidatorExtension;\r\nRxwebValidators.minLengthAsync = minLengthAsyncValidatorExtension;\r\nRxwebValidators.minNumberAsync = minNumberAsyncValidatorExtension;\r\nRxwebValidators.minTimeAsync = minTimeAsyncValidatorExtension;\r\nRxwebValidators.noneOfAsync = noneOfAsyncValidatorExtension;\r\nRxwebValidators.numericAsync = numericAsyncValidatorExtension;\r\nRxwebValidators.oneOfAsync = oneOfAsyncValidatorExtension;\r\nRxwebValidators.passwordAsync = passwordAsyncValidatorExtension;\r\nRxwebValidators.patternAsync = patternAsyncValidatorExtension;\r\nRxwebValidators.rangeAsync = rangeAsyncValidatorExtension;\r\nRxwebValidators.startsWithAsync = startsWithAsyncValidatorExtension;\r\nRxwebValidators.timeAsync = timeAsyncValidatorExtension;\r\nRxwebValidators.urlAsync = urlAsyncValidatorExtension;\r\nRxwebValidators.ibanAsync = ibanAsyncValidatorExtension;\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AsyncValidationDirective, ErrorMessageBindingStrategy, FileControlDirective, FormBuilderConfiguration, HtmlControlTemplateDirective, IAbstractControl, ImageFileControlDirective, IpVersion, NumericValueType, ReactiveFormConfig, ReactiveTypedFormsModule, ResetFormType, RxFormArray, RxFormBuilder, RxFormControl, RxFormControlDirective, RxFormGroup, RxReactiveFormsModule, RxwebFormDirective, RxwebValidators, TypedForm, TypedFormBuilder, UrlValidationType, ValidationAlphabetLocale, allOf, allOfAsync, alpha, alphaAsync, alphaNumeric, alphaNumericAsync, and, ascii, async, blacklist, choice, choiceAsync, compare, compose, contains, containsAsync, creditCard, creditCardAsync, cusip, custom, customAsync, dataUri, date, dateAsync, different, digit, disable, elementClass, email, endsWith, endsWithAsync, error, escape, even, extension, extensionAsync, factor, factorAsync, file, fileAsync, fileSize, fileSizeAsync, greaterThan, greaterThanAsync, greaterThanEqualTo, greaterThanEqualToAsync, grid, hexColor, image, imageAsync, json, latLong, latitude, leapYear, lessThan, lessThanAsync, lessThanEqualTo, lessThanEqualToAsync, longitude, lowerCase, ltrim, mac, mask, maxDate, maxDateAsync, maxLength, maxLengthAsync, maxNumber, maxNumberAsync, maxTime, maxTimeAsync, minDate, minDateAsync, minLength, minLengthAsync, minNumber, minNumberAsync, minTime, minTimeAsync, model, noneOf, noneOfAsync, not, notEmpty, numeric, numericAsync, odd, oneOf, oneOfAsync, or, password, passwordAsync, pattern, patternAsync, port, prefix, primeNumber, prop, propArray, propObject, range, rangeAsync, required, requiredTrue, rtrim, rule, sanitize, startsWith, startsWithAsync, stripLow, suffix, time, timeAsync, toBoolean, toDate, toDouble, toFloat, toInt, toString, trim, unique, updateOn, upperCase, url, urlAsync, whitelist };\n//# sourceMappingURL=rxweb-reactive-form-validators.mjs.map\n"]},"metadata":{},"sourceType":"module"}