{"version":3,"file":"angular-cd-timer.component.d.ts","sources":["angular-cd-timer.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { TimeInterface } from './angular-cd-timer.interface';\nexport declare class CdTimerComponent implements AfterViewInit, OnDestroy {\n    private elt;\n    private renderer;\n    private timeoutId;\n    private tickCounter;\n    private ngContentSchema;\n    private seconds;\n    private minutes;\n    private hours;\n    private days;\n    startTime: number;\n    endTime: number;\n    countdown: boolean;\n    autoStart: boolean;\n    maxTimeUnit: string;\n    format: string;\n    onStart: EventEmitter<CdTimerComponent>;\n    onStop: EventEmitter<CdTimerComponent>;\n    onTick: EventEmitter<TimeInterface>;\n    onComplete: EventEmitter<CdTimerComponent>;\n    constructor(elt: ElementRef, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Start the timer\n     */\n    start(): void;\n    /**\n     * Resume the timer\n     */\n    resume(): void;\n    /**\n     * Stop the timer\n     */\n    stop(): void;\n    /**\n     * Reset the timer\n     */\n    reset(): void;\n    /**\n     * Get the time information\n     * @returns TimeInterface\n     */\n    get(): {\n        seconds: number;\n        minutes: number;\n        hours: number;\n        days: number;\n        timer: any;\n        tick_count: number;\n    };\n    /**\n     * Initialize variable before start\n     */\n    private initVar;\n    /**\n     * Reset timeout\n     */\n    private resetTimeout;\n    /**\n     * Render the time to DOM\n     */\n    private renderText;\n    private clear;\n    /**\n     * Compute each unit (seconds, minutes, hours, days) for further manipulation\n     * @protected\n     */\n    protected computeTimeUnits(): void;\n    /**\n     * Start tick count, base of this component\n     * @protected\n     */\n    protected startTickCount(): void;\n}\n"]}